//@ui5-bundle iot/singleplanningcalendar/Component-preload.js
sap.ui.require.preload({
	"iot/singleplanningcalendar/Component.js":function(){sap.ui.define(["sap/ui/core/UIComponent","sap/ui/Device","iot/singleplanningcalendar/model/models"],(e,i,n)=>e.extend("iot.singleplanningcalendar.Component",{metadata:{manifest:"json"},init(){e.prototype.init.apply(this,arguments);this.getRouter().initialize();this.setModel(n.createDeviceModel(),"device")}}));
},
	"iot/singleplanningcalendar/controller/BaseController.js":function(){sap.ui.define(["sap/ui/core/mvc/Controller","sap/ui/core/routing/History"],(e,t)=>e.extend("iot.singleplanningcalendar.controller.BaseController",{getRouter(){return this.getOwnerComponent().getRouter()},getModel(e){return this.getView().getModel(e)},setModel(e,t){return this.getView().setModel(e,t)},getResourceBundle(){return this.getOwnerComponent().getModel("i18n").getResourceBundle()},async read({path:e,...t}){return new Promise((r,a)=>{this.getModel("OData").read(e,{...t,success:r,error:a})})},async update({path:e,data:t}){return new Promise((r,a)=>{this.getModel("OData").update(e,t,{success:r,error:a})})},async create({path:e,data:t}){return new Promise((r,a)=>{this.getModel("OData").create(e,t,{success:r,error:a})})},async reset({path:e,data:t}){return new Promise((r,a)=>{this.getModel("OData").update(e,{...t,resetEntry:true},{success:r,error:a})})},async remove({path:e,data:{ID:t,activatedDate:r,completedDate:a}}){return new Promise((s,o)=>{this.getModel("OData").update(e,{ID:t,activatedDate:r,completedDate:a,deleted:true},{success:s,error:o})})},onNavBack(){const e=t.getInstance().getPreviousHash();if(e!==undefined){history.go(-1)}else{this.getRouter().navTo("master",{},true)}}}));
},
	"iot/singleplanningcalendar/controller/ErrorParser.js":'function extractErrorMsgFromXML(r){const e=new DOMParser;const t=e.parseFromString(r,"text/xml");return t.getElementsByTagName("error")[0].getElementsByTagName("message")[0].childNodes[0].wholeText}function extractErrorMsgFromJSON(r){const e=JSON.parse(r.responseText);const t=e.error.message.value||"The error could not be parsed.";return t}function parseError(r){try{if(!r.responseText&&r.message)return r.message;return extractErrorMsgFromJSON(r)}catch(e){try{return extractErrorMsgFromXML(r)}catch(r){return"The error message could not be parsed."}}}sap.ui.define([],()=>({parse(r){const e=parseError(r);return e}}));',
	"iot/singleplanningcalendar/controller/SinglePlanningCalendar.controller.js":function(){const nest=(e,t=null,n="parent_ID")=>e.filter(e=>e[n]===t).map(t=>({...t,children:nest(e,t.ID)}));const reduce=e=>e.reduce((e,t)=>({...e,[t.ID]:{...t,children:reduce(t.children)}}),{});const capitalizeFirstLetter=e=>e.charAt(0).toUpperCase()+e.slice(1);const createDeepPath=(e,t)=>{let n=`/categories`;for(let s=1;s<=e;s+=1){n+=`/${t[`level${s-1}`]}/children`}return n};sap.ui.define(["./BaseController","./ErrorParser","sap/ui/model/Filter","../model/formatter","sap/ui/core/Item","sap/ui/model/json/JSONModel","sap/m/Label","../model/legendItems","sap/m/MessageBox","sap/m/MessageToast","sap/m/Select"],(e,t,n,s,a,o,r,i,c,l,p)=>{function d(e,t){const n=new Date(e);n.setDate(n.getDate()+t);return n}function h(){const e=new Date((new Date).setHours(0,0,0,1));const t=e.getDay();const n=e.getDate()-t+(t===0?-6:1);return new Date(e.setDate(n))}return e.extend("iot.singleplanningcalendar.controller.SinglePlanningCalendar",{formatter:s,async onInit(){const e=this.getResourceBundle();const n=this.byId("SPCalendar");const s=n.getViews()[1];const a=this.byId("createItemDialog");const r=new o({appointments:{NEW:{}},busy:false,categories:{},legendItems:Object.entries(i.getItems()).map(([t,{type:n}])=>({text:e.getText(`legendItems.${t}`),type:n}))});n.setSelectedView(s);n.setStartDate(h());r.setSizeLimit(300);this.setModel(r);await this.getModel("OData").metadataLoaded();try{await Promise.all([this._loadAppointments(),this._loadHierarchy()])}catch(e){c.error(t.parse(e))}$(document).keydown(t=>{const n=$(document.activeElement)&&$(document.activeElement).control()[0]&&$(document.activeElement).control()[0].getId();if(t.ctrlKey){if(t.keyCode===13&&!this.byId("submitButton").getEnabled()){l.show(e.getText("appointmentDialog.invalidInput"));return}if(t.keyCode===13&&n&&!n.includes("submitButton")){t.preventDefault();this.onSubmitEntry()}else if(t.keyCode===46){t.preventDefault();const e=sap.ui.getCore().byId(n);const s=e.getBindingContext().getObject();this._deleteAppointment(s)}}})},onDisplayLegend(){this.byId("legendDialog").open()},onPressAppointment(e){const{appointment:t}=e.getParameters();if(t){this._bindAndOpenDialog(t.getBindingContext().getPath())}},async onEditAppointment(e){const t=this.getModel();const{appointments:n}=t.getData();const{startDate:s,endDate:a,appointment:o,copy:r}=e.getParameters();const i=o.getBindingContext();const c=i.getObject();let l=i.getPath();if(r){l="/appointments/NEW";t.setProperty("/appointments/NEW",o)}t.setProperty(`${l}/activatedDate`,s);t.setProperty(`${l}/completedDate`,a);if(!c.parent_ID){this._bindAndOpenDialog(l);return}this._submitEntry({...c,activatedDate:s,completedDate:a})},onPressDeleteAppointment(e){const t=e.getSource().getBindingContext().getObject();this._deleteAppointment(t)},async _deleteAppointment(e){const n=this.getModel();const{appointments:s}=n.getData();n.setProperty("/dialogBusy",true);try{await this.remove({path:`/MyWorkItems(ID='${encodeURIComponent(e.ID)}')`,data:e});delete s[e.ID];this._closeDialog("createItemDialog")}catch(e){c.error(t.parse(e))}n.setProperty("/dialogBusy",false)},async onPressResetAppointment(e){const n=this.getModel();const{appointments:s}=n.getData();const a=e.getSource().getBindingContext().getObject();n.setProperty("/dialogBusy",true);try{const e=await this.reset({path:`/MyWorkItems(ID='${encodeURIComponent(a.ID)}')`,appointment:a});s[e.ID]=e;this._closeDialog("createItemDialog")}catch(e){c.error(t.parse(e))}n.setProperty("/dialogBusy",false)},onCreateAppointment(e){this._createAppointment(e);this._bindAndOpenDialog("/appointments/NEW")},_createAppointment(e){const t=this.getModel();const{startDate:n,endDate:s}=e.getParameters();const a={activatedDate:n,completedDate:s,hierarchy:{}};t.setProperty("/appointments/NEW",a)},_bindAndOpenDialog(e){const t=this.getModel();const n=this.getResourceBundle();const s=t.getProperty(e);const a=this.byId("createItemDialog");t.setProperty("/createItemDialogTitle",s.ID?n.getText("editAppointment"):n.getText("createAppointment"));this._bindHierarchyInputs(s);a.bindElement(e);a.open()},_bindHierarchyInputs(e){const{hierarchy:t}=e;if(!t)return;const n=this.getModel();const s=n.getProperty("/hierarchyDepth");for(let e=0;e<=s;e+=1){const n=`level${e}`;if(t[n]||e===0){this._bindSelectControl(`select${capitalizeFirstLetter(n)}`,createDeepPath(e,t))}}},_bindSelectControl(e,t){const n=this.byId(e);n.bindItems({path:t,template:new a({text:"{title}",key:"{ID}"})})},async onSubmitEntry(){const e=this.getModel();const t=this.byId("createItemDialog").getBindingContext().getObject();if(t.isAllDay){l.show(this.getResourceBundle().getText("message.allDayEventsAreNotEditable"));return}e.setProperty("/dialogBusy",true);await this._submitEntry(t);e.setProperty("/dialogBusy",false);this._closeDialog("createItemDialog")},async _submitEntry(e){const{hierarchy:n,...s}=e;const a=this.getModel();const{appointments:o,hierarchyDepth:r}=a.getData();let i="";for(let e=r;e>=0;e-=1){if(n[`level${e}`]){i=n[`level${e}`];break}}s.hierarchy_parent=i;let l;try{if(e.ID){const t=`/MyWorkItems(ID='${encodeURIComponent(e.ID)}')`;l=await this.update({path:t,data:s})}else{l=await this.create({path:"/MyWorkItems",data:s})}l.hierarchy=e.hierarchy;o[l.ID]=l;o.NEW={};a.setProperty("/appointments",o)}catch(e){c.error(t.parse(e))}},onCloseDialog(e){e.getSource().getParent().close()},_closeDialog(e){this.byId(e).close()},onChangeView(){this._loadAppointments()},onStartDateChange(){this._loadAppointments()},_getCalendarEndDate(){const e=this.byId("SPCalendar");const t=e.getStartDate();const n=e._getSelectedView().getKey();const s={Day:1,WorkWeek:5,Week:7,Month:31};const a=s[n];const o=d(t,a);return o},async _loadAppointments(){const e=this.getModel();const t=this.byId("SPCalendar");const s=e.getProperty("/appointments");const a=t.getStartDate();const o=this._getCalendarEndDate();e.setProperty("/busy",true);const{results:r}=await this.read({path:"/MyWorkItems",urlParameters:{$top:100,$expand:"hierarchy"},filters:[new n({filters:[new n({path:"completedDate",operator:"GT",value1:a}),new n({path:"activatedDate",operator:"LE",value1:o})],and:true})]});const i=r.reduce((e,t)=>{e[t.ID]={completedDate:t.isAllDay?t.completedDate.setHours(0):t.completedDate,activatedDate:t.isAllDay?t.activatedDate.setHours(0):t.activatedDate,...t};return e},{});e.setProperty("/appointments",{...s,...i});e.setProperty("/busy",false)},async _loadHierarchy(){const e=this.getModel();e.setProperty("/busy",true);const[{results:t},{results:n}]=await Promise.all([this.read({path:"/MyCategories"}),this.read({path:"/HierarchyLevels"})]);const s=reduce(nest(t));const a=Math.max(...t.map(({hierarchyLevel:e})=>e));const o=this.byId("appointmentSimpleForm");const i=3;n.forEach(({hierarchyLevel:e,title:t},n)=>{o.insertContent(new r({text:t}),i+n*2);o.insertContent(new p({selectedKey:`{hierarchy/level${e}}`,id:this.getView().createId(`selectLevel${e}`),forceSelection:false,change:t=>{const n=t.getParameter("selectedItem");const s=n?.getBindingContext().getPath();if(e<a){this._bindSelectControl(`selectLevel${e+1}`,`${s}/children`)}}}),i+n*2+1)});e.setProperty("/hierarchyDepth",a);e.setProperty("/categories",s);e.setProperty("/busy",false)},_getUser(){return new Promise((e,t)=>{this.getModel("OData").read("/MyUser",{success:n=>{const s=n.results[0];if(!s)t(new Error("User does not exist in DB. Please create it."));return e(s)}})})}})});
},
	"iot/singleplanningcalendar/i18n/i18n.properties":'appTitle=My Calendar\r\nappSubtitle=Track & Plan\r\nappDescription=Plan and confirm your work\r\n\r\nappointmentDialogTitle=Create new entry\r\nappointmentDialog.draftIndicator= - Draft\r\n\r\ncreateAppointment.button.text=Create\r\ncreateAppointment.button.tooltip=Create new entry\r\n\r\ndisplayLegend.button.text=Display Legend\r\ndisplayLegend.button.tooltip=Display Legend for appointments\r\n\r\ncreateAppointment=Create new entry\r\neditAppointment=Edit entry\r\n\r\nresetEntry.button.text=Reset\r\nresetEntry.button.tooltip=Reset entry\r\n\r\ndeleteEntry.button.text=Delete\r\ndeleteEntry.button.tooltip=Delete entry\r\n\r\nenterDetailsFirst=Enter details first\r\n\r\nlegend.title=Legend\r\n\r\nlegendItems.Manual_Allocated_Billed=Manual, Allocated, Billed\r\nlegendItems.Manual_Allocated_NotBilled=Manual, Allocated, Billed\r\nlegendItems.Manual_NotAllocated_Billed=Manual, Not Allocated, Billed\r\nlegendItems.Manual_NotAllocated_NotBilled=Manual, Not Allocated, Not Billed\r\nlegendItems.WorkItem_Allocated_Billed=WorkItem, Allocated, Billed\r\nlegendItems.WorkItem_Allocated_NotBilled=WorkItem, Allocated, Not Billed\r\nlegendItems.WorkItem_NotAllocated_Billed=WorkItem, Not Allocated, Billed\r\nlegendItems.WorkItem_NotAllocated_NotBilled=WorkItem, Not Allocated, Not Billed\r\nlegendItems.Event_Allocated_Billed=Event, Allocated, Billed\r\nlegendItems.Event_Allocated_NotBilled=Event, Allocated, Not Billed\r\nlegendItems.Event_NotAllocated_Billed=Event, Not Allocated, Billed\r\nlegendItems.Event_NotAllocated_NotBilled=Event, Not Allocated, Not Billed\r\n\r\ncalendar.dayView=Day\r\ncalendar.weekView=Week\r\ncalendar.workWeekView=Work Week\r\ncalendar.monthView=Month\r\n\r\nOK=OK\r\nclose=Close\r\n\r\nWorkItems.ID=ID\r\nWorkItems.assignedTo=Assigned To\r\nWorkItems.assignedToName=Assigned To Name\r\nWorkItems.changedDate=Changed Date\r\nWorkItems.createdDate=Created Date\r\nWorkItems.reason=Reason\r\nWorkItems.state=State\r\nWorkItems.teamProject=Team Project\r\nWorkItems.title=Title\r\nWorkItems.workItemType=Type\r\n\r\nWorkItems.completedWork=Completed Work\r\nWorkItems.remainingWork=Remaining Work\r\nWorkItems.originalEstimate=Original Estimate\r\n\r\nWorkItems.activatedDate=Activated Date\r\nWorkItems.resolvedDate=Resolved Date\r\nWorkItems.completedDate=Completed Date\r\nWorkItems.closedDate=Closed Date\r\n\r\nWorkItems.customer=Customer\r\nWorkItems.type=Type\r\nWorkItems.private=Private\r\nWorkItems.project=Project\r\nWorkItems.workPackage=Package\r\nWorkItems.ticket=Ticket\r\n\r\nappointmentDialog.invalidInput=Please fill-in all\r\n\r\nmessage.allDayEventsAreNotEditable=All-day events cannot be edited.',
	"iot/singleplanningcalendar/manifest.json":'{"_version":"1.9.0","sap.cloud":{"public":true,"service":"iot.project.planner"},"sap.app":{"id":"iot.singleplanningcalendar","type":"application","i18n":"i18n/i18n.properties","applicationVersion":{"version":"1.0.1"},"title":"{{appTitle}}","description":"{{appDescription}}","resources":"resources.json","ach":"ach","dataSources":{"mainService":{"uri":"/v2/timetracking/","type":"OData"}},"crossNavigation":{"inbounds":{"iot-singleplanningcalendar-inbound":{"signature":{"parameters":{},"additionalParameters":"allowed"},"semanticObject":"SinglePlanningCalendar","action":"manage","title":"{{appTitle}}","subTitle":"{{appSubtitle}}","icon":"sap-icon://calendar"}}}},"sap.ui":{"technology":"UI5","icons":{"icon":"sap-icon://task","favIcon":"","phone":"","phone@2":"","tablet":"","tablet@2":""},"deviceTypes":{"desktop":true,"tablet":true,"phone":true}},"sap.ui5":{"flexEnabled":false,"rootView":{"viewName":"iot.singleplanningcalendar.view.SinglePlanningCalendar","type":"XML","async":true,"id":"SinglePlanningCalendar"},"dependencies":{"minUI5Version":"1.66.0","libs":{"sap.ui.core":{},"sap.m":{},"sap.ui.layout":{}}},"contentDensities":{"compact":true,"cozy":true},"models":{"i18n":{"type":"sap.ui.model.resource.ResourceModel","settings":{"bundleName":"iot.singleplanningcalendar.i18n.i18n"}},"OData":{"dataSource":"mainService","type":"sap.ui.model.odata.v2.ODataModel","settings":{"defaultUpdateMethod":"MERGE","defaultOperationMode":"Server","defaultBindingMode":"TwoWay","refreshAfterChange":false,"defaultCountMode":"None"}}},"resources":{"css":[{"uri":"css/style.css"}]},"routing":{"config":{"routerClass":"sap.m.routing.Router","viewType":"XML","async":true,"viewPath":"iot.singleplanningcalendar.view","controlAggregation":"pages","controlId":"app","clearControlAggregation":false},"routes":[{"name":"RouteSinglePlanningCalendar","pattern":"RouteSinglePlanningCalendar","target":["TargetSinglePlanningCalendar"]}],"targets":{"TargetSinglePlanningCalendar":{"viewType":"XML","transition":"slide","clearControlAggregation":false,"viewId":"SinglePlanningCalendar","viewName":"SinglePlanningCalendar"}}}}}',
	"iot/singleplanningcalendar/model/formatter.js":function(){sap.ui.define(["../model/legendItems"],e=>({getDisplayType(t,n,l){const i=n?"Allocated":"NotAllocated";const o=l==="Billed"?"Billed":"NotBilled";const{type:d}=e.getItems()[`${t}_${i}_${o}`]||{type:"Type01"};return d},getIconURL(e){if(!e)return undefined;return this.getOwnerComponent().getManifestObject().resolveUri(`./img/${e}.png`)}}));
},
	"iot/singleplanningcalendar/model/legendItems.js":function(){sap.ui.define([],()=>({getItems(){return{Manual_Allocated_Billed:{type:"Type01"},Manual_Allocated_NotBilled:{type:"Type02"},Manual_NotAllocated_Billed:{type:"Type03"},Manual_NotAllocated_NotBilled:{type:"Type04"},WorkItem_Allocated_Billed:{type:"Type05"},WorkItem_Allocated_NotBilled:{type:"Type06"},WorkItem_NotAllocated_Billed:{type:"Type07"},WorkItem_NotAllocated_NotBilled:{type:"Type08"},Event_Allocated_Billed:{type:"Type09"},Event_Allocated_NotBilled:{type:"Type10"},Event_NotAllocated_Billed:{type:"Type11"},Event_NotAllocated_NotBilled:{type:"Type12"}}}}));
},
	"iot/singleplanningcalendar/model/models.js":function(){sap.ui.define(["sap/ui/model/json/JSONModel","sap/ui/Device"],(e,i)=>({createDeviceModel(){const n=new e(i);n.setDefaultBindingMode("OneWay");return n}}));
},
	"iot/singleplanningcalendar/view/SinglePlanningCalendar.view.xml":'<mvc:View controllerName="iot.singleplanningcalendar.controller.SinglePlanningCalendar"\r\n\txmlns="sap.m"\r\n\txmlns:unified="sap.ui.unified"\r\n\txmlns:form="sap.ui.layout.form"\r\n\txmlns:core="sap.ui.core"\r\n\txmlns:l="sap.ui.layout"\r\n\txmlns:smartfield="sap.ui.comp.smartfield"\r\n\txmlns:mvc="sap.ui.core.mvc" displayBlock="true"><Shell id="shell"><App id="app" busy="{/busy}" busyIndicatorDelay="0"><pages><Page showHeader="false"><SinglePlanningCalendar id="SPCalendar" appointments="{/appointments}" appointmentSelect="onPressAppointment" appointmentCreate="onCreateAppointment" appointmentResize="onEditAppointment" appointmentDrop="onEditAppointment" startDateChange="onStartDateChange" viewChange="onChangeView" startHour="7" endHour="20" fullDay="false" enableAppointmentsCreate="true" enableAppointmentsResize="true" enableAppointmentsDragAndDrop="true"><actions><Button id="createAppointment" text="{i18n>createAppointment.button.text}" press="onCreateAppointment" tooltip="{i18n>createAppointment.button.tooltip}" /><Button id="displayLegend" text="{i18n>displayLegend.button.text}" press="onDisplayLegend" tooltip="{i18n>displayLegend.button.tooltip}" /></actions><appointments><unified:CalendarAppointment startDate="{activatedDate}" endDate="{completedDate}" title="{ticket} {title}" text="{customer_friendlyID} {project_friendlyID}" type="{parts: [\'type\', \'project_friendlyID\', \'status\'], formatter: \'.formatter.getDisplayType\'}" icon="{path: \'customer_friendlyID\', formatter: \'.formatter.getIconURL\'}" tentative="{= !${confirmed}}"/></appointments><dependents><Dialog id="createItemDialog" busy="{/dialogBusy}" afterClose="onAfterCloseDialog" afterOpen="onAfterOpenDialog"><customHeader><Bar><contentLeft><Title text="{/createItemDialogTitle} {= !${confirmed} ? ${i18n>appointmentDialog.draftIndicator} : \'\'}"/></contentLeft><contentRight><Button press="onPressResetAppointment" text="{i18n>resetEntry.button.text}" tooltip="{i18n>resetEntry.button.tooltip}" enabled="{= !!${confirmed} &amp;&amp; !${isAllDay}}"/><Button press="onPressDeleteAppointment" text="{i18n>deleteEntry.button.text}" tooltip="{i18n>deleteEntry.button.tooltip}" enabled="{= !${isAllDay}}"/></contentRight></Bar></customHeader><form:SimpleForm editable="true" layout="ResponsiveGridLayout" id="appointmentSimpleForm"><MessageStrip text="{i18n>message.allDayEventsAreNotEditable}" visible="{= !!${isAllDay}}"/><Label text="{i18n>WorkItems.title}" required="true"/><Input value="{title}"/><Label text="{i18n>WorkItems.ticket}"/><Input value="{ticket}"/><Label text="{i18n>WorkItems.activatedDate}"/><DateTimePicker value="{path:\'activatedDate\', type:\'sap.ui.model.type.DateTime\', formatOptions: {style: \'short\'}}" minutesStep="15"/><Label text="{i18n>WorkItems.completedDate}"/><DateTimePicker value="{path: \'completedDate\', type:\'sap.ui.model.type.DateTime\', formatOptions: {style: \'short\'}}" minutesStep="15"/></form:SimpleForm><buttons><Button id="submitButton" text="{i18n>OK}" press="onSubmitEntry" enabled="{= !!${title} &amp;&amp; !!${hierarchy/level0} &amp;&amp; !!${hierarchy/level1} &amp;&amp; !${isAllDay}}" type="Emphasized"/><Button text="{i18n>close}" press="onCloseDialog" /></buttons></Dialog><Dialog id="legendDialog" title="{i18n>legend.title}"><PlanningCalendarLegend id="singlePlanningCalendarLegend" items="{path : \'/legendItems\', templateShareable: true}" class="sapUiSmallMarginTop"><items><unified:CalendarLegendItem text="{text}" type="{type}" /></items></PlanningCalendarLegend><buttons><Button text="{i18n>close}" press="onCloseDialog" /></buttons></Dialog></dependents><views><SinglePlanningCalendarDayView key="Day" id="dayView" title="{i18n>calendar.dayView}" /><SinglePlanningCalendarWorkWeekView key="WorkWeek" title="{i18n>calendar.workWeekView}" /><SinglePlanningCalendarWeekView key="Week" title="{i18n>calendar.weekView}"/><SinglePlanningCalendarMonthView key="Month" id="monthView" title="{i18n>calendar.monthView}" /></views></SinglePlanningCalendar></Page></pages></App></Shell></mvc:View>'
});
