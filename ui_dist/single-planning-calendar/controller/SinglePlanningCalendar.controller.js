const nest=(e,t=null,n="parent_ID")=>e.filter(e=>e[n]===t).map(t=>({...t,children:nest(e,t.ID)}));const reduce=e=>e.reduce((e,t)=>({...e,[t.ID]:{...t,children:reduce(t.children)}}),{});const capitalizeFirstLetter=e=>e.charAt(0).toUpperCase()+e.slice(1);const createDeepPath=(e,t)=>{let n=`/categories`;for(let s=1;s<=e;s+=1){n+=`/${t[`level${s-1}`]}/children`}return n};sap.ui.define(["./BaseController","./ErrorParser","sap/ui/model/Filter","../model/formatter","sap/ui/core/Item","sap/ui/model/json/JSONModel","sap/m/Label","../model/legendItems","sap/m/MessageBox","sap/m/MessageToast","sap/m/Select"],(e,t,n,s,a,o,r,i,c,l,p)=>{function d(e,t){const n=new Date(e);n.setDate(n.getDate()+t);return n}function h(){const e=new Date((new Date).setHours(0,0,0,1));const t=e.getDay();const n=e.getDate()-t+(t===0?-6:1);return new Date(e.setDate(n))}return e.extend("iot.singleplanningcalendar.controller.SinglePlanningCalendar",{formatter:s,async onInit(){const e=this.getResourceBundle();const n=this.byId("SPCalendar");const s=n.getViews()[1];const a=this.byId("createItemDialog");const r=new o({appointments:{NEW:{}},busy:false,categories:{},legendItems:Object.entries(i.getItems()).map(([t,{type:n}])=>({text:e.getText(`legendItems.${t}`),type:n}))});n.setSelectedView(s);n.setStartDate(h());r.setSizeLimit(300);this.setModel(r);await this.getModel("OData").metadataLoaded();try{await Promise.all([this._loadAppointments(),this._loadHierarchy()])}catch(e){c.error(t.parse(e))}$(document).keydown(t=>{const n=$(document.activeElement)&&$(document.activeElement).control()[0]&&$(document.activeElement).control()[0].getId();if(t.ctrlKey){if(t.keyCode===13&&!this.byId("submitButton").getEnabled()){l.show(e.getText("appointmentDialog.invalidInput"));return}if(t.keyCode===13&&n&&!n.includes("submitButton")){t.preventDefault();this.onSubmitEntry()}else if(t.keyCode===46){t.preventDefault();const e=sap.ui.getCore().byId(n);const s=e.getBindingContext().getObject();this._deleteAppointment(s)}}})},onDisplayLegend(){this.byId("legendDialog").open()},onPressAppointment(e){const{appointment:t}=e.getParameters();if(t){this._bindAndOpenDialog(t.getBindingContext().getPath())}},async onEditAppointment(e){const t=this.getModel();const{appointments:n}=t.getData();const{startDate:s,endDate:a,appointment:o,copy:r}=e.getParameters();const i=o.getBindingContext();const c=i.getObject();let l=i.getPath();if(r){l="/appointments/NEW";t.setProperty("/appointments/NEW",o)}t.setProperty(`${l}/activatedDate`,s);t.setProperty(`${l}/completedDate`,a);if(!c.parent_ID){this._bindAndOpenDialog(l);return}this._submitEntry({...c,activatedDate:s,completedDate:a})},onPressDeleteAppointment(e){const t=e.getSource().getBindingContext().getObject();this._deleteAppointment(t)},async _deleteAppointment(e){const n=this.getModel();const{appointments:s}=n.getData();n.setProperty("/dialogBusy",true);try{await this.remove({path:`/MyWorkItems(ID='${encodeURIComponent(e.ID)}')`,data:e});delete s[e.ID];this._closeDialog("createItemDialog")}catch(e){c.error(t.parse(e))}n.setProperty("/dialogBusy",false)},async onPressResetAppointment(e){const n=this.getModel();const{appointments:s}=n.getData();const a=e.getSource().getBindingContext().getObject();n.setProperty("/dialogBusy",true);try{const e=await this.reset({path:`/MyWorkItems(ID='${encodeURIComponent(a.ID)}')`,appointment:a});s[e.ID]=e;this._closeDialog("createItemDialog")}catch(e){c.error(t.parse(e))}n.setProperty("/dialogBusy",false)},onCreateAppointment(e){this._createAppointment(e);this._bindAndOpenDialog("/appointments/NEW")},_createAppointment(e){const t=this.getModel();const{startDate:n,endDate:s}=e.getParameters();const a={activatedDate:n,completedDate:s,hierarchy:{}};t.setProperty("/appointments/NEW",a)},_bindAndOpenDialog(e){const t=this.getModel();const n=this.getResourceBundle();const s=t.getProperty(e);const a=this.byId("createItemDialog");t.setProperty("/createItemDialogTitle",s.ID?n.getText("editAppointment"):n.getText("createAppointment"));this._bindHierarchyInputs(s);a.bindElement(e);a.open()},_bindHierarchyInputs(e){const{hierarchy:t}=e;if(!t)return;const n=this.getModel();const s=n.getProperty("/hierarchyDepth");for(let e=0;e<=s;e+=1){const n=`level${e}`;if(t[n]||e===0){this._bindSelectControl(`select${capitalizeFirstLetter(n)}`,createDeepPath(e,t))}}},_bindSelectControl(e,t){const n=this.byId(e);n.bindItems({path:t,template:new a({text:"{title}",key:"{ID}"})})},async onSubmitEntry(){const e=this.getModel();const t=this.byId("createItemDialog").getBindingContext().getObject();if(t.isAllDay){l.show(this.getResourceBundle().getText("message.allDayEventsAreNotEditable"));return}e.setProperty("/dialogBusy",true);await this._submitEntry(t);e.setProperty("/dialogBusy",false);this._closeDialog("createItemDialog")},async _submitEntry(e){const{hierarchy:n,...s}=e;const a=this.getModel();const{appointments:o,hierarchyDepth:r}=a.getData();let i="";for(let e=r;e>=0;e-=1){if(n[`level${e}`]){i=n[`level${e}`];break}}s.hierarchy_parent=i;let l;try{if(e.ID){const t=`/MyWorkItems(ID='${encodeURIComponent(e.ID)}')`;l=await this.update({path:t,data:s})}else{l=await this.create({path:"/MyWorkItems",data:s})}l.hierarchy=e.hierarchy;o[l.ID]=l;o.NEW={};a.setProperty("/appointments",o)}catch(e){c.error(t.parse(e))}},onCloseDialog(e){e.getSource().getParent().close()},_closeDialog(e){this.byId(e).close()},onChangeView(){this._loadAppointments()},onStartDateChange(){this._loadAppointments()},_getCalendarEndDate(){const e=this.byId("SPCalendar");const t=e.getStartDate();const n=e._getSelectedView().getKey();const s={Day:1,WorkWeek:5,Week:7,Month:31};const a=s[n];const o=d(t,a);return o},async _loadAppointments(){const e=this.getModel();const t=this.byId("SPCalendar");const s=e.getProperty("/appointments");const a=t.getStartDate();const o=this._getCalendarEndDate();e.setProperty("/busy",true);const{results:r}=await this.read({path:"/MyWorkItems",urlParameters:{$top:100,$expand:"hierarchy"},filters:[new n({filters:[new n({path:"completedDate",operator:"GT",value1:a}),new n({path:"activatedDate",operator:"LE",value1:o})],and:true})]});const i=r.reduce((e,t)=>{e[t.ID]={completedDate:t.isAllDay?t.completedDate.setHours(0):t.completedDate,activatedDate:t.isAllDay?t.activatedDate.setHours(0):t.activatedDate,...t};return e},{});e.setProperty("/appointments",{...s,...i});e.setProperty("/busy",false)},async _loadHierarchy(){const e=this.getModel();e.setProperty("/busy",true);const[{results:t},{results:n}]=await Promise.all([this.read({path:"/MyCategories"}),this.read({path:"/HierarchyLevels"})]);const s=reduce(nest(t));const a=Math.max(...t.map(({hierarchyLevel:e})=>e));const o=this.byId("appointmentSimpleForm");const i=3;n.forEach(({hierarchyLevel:e,title:t},n)=>{o.insertContent(new r({text:t}),i+n*2);o.insertContent(new p({selectedKey:`{hierarchy/level${e}}`,id:this.getView().createId(`selectLevel${e}`),forceSelection:false,change:t=>{const n=t.getParameter("selectedItem");const s=n?.getBindingContext().getPath();if(e<a){this._bindSelectControl(`selectLevel${e+1}`,`${s}/children`)}}}),i+n*2+1)});e.setProperty("/hierarchyDepth",a);e.setProperty("/categories",s);e.setProperty("/busy",false)},_getUser(){return new Promise((e,t)=>{this.getModel("OData").read("/MyUser",{success:n=>{const s=n.results[0];if(!s)t(new Error("User does not exist in DB. Please create it."));return e(s)}})})}})});