const isObject=e=>{const t=typeof e;return e!==null&&(t==="object"||t==="function")};const disallowedKeys=new Set(["__proto__","prototype","constructor"]);const digits=new Set("0123456789");function getPathSegments(e){const t=[];let r="";let n="start";let i=false;for(const s of e){switch(s){case"\\":if(n==="index"){throw new Error("Invalid character in an index")}if(n==="indexEnd"){throw new Error("Invalid character after an index")}if(i){r+=s}n="property";i=!i;break;case".":if(n==="index"){throw new Error("Invalid character in an index")}if(n==="indexEnd"){n="property";break}if(i){i=false;r+=s;break}if(disallowedKeys.has(r)){return[]}t.push(r);r="";n="property";break;case"[":if(n==="index"){throw new Error("Invalid character in an index")}if(n==="indexEnd"){n="index";break}if(i){i=false;r+=s;break}if(n==="property"){if(disallowedKeys.has(r)){return[]}t.push(r);r=""}n="index";break;case"]":if(n==="index"){t.push(Number.parseInt(r,10));r="";n="indexEnd";break}if(n==="indexEnd"){throw new Error("Invalid character after an index")}default:if(n==="index"&&!digits.has(s)){throw new Error("Invalid character in an index")}if(n==="indexEnd"){throw new Error("Invalid character after an index")}if(n==="start"){n="property"}if(i){i=false;r+="\\"}r+=s}}if(i){r+="\\"}switch(n){case"property":{if(disallowedKeys.has(r)){return[]}t.push(r);break}case"index":{throw new Error("Index was not closed")}case"start":{t.push("");break}}return t}function isStringIndex(e,t){if(typeof t!=="number"&&Array.isArray(e)){const r=Number.parseInt(t,10);return Number.isInteger(r)&&e[r]===e[t]}return false}function assertNotStringIndex(e,t){if(isStringIndex(e,t)){throw new Error("Cannot use string index")}}function getProperty(e,t,r){if(!isObject(e)||typeof t!=="string"){return r===undefined?e:r}const n=getPathSegments(t);if(n.length===0){return r}for(let t=0;t<n.length;t++){const i=n[t];if(isStringIndex(e,i)){e=t===n.length-1?undefined:null}else{e=e[i]}if(e===undefined||e===null){if(t!==n.length-1){return r}break}}return e===undefined?r:e}function setProperty(e,t,r){if(!isObject(e)||typeof t!=="string"){return e}const n=e;const i=getPathSegments(t);for(let t=0;t<i.length;t++){const n=i[t];assertNotStringIndex(e,n);if(t===i.length-1){e[n]=r}else if(!isObject(e[n])){e[n]=typeof i[t+1]==="number"?[]:{}}e=e[n]}return n}function deleteProperty(e,t){if(!isObject(e)||typeof t!=="string"){return false}const r=getPathSegments(t);for(let t=0;t<r.length;t++){const n=r[t];assertNotStringIndex(e,n);if(t===r.length-1){delete e[n];return true}e=e[n];if(!isObject(e)){return false}}}function hasProperty(e,t){if(!isObject(e)||typeof t!=="string"){return false}const r=getPathSegments(t);if(r.length===0){return false}for(const t of r){if(!isObject(e)||!(t in e)||isStringIndex(e,t)){return false}e=e[t]}return true}function escapePath(e){if(typeof e!=="string"){throw new TypeError("Expected a string")}return e.replace(/[\\.[]/g,"\\$&")}function entries(e){if(Array.isArray(e)){return e.map((e,t)=>[t,e])}return Object.entries(e)}function stringifyPath(e){let t="";for(let[r,n]of entries(e)){if(typeof n==="number"){t+=`[${n}]`}else{n=escapePath(n);t+=r===0?n:`.${n}`}}return t}function*deepKeysIterator(e,t=[]){if(!isObject(e)){if(t.length>0){yield stringifyPath(t)}return}for(const[r,n]of entries(e)){yield*deepKeysIterator(n,[...t,r])}}sap.ui.define([],()=>({deepKeys(e){return[...deepKeysIterator(e)]}}));