sap.ui.define(["sap/ui/model/odata/v2/ODataModel","sap/ui/model/json/JSONModel"],(t,e)=>{function s(t,e,s){return function(...a){return new Promise((n,r)=>{const i=a[s]||{};const o=[...a];o[s]={...i,success:n,error:r};t[e](...o)})}}return e.extend("iot.ODataModelV2",{constructor:function(a,...n){e.apply(this,...n);const r=new t(a);r.metadataLoaded().then(()=>{[this.schema]=r.getServiceMetadata().dataServices.schema;this.associations=this.schema.association;this.entityTypes=this.schema.entityType.map(({name:t,property:e,key:s,navigationProperty:a})=>({name:t,keys:s.propertyRef.map(t=>t.name),properties:e,relations:a.map(({name:t,relationship:e,fromRole:s,toRole:a})=>{const n=this.associations.find(({name:t})=>`${this.schema.namespace}.${t}`===e);const{referentialConstraint:{dependent:r,principal:i},end:o}=n;return{name:t,fromRole:s,toRole:a,cardinality:o.find(t=>t.role===a).multiplicity,refConstraints:r.propertyRef.map((t,e)=>{const n=i.propertyRef[e];return{from:(r.role===s?t:n).name,to:(r.role===a?t:n).name}})}})}));this.setData(this.entityTypes.map(({name:t})=>t).reduce((t,e)=>({...t,[e]:[]}),{}))});this.serviceURL=a;this.odata={create:s(r,"create",2),read:s(r,"read",1),query:s(r,"read",1),update:s(r,"update",2),remove:s(r,"remove",1),callFunction:s(r,"callFunction",1)}},async create(...t){const e=await this.odata.create(...t);const[s]=t;const a=this.getProperty(s);a.push(e);this.setProperty(s,a);this.nest()},async read(...t){const{results:e}=await this.odata.read(...t);return e},async load(...t){const{results:e}=await this.odata.read(...t);const[s,a]=t;const n=s.slice(1);const r=this.entityTypes.find(({name:t})=>t===n);const i=a?.urlParameters?.$expand;if(i.includes("/")){throw new Error("Deep expand is not supported.")}if(i){const t=i.split(",");t.forEach(t=>{const s=r.relations.find(({name:e})=>e===t);const a=s.toRole;const n=this.getProperty(`/${a}`);let i=[];e.forEach(e=>{const a=s.cardinality==="1"?e[t]:e[t].results;i=[...i,...a]});const o=[...new Set([...i,...n])];this.setProperty(`/${a}`,o)})}this.setProperty(s,e);this.nest()},async update({...t}){const e=`/${t.__metadata.uri.replace(location.origin,"").replace(this.serviceURL,"")}`;const s=e.split("(")[0].slice(1);const a=this.entityTypes.find(({name:t})=>t===s);const n=this.getProperty(`/${s}`);a.relations.forEach(({name:e})=>{delete t[e]});const r=n.findIndex(e=>a.keys.every(s=>e[s]===t[s]));const i=`/${s}/${r}`;await this.odata.update(e,t);this.setProperty(i,t);this.nest()},async remove(t){const e=`/${t.__metadata.uri.replace(location.origin,"").replace(this.serviceURL,"")}`;const s=e.split("(")[0];await this.odata.remove(e);const a=this.getProperty(s).filter(t=>!t.__metadata.uri.includes(e));this.setProperty(s,a);this.nest()},nest(){const t=this.getData();const{entityTypes:e}=this;e.filter(({name:e})=>t[e]).map(e=>({entityType:e,entities:t[e.name].filter(Boolean).map(t=>{e.relations.forEach(e=>{const s=e.cardinality.endsWith("1")?"1":"n";Object.defineProperty(t,e.name,{configurable:true,get:()=>{const a=this.getData()[e.toRole]||[];const n=a.filter(s=>e.refConstraints.every(({to:e,from:a})=>s[e]===t[a]));if(s==="1"){return n[0]}return n}})});return t})})).forEach(({entityType:t,entities:e})=>{this.setProperty(`/${t.name}`,e)})}})});