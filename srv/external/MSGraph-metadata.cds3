/* checksum : f19b1f54a9bbdd340602e0c650e2a9dd */
@cds.persistence.skip : true
abstract entity microsoft.graph.entity {
  key id : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.auditLogRoot : microsoft.graph.entity {
  @cds.ambiguous : 'missing on condition?'
  directoryAudits : Association to many microsoft.graph.directoryAudit {  };
  @cds.ambiguous : 'missing on condition?'
  provisioning : Association to many microsoft.graph.provisioningObjectSummary {  };
  @cds.ambiguous : 'missing on condition?'
  restrictedSignIns : Association to many microsoft.graph.restrictedSignIn {  };
  @cds.ambiguous : 'missing on condition?'
  signIns : Association to many microsoft.graph.signIn {  };
};

@cds.persistence.skip : true
entity microsoft.graph.directoryAudit : microsoft.graph.entity {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  activityDateTime : DateTime;
  activityDisplayName : LargeString;
  additionalDetails : many microsoft.graph.keyValue;
  category : LargeString;
  correlationId : LargeString;
  initiatedBy : microsoft.graph.auditActivityInitiator;
  loggedByService : LargeString;
  operationType : LargeString;
  result : LargeString;
  resultReason : LargeString;
  targetResources : many microsoft.graph.targetResource;
};

@cds.persistence.skip : true
entity microsoft.graph.provisioningObjectSummary : microsoft.graph.entity {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  activityDateTime : DateTime;
  changeId : LargeString;
  cycleId : LargeString;
  durationInMilliseconds : Integer;
  initiatedBy : microsoft.graph.initiator;
  jobId : LargeString;
  modifiedProperties : many microsoft.graph.modifiedProperty;
  provisioningAction : LargeString;
  provisioningStatusInfo : microsoft.graph.provisioningStatusInfo;
  provisioningSteps : many microsoft.graph.provisioningStep;
  servicePrincipal : microsoft.graph.provisioningServicePrincipal;
  sourceIdentity : microsoft.graph.provisionedIdentity;
  sourceSystem : microsoft.graph.provisioningSystem;
  targetIdentity : microsoft.graph.provisionedIdentity;
  targetSystem : microsoft.graph.provisioningSystem;
  tenantId : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.signIn : microsoft.graph.entity {
  appDisplayName : LargeString;
  appId : LargeString;
  appliedConditionalAccessPolicies : many microsoft.graph.appliedConditionalAccessPolicy;
  clientAppUsed : LargeString;
  conditionalAccessStatus : LargeString;
  correlationId : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  deviceDetail : microsoft.graph.deviceDetail;
  ipAddress : LargeString;
  isInteractive : Boolean;
  location : microsoft.graph.signInLocation;
  resourceDisplayName : LargeString;
  resourceId : LargeString;
  riskDetail : LargeString;
  riskEventTypes : LargeString;
  riskEventTypes_v2 : many LargeString;
  riskLevelAggregated : LargeString;
  riskLevelDuringSignIn : LargeString;
  riskState : LargeString;
  status : microsoft.graph.signInStatus;
  userDisplayName : LargeString;
  userId : LargeString;
  userPrincipalName : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.restrictedSignIn : microsoft.graph.signIn {
  targetTenantId : UUID;
};

@cds.persistence.skip : true
entity microsoft.graph.invitations : microsoft.graph.entity {
  invitedUserDisplayName : LargeString;
  invitedUserEmailAddress : LargeString;
  invitedUserMessageInfo : microsoft.graph.invitedUserMessageInfo;
  invitedUserType : LargeString;
  inviteRedeemUrl : LargeString;
  inviteRedirectUrl : LargeString;
  sendInvitationMessage : Boolean;
  status : LargeString;
  @cds.ambiguous : 'missing on condition?'
  invitedUser : Association to one microsoft.graph.users {  };
};

@cds.persistence.skip : true
entity microsoft.graph.directoryObjects : microsoft.graph.entity {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  deletedDateTime : DateTime;
} actions {
  action validateProperties(
    entityType : LargeString,
    displayName : LargeString,
    mailNickname : LargeString,
    onBehalfOfUserId : UUID
  );
  action checkMemberGroups(
    groupIds : many LargeString
  ) returns many LargeString;
  action checkMemberObjects(
    ids : many LargeString
  ) returns many LargeString;
  action getMemberGroups(
    securityEnabledOnly : Boolean
  ) returns many LargeString;
  action getMemberObjects(
    securityEnabledOnly : Boolean
  ) returns many LargeString;
  action restore() returns microsoft.graph.directoryObjects;
  action getAvailableExtensionProperties(
    isSyncedFromOnPremises : Boolean
  ) returns many microsoft.graph.extensionProperty;
  action getByIds(
    ids : many LargeString,
    types : many LargeString
  ) returns many microsoft.graph.directoryObjects;
};

@cds.persistence.skip : true
entity microsoft.graph.users : microsoft.graph.directoryObjects {
  accountEnabled : Boolean;
  ageGroup : LargeString;
  assignedLicenses : many microsoft.graph.assignedLicense;
  assignedPlans : many microsoft.graph.assignedPlan;
  businessPhones : many LargeString;
  city : LargeString;
  companyName : LargeString;
  consentProvidedForMinor : LargeString;
  country : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  creationType : LargeString;
  department : LargeString;
  displayName : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  employeeHireDate : DateTime;
  employeeId : LargeString;
  employeeOrgData : microsoft.graph.employeeOrgData;
  employeeType : LargeString;
  externalUserState : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  externalUserStateChangeDateTime : DateTime;
  faxNumber : LargeString;
  givenName : LargeString;
  identities : many microsoft.graph.objectIdentity;
  imAddresses : many LargeString;
  isResourceAccount : Boolean;
  jobTitle : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastPasswordChangeDateTime : DateTime;
  legalAgeGroupClassification : LargeString;
  licenseAssignmentStates : many microsoft.graph.licenseAssignmentState;
  mail : LargeString;
  mailNickname : LargeString;
  mobilePhone : LargeString;
  officeLocation : LargeString;
  onPremisesDistinguishedName : LargeString;
  onPremisesDomainName : LargeString;
  onPremisesExtensionAttributes : microsoft.graph.onPremisesExtensionAttributes;
  onPremisesImmutableId : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  onPremisesLastSyncDateTime : DateTime;
  onPremisesProvisioningErrors : many microsoft.graph.onPremisesProvisioningError;
  onPremisesSamAccountName : LargeString;
  onPremisesSecurityIdentifier : LargeString;
  onPremisesSyncEnabled : Boolean;
  onPremisesUserPrincipalName : LargeString;
  otherMails : many LargeString;
  passwordPolicies : LargeString;
  passwordProfile : microsoft.graph.passwordProfile;
  postalCode : LargeString;
  preferredDataLocation : LargeString;
  preferredLanguage : LargeString;
  provisionedPlans : many microsoft.graph.provisionedPlan;
  proxyAddresses : many LargeString;
  showInAddressList : Boolean;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  signInSessionsValidFromDateTime : DateTime;
  state : LargeString;
  streetAddress : LargeString;
  surname : LargeString;
  usageLocation : LargeString;
  userPrincipalName : LargeString;
  userType : LargeString;
  mailboxSettings : microsoft.graph.mailboxSettings;
  deviceEnrollmentLimit : Integer;
  aboutMe : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  birthday : DateTime;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  hireDate : DateTime;
  interests : many LargeString;
  mySite : LargeString;
  pastProjects : many LargeString;
  preferredName : LargeString;
  responsibilities : many LargeString;
  schools : many LargeString;
  skills : many LargeString;
  @cds.ambiguous : 'missing on condition?'
  appRoleAssignments : Association to many microsoft.graph.appRoleAssignment {  };
  @cds.ambiguous : 'missing on condition?'
  createdObjects : Association to many microsoft.graph.directoryObjects {  };
  @cds.ambiguous : 'missing on condition?'
  directReports : Association to many microsoft.graph.directoryObjects {  };
  @cds.ambiguous : 'missing on condition?'
  licenseDetails : Association to many microsoft.graph.licenseDetails {  };
  @cds.ambiguous : 'missing on condition?'
  manager : Association to one microsoft.graph.directoryObjects {  };
  @cds.ambiguous : 'missing on condition?'
  memberOf : Association to many microsoft.graph.directoryObjects {  };
  @cds.ambiguous : 'missing on condition?'
  oauth2PermissionGrants : Association to many microsoft.graph.oauth2PermissionGrants {  };
  @cds.ambiguous : 'missing on condition?'
  ownedDevices : Association to many microsoft.graph.directoryObjects {  };
  @cds.ambiguous : 'missing on condition?'
  ownedObjects : Association to many microsoft.graph.directoryObjects {  };
  @cds.ambiguous : 'missing on condition?'
  registeredDevices : Association to many microsoft.graph.directoryObjects {  };
  @cds.ambiguous : 'missing on condition?'
  scopedRoleMemberOf : Association to many microsoft.graph.scopedRoleMemberships {  };
  @cds.ambiguous : 'missing on condition?'
  transitiveMemberOf : Association to many microsoft.graph.directoryObjects {  };
  @cds.ambiguous : 'missing on condition?'
  calendar : Association to one microsoft.graph.calendar {  };
  @cds.ambiguous : 'missing on condition?'
  calendarGroups : Association to many microsoft.graph.calendarGroup {  };
  @cds.ambiguous : 'missing on condition?'
  calendars : Association to many microsoft.graph.calendar {  };
  @cds.ambiguous : 'missing on condition?'
  calendarView : Association to many microsoft.graph.event {  };
  @cds.ambiguous : 'missing on condition?'
  contactFolders : Association to many microsoft.graph.contactFolder {  };
  @cds.ambiguous : 'missing on condition?'
  contacts : Association to many microsoft.graph.contact {  };
  @cds.ambiguous : 'missing on condition?'
  events : Association to many microsoft.graph.event {  };
  @cds.ambiguous : 'missing on condition?'
  inferenceClassification : Association to one microsoft.graph.inferenceClassification {  };
  @cds.ambiguous : 'missing on condition?'
  mailFolders : Association to many microsoft.graph.mailFolder {  };
  @cds.ambiguous : 'missing on condition?'
  messages : Association to many microsoft.graph.message {  };
  @cds.ambiguous : 'missing on condition?'
  outlook : Association to one microsoft.graph.outlookUser {  };
  @cds.ambiguous : 'missing on condition?'
  people : Association to many microsoft.graph.person {  };
  @cds.ambiguous : 'missing on condition?'
  drive : Association to one microsoft.graph.drives {  };
  @cds.ambiguous : 'missing on condition?'
  drives : Association to many microsoft.graph.drives {  };
  @cds.ambiguous : 'missing on condition?'
  followedSites : Association to many microsoft.graph.sites {  };
  @cds.ambiguous : 'missing on condition?'
  extensions : Association to many microsoft.graph.extension {  };
  @cds.ambiguous : 'missing on condition?'
  agreementAcceptances : Association to many microsoft.graph.agreementAcceptances {  };
  @cds.ambiguous : 'missing on condition?'
  managedDevices : Association to many microsoft.graph.managedDevice {  };
  @cds.ambiguous : 'missing on condition?'
  managedAppRegistrations : Association to many microsoft.graph.managedAppRegistration {  };
  @cds.ambiguous : 'missing on condition?'
  deviceManagementTroubleshootingEvents : Association to many microsoft.graph.deviceManagementTroubleshootingEvent {  };
  @cds.ambiguous : 'missing on condition?'
  planner : Association to one microsoft.graph.plannerUser {  };
  @cds.ambiguous : 'missing on condition?'
  insights : Association to one microsoft.graph.officeGraphInsights {  };
  @cds.ambiguous : 'missing on condition?'
  settings : Association to one microsoft.graph.userSettings {  };
  @cds.ambiguous : 'missing on condition?'
  onenote : Association to one microsoft.graph.onenote {  };
  @cds.ambiguous : 'missing on condition?'
  photo : Association to one microsoft.graph.profilePhoto {  };
  @cds.ambiguous : 'missing on condition?'
  photos : Association to many microsoft.graph.profilePhoto {  };
  @cds.ambiguous : 'missing on condition?'
  activities : Association to many microsoft.graph.userActivity {  };
  @cds.ambiguous : 'missing on condition?'
  onlineMeetings : Association to many microsoft.graph.onlineMeeting {  };
  @cds.ambiguous : 'missing on condition?'
  presence : Association to one microsoft.graph.presence {  };
  @cds.ambiguous : 'missing on condition?'
  authentication : Association to one microsoft.graph.authentication {  };
  @cds.ambiguous : 'missing on condition?'
  chats : Association to many microsoft.graph.chats {  };
  @cds.ambiguous : 'missing on condition?'
  joinedTeams : Association to many microsoft.graph.teams {  };
  @cds.ambiguous : 'missing on condition?'
  teamwork : Association to one microsoft.graph.userTeamwork {  };
  @cds.ambiguous : 'missing on condition?'
  todo : Association to one microsoft.graph.todo {  };
} actions {
  action assignLicense(
    addLicenses : many microsoft.graph.assignedLicense,
    removeLicenses : many UUID
  ) returns microsoft.graph.users;
  action changePassword(
    currentPassword : LargeString,
    newPassword : LargeString
  );
  action reprocessLicenseAssignment() returns microsoft.graph.users;
  action revokeSignInSessions() returns Boolean;
  action findMeetingTimes(
    attendees : many microsoft.graph.attendeeBase,
    locationConstraint : microsoft.graph.locationConstraint,
    timeConstraint : microsoft.graph.timeConstraint,
    maxCandidates : Integer,
    isOrganizerOptional : Boolean,
    returnSuggestionReasons : Boolean,
    minimumAttendeePercentage : Double
  ) returns microsoft.graph.meetingTimeSuggestionsResult;
  action getMailTips(
    EmailAddresses : many LargeString,
    MailTipsOptions : microsoft.graph.mailTipsType
  ) returns many microsoft.graph.mailTips;
  action sendMail(
    Message : microsoft.graph.message,
    SaveToSentItems : Boolean
  );
  action translateExchangeIds(
    InputIds : many LargeString,
    TargetIdType : microsoft.graph.exchangeIdFormat,
    SourceIdType : microsoft.graph.exchangeIdFormat
  ) returns many microsoft.graph.convertIdResult;
  action removeAllDevicesFromManagement();
  action wipeManagedAppRegistrationsByDeviceTag(
    deviceTag : LargeString
  );
  action exportPersonalData(
    storageLocation : LargeString
  );
  function reminderView(
    StartDateTime : LargeString,
    EndDateTime : LargeString
  ) returns many microsoft.graph.reminder;
  function getManagedAppDiagnosticStatuses() returns many microsoft.graph.managedAppDiagnosticStatus;
  function getManagedAppPolicies() returns many microsoft.graph.managedAppPolicy;
};

@cds.persistence.skip : true
entity microsoft.graph.appRoleAssignment : microsoft.graph.directoryObjects {
  appRoleId : UUID;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  principalDisplayName : LargeString;
  principalId : UUID;
  principalType : LargeString;
  resourceDisplayName : LargeString;
  resourceId : UUID;
};

@cds.persistence.skip : true
entity microsoft.graph.licenseDetails : microsoft.graph.entity {
  servicePlans : many microsoft.graph.servicePlanInfo;
  skuId : UUID;
  skuPartNumber : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.oauth2PermissionGrants : microsoft.graph.entity {
  clientId : LargeString;
  consentType : LargeString;
  principalId : LargeString;
  resourceId : LargeString;
  scope : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.scopedRoleMemberships : microsoft.graph.entity {
  administrativeUnitId : LargeString;
  roleId : LargeString;
  roleMemberInfo : microsoft.graph.identity;
};

@cds.persistence.skip : true
entity microsoft.graph.calendar : microsoft.graph.entity {
  allowedOnlineMeetingProviders : LargeString;
  canEdit : Boolean;
  canShare : Boolean;
  canViewPrivateItems : Boolean;
  changeKey : LargeString;
  color : LargeString;
  defaultOnlineMeetingProvider : LargeString;
  hexColor : LargeString;
  isDefaultCalendar : Boolean;
  isRemovable : Boolean;
  isTallyingResponses : Boolean;
  name : LargeString;
  owner : microsoft.graph.emailAddress;
  @cds.ambiguous : 'missing on condition?'
  calendarPermissions : Association to many microsoft.graph.calendarPermission {  };
  @cds.ambiguous : 'missing on condition?'
  calendarView : Association to many microsoft.graph.event {  };
  @cds.ambiguous : 'missing on condition?'
  events : Association to many microsoft.graph.event {  };
  @cds.ambiguous : 'missing on condition?'
  multiValueExtendedProperties : Association to many microsoft.graph.multiValueLegacyExtendedProperty {  };
  @cds.ambiguous : 'missing on condition?'
  singleValueExtendedProperties : Association to many microsoft.graph.singleValueLegacyExtendedProperty {  };
};

@cds.persistence.skip : true
entity microsoft.graph.calendarGroup : microsoft.graph.entity {
  changeKey : LargeString;
  classId : UUID;
  name : LargeString;
  @cds.ambiguous : 'missing on condition?'
  calendars : Association to many microsoft.graph.calendar {  };
};

@cds.persistence.skip : true
abstract entity microsoft.graph.outlookItem : microsoft.graph.entity {
  categories : many LargeString;
  changeKey : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastModifiedDateTime : DateTime;
};

@cds.persistence.skip : true
entity microsoft.graph.event : microsoft.graph.outlookItem {
  allowNewTimeProposals : Boolean;
  attendees : many microsoft.graph.attendee;
  body : microsoft.graph.itemBody;
  bodyPreview : LargeString;
  end : microsoft.graph.dateTimeTimeZone;
  hasAttachments : Boolean;
  hideAttendees : Boolean;
  iCalUId : LargeString;
  importance : LargeString;
  isAllDay : Boolean;
  isCancelled : Boolean;
  isDraft : Boolean;
  isOnlineMeeting : Boolean;
  isOrganizer : Boolean;
  isReminderOn : Boolean;
  location : microsoft.graph.location;
  locations : many microsoft.graph.location;
  onlineMeeting : microsoft.graph.onlineMeetingInfo;
  onlineMeetingProvider : LargeString;
  onlineMeetingUrl : LargeString;
  organizer : microsoft.graph.recipient;
  originalEndTimeZone : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  originalStart : DateTime;
  originalStartTimeZone : LargeString;
  recurrence : microsoft.graph.patternedRecurrence;
  reminderMinutesBeforeStart : Integer;
  responseRequested : Boolean;
  responseStatus : microsoft.graph.responseStatus;
  sensitivity : LargeString;
  seriesMasterId : LargeString;
  showAs : LargeString;
  start : microsoft.graph.dateTimeTimeZone;
  subject : LargeString;
  transactionId : LargeString;
  type : LargeString;
  webLink : LargeString;
  @cds.ambiguous : 'missing on condition?'
  attachments : Association to many microsoft.graph.attachment {  };
  @cds.ambiguous : 'missing on condition?'
  calendar : Association to one microsoft.graph.calendar {  };
  @cds.ambiguous : 'missing on condition?'
  extensions : Association to many microsoft.graph.extension {  };
  @cds.ambiguous : 'missing on condition?'
  instances : Association to many microsoft.graph.event {  };
  @cds.ambiguous : 'missing on condition?'
  multiValueExtendedProperties : Association to many microsoft.graph.multiValueLegacyExtendedProperty {  };
  @cds.ambiguous : 'missing on condition?'
  singleValueExtendedProperties : Association to many microsoft.graph.singleValueLegacyExtendedProperty {  };
} actions {
  action cancel(
    Comment : LargeString
  );
};

@cds.persistence.skip : true
entity microsoft.graph.contactFolder : microsoft.graph.entity {
  displayName : LargeString;
  parentFolderId : LargeString;
  @cds.ambiguous : 'missing on condition?'
  childFolders : Association to many microsoft.graph.contactFolder {  };
  @cds.ambiguous : 'missing on condition?'
  contacts : Association to many microsoft.graph.contact {  };
  @cds.ambiguous : 'missing on condition?'
  multiValueExtendedProperties : Association to many microsoft.graph.multiValueLegacyExtendedProperty {  };
  @cds.ambiguous : 'missing on condition?'
  singleValueExtendedProperties : Association to many microsoft.graph.singleValueLegacyExtendedProperty {  };
};

@cds.persistence.skip : true
entity microsoft.graph.contact : microsoft.graph.outlookItem {
  assistantName : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  birthday : DateTime;
  businessAddress : microsoft.graph.physicalAddress;
  businessHomePage : LargeString;
  businessPhones : many LargeString;
  children : many LargeString;
  companyName : LargeString;
  department : LargeString;
  displayName : LargeString;
  emailAddresses : many microsoft.graph.emailAddress;
  fileAs : LargeString;
  generation : LargeString;
  givenName : LargeString;
  homeAddress : microsoft.graph.physicalAddress;
  homePhones : many LargeString;
  imAddresses : many LargeString;
  initials : LargeString;
  jobTitle : LargeString;
  manager : LargeString;
  middleName : LargeString;
  mobilePhone : LargeString;
  nickName : LargeString;
  officeLocation : LargeString;
  otherAddress : microsoft.graph.physicalAddress;
  parentFolderId : LargeString;
  personalNotes : LargeString;
  profession : LargeString;
  spouseName : LargeString;
  surname : LargeString;
  title : LargeString;
  yomiCompanyName : LargeString;
  yomiGivenName : LargeString;
  yomiSurname : LargeString;
  @cds.ambiguous : 'missing on condition?'
  extensions : Association to many microsoft.graph.extension {  };
  @cds.ambiguous : 'missing on condition?'
  multiValueExtendedProperties : Association to many microsoft.graph.multiValueLegacyExtendedProperty {  };
  @cds.ambiguous : 'missing on condition?'
  photo : Association to one microsoft.graph.profilePhoto {  };
  @cds.ambiguous : 'missing on condition?'
  singleValueExtendedProperties : Association to many microsoft.graph.singleValueLegacyExtendedProperty {  };
};

@cds.persistence.skip : true
entity microsoft.graph.inferenceClassification : microsoft.graph.entity {
  @cds.ambiguous : 'missing on condition?'
  overrides : Association to many microsoft.graph.inferenceClassificationOverride {  };
};

@cds.persistence.skip : true
entity microsoft.graph.mailFolder : microsoft.graph.entity {
  childFolderCount : Integer;
  displayName : LargeString;
  isHidden : Boolean;
  parentFolderId : LargeString;
  totalItemCount : Integer;
  unreadItemCount : Integer;
  @cds.ambiguous : 'missing on condition?'
  childFolders : Association to many microsoft.graph.mailFolder {  };
  @cds.ambiguous : 'missing on condition?'
  messageRules : Association to many microsoft.graph.messageRule {  };
  @cds.ambiguous : 'missing on condition?'
  messages : Association to many microsoft.graph.message {  };
  @cds.ambiguous : 'missing on condition?'
  multiValueExtendedProperties : Association to many microsoft.graph.multiValueLegacyExtendedProperty {  };
  @cds.ambiguous : 'missing on condition?'
  singleValueExtendedProperties : Association to many microsoft.graph.singleValueLegacyExtendedProperty {  };
};

@cds.persistence.skip : true
entity microsoft.graph.message : microsoft.graph.outlookItem {
  bccRecipients : many microsoft.graph.recipient;
  body : microsoft.graph.itemBody;
  bodyPreview : LargeString;
  ccRecipients : many microsoft.graph.recipient;
  conversationId : LargeString;
  conversationIndex : LargeBinary;
  flag : microsoft.graph.followupFlag;
  ![from] : microsoft.graph.recipient;
  hasAttachments : Boolean;
  importance : LargeString;
  inferenceClassification : LargeString;
  internetMessageHeaders : many microsoft.graph.internetMessageHeader;
  internetMessageId : LargeString;
  isDeliveryReceiptRequested : Boolean;
  isDraft : Boolean;
  isRead : Boolean;
  isReadReceiptRequested : Boolean;
  parentFolderId : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  receivedDateTime : DateTime;
  replyTo : many microsoft.graph.recipient;
  sender : microsoft.graph.recipient;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  sentDateTime : DateTime;
  subject : LargeString;
  toRecipients : many microsoft.graph.recipient;
  uniqueBody : microsoft.graph.itemBody;
  webLink : LargeString;
  @cds.ambiguous : 'missing on condition?'
  attachments : Association to many microsoft.graph.attachment {  };
  @cds.ambiguous : 'missing on condition?'
  extensions : Association to many microsoft.graph.extension {  };
  @cds.ambiguous : 'missing on condition?'
  multiValueExtendedProperties : Association to many microsoft.graph.multiValueLegacyExtendedProperty {  };
  @cds.ambiguous : 'missing on condition?'
  singleValueExtendedProperties : Association to many microsoft.graph.singleValueLegacyExtendedProperty {  };
};

@cds.persistence.skip : true
entity microsoft.graph.outlookUser : microsoft.graph.entity {
  @cds.ambiguous : 'missing on condition?'
  masterCategories : Association to many microsoft.graph.outlookCategory {  };
};

@cds.persistence.skip : true
entity microsoft.graph.person : microsoft.graph.entity {
  birthday : LargeString;
  companyName : LargeString;
  department : LargeString;
  displayName : LargeString;
  givenName : LargeString;
  imAddress : LargeString;
  isFavorite : Boolean;
  jobTitle : LargeString;
  officeLocation : LargeString;
  personNotes : LargeString;
  personType : microsoft.graph.personType;
  phones : many microsoft.graph.phone;
  postalAddresses : many microsoft.graph.location;
  profession : LargeString;
  scoredEmailAddresses : many microsoft.graph.scoredEmailAddress;
  surname : LargeString;
  userPrincipalName : LargeString;
  websites : many microsoft.graph.website;
  yomiCompany : LargeString;
};

@cds.persistence.skip : true
abstract entity microsoft.graph.baseItem : microsoft.graph.entity {
  createdBy : microsoft.graph.identitySet;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  description : LargeString;
  eTag : LargeString;
  lastModifiedBy : microsoft.graph.identitySet;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastModifiedDateTime : DateTime;
  name : LargeString;
  parentReference : microsoft.graph.itemReference;
  webUrl : LargeString;
  @cds.ambiguous : 'missing on condition?'
  createdByUser : Association to one microsoft.graph.users {  };
  @cds.ambiguous : 'missing on condition?'
  lastModifiedByUser : Association to one microsoft.graph.users {  };
};

@cds.persistence.skip : true
entity microsoft.graph.drives : microsoft.graph.baseItem {
  driveType : LargeString;
  owner : microsoft.graph.identitySet;
  quota : microsoft.graph.quota;
  sharePointIds : microsoft.graph.sharepointIds;
  system : microsoft.graph.systemFacet;
  @cds.ambiguous : 'missing on condition?'
  bundles : Association to many microsoft.graph.driveItem {  };
  @cds.ambiguous : 'missing on condition?'
  following : Association to many microsoft.graph.driveItem {  };
  @cds.ambiguous : 'missing on condition?'
  items : Association to many microsoft.graph.driveItem {  };
  @cds.ambiguous : 'missing on condition?'
  list : Association to one microsoft.graph.list {  };
  @cds.ambiguous : 'missing on condition?'
  root : Association to one microsoft.graph.driveItem {  };
  @cds.ambiguous : 'missing on condition?'
  special : Association to many microsoft.graph.driveItem {  };
};

@cds.persistence.skip : true
entity microsoft.graph.sites : microsoft.graph.baseItem {
  displayName : LargeString;
  error : microsoft.graph.publicError;
  root : microsoft.graph.root;
  sharepointIds : microsoft.graph.sharepointIds;
  siteCollection : microsoft.graph.siteCollection;
  @cds.ambiguous : 'missing on condition?'
  analytics : Association to one microsoft.graph.itemAnalytics {  };
  @cds.ambiguous : 'missing on condition?'
  columns : Association to many microsoft.graph.columnDefinition {  };
  @cds.ambiguous : 'missing on condition?'
  contentTypes : Association to many microsoft.graph.contentType {  };
  @cds.ambiguous : 'missing on condition?'
  drive : Association to one microsoft.graph.drives {  };
  @cds.ambiguous : 'missing on condition?'
  drives : Association to many microsoft.graph.drives {  };
  @cds.ambiguous : 'missing on condition?'
  externalColumns : Association to many microsoft.graph.columnDefinition {  };
  @cds.ambiguous : 'missing on condition?'
  items : Association to many microsoft.graph.baseItem {  };
  @cds.ambiguous : 'missing on condition?'
  lists : Association to many microsoft.graph.list {  };
  @cds.ambiguous : 'missing on condition?'
  operations : Association to many microsoft.graph.richLongRunningOperation {  };
  @cds.ambiguous : 'missing on condition?'
  permissions : Association to many microsoft.graph.permission {  };
  @cds.ambiguous : 'missing on condition?'
  sites : Association to many microsoft.graph.sites {  };
  @cds.ambiguous : 'missing on condition?'
  termStore : Association to one microsoft.graph.termStore.store {  };
  @cds.ambiguous : 'missing on condition?'
  termStores : Association to many microsoft.graph.termStore.store {  };
  @cds.ambiguous : 'missing on condition?'
  onenote : Association to one microsoft.graph.onenote {  };
};

@cds.persistence.skip : true
abstract entity microsoft.graph.extension : microsoft.graph.entity {
};

@cds.persistence.skip : true
entity microsoft.graph.agreementAcceptances : microsoft.graph.entity {
  agreementFileId : LargeString;
  agreementId : LargeString;
  deviceDisplayName : LargeString;
  deviceId : LargeString;
  deviceOSType : LargeString;
  deviceOSVersion : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  expirationDateTime : DateTime;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  recordedDateTime : DateTime;
  state : LargeString;
  userDisplayName : LargeString;
  userEmail : LargeString;
  userId : LargeString;
  userPrincipalName : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.managedDevice : microsoft.graph.entity {
  activationLockBypassCode : LargeString;
  androidSecurityPatchLevel : LargeString;
  azureADDeviceId : LargeString;
  azureADRegistered : Boolean;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  complianceGracePeriodExpirationDateTime : DateTime;
  complianceState : LargeString;
  configurationManagerClientEnabledFeatures : microsoft.graph.configurationManagerClientEnabledFeatures;
  deviceActionResults : many microsoft.graph.deviceActionResult;
  deviceCategoryDisplayName : LargeString;
  deviceEnrollmentType : LargeString;
  deviceHealthAttestationState : microsoft.graph.deviceHealthAttestationState;
  deviceName : LargeString;
  deviceRegistrationState : LargeString;
  easActivated : Boolean;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  easActivationDateTime : DateTime;
  easDeviceId : LargeString;
  emailAddress : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  enrolledDateTime : DateTime;
  ethernetMacAddress : LargeString;
  exchangeAccessState : LargeString;
  exchangeAccessStateReason : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  exchangeLastSuccessfulSyncDateTime : DateTime;
  freeStorageSpaceInBytes : Integer64;
  iccid : LargeString;
  imei : LargeString;
  isEncrypted : Boolean;
  isSupervised : Boolean;
  jailBroken : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastSyncDateTime : DateTime;
  managedDeviceName : LargeString;
  managedDeviceOwnerType : LargeString;
  managementAgent : LargeString;
  manufacturer : LargeString;
  meid : LargeString;
  model : LargeString;
  notes : LargeString;
  operatingSystem : LargeString;
  osVersion : LargeString;
  partnerReportedThreatState : LargeString;
  phoneNumber : LargeString;
  physicalMemoryInBytes : Integer64;
  remoteAssistanceSessionErrorDetails : LargeString;
  remoteAssistanceSessionUrl : LargeString;
  serialNumber : LargeString;
  subscriberCarrier : LargeString;
  totalStorageSpaceInBytes : Integer64;
  udid : LargeString;
  userDisplayName : LargeString;
  userId : LargeString;
  userPrincipalName : LargeString;
  wiFiMacAddress : LargeString;
  @cds.ambiguous : 'missing on condition?'
  deviceCompliancePolicyStates : Association to many microsoft.graph.deviceCompliancePolicyState {  };
  @cds.ambiguous : 'missing on condition?'
  deviceConfigurationStates : Association to many microsoft.graph.deviceConfigurationState {  };
  @cds.ambiguous : 'missing on condition?'
  deviceCategory : Association to one microsoft.graph.deviceCategory {  };
};

@cds.persistence.skip : true
abstract entity microsoft.graph.managedAppRegistration : microsoft.graph.entity {
  appIdentifier : microsoft.graph.mobileAppIdentifier;
  applicationVersion : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  deviceName : LargeString;
  deviceTag : LargeString;
  deviceType : LargeString;
  flaggedReasons : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastSyncDateTime : DateTime;
  managementSdkVersion : LargeString;
  platformVersion : LargeString;
  userId : LargeString;
  version : LargeString;
  @cds.ambiguous : 'missing on condition?'
  appliedPolicies : Association to many microsoft.graph.managedAppPolicy {  };
  @cds.ambiguous : 'missing on condition?'
  intendedPolicies : Association to many microsoft.graph.managedAppPolicy {  };
  @cds.ambiguous : 'missing on condition?'
  operations : Association to many microsoft.graph.managedAppOperation {  };
};

@cds.persistence.skip : true
entity microsoft.graph.deviceManagementTroubleshootingEvent : microsoft.graph.entity {
  correlationId : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  eventDateTime : DateTime;
};

@cds.persistence.skip : true
entity microsoft.graph.plannerUser : microsoft.graph.entity {
  @cds.ambiguous : 'missing on condition?'
  plans : Association to many microsoft.graph.plannerPlan {  };
  @cds.ambiguous : 'missing on condition?'
  tasks : Association to many microsoft.graph.plannerTask {  };
};

@cds.persistence.skip : true
entity microsoft.graph.officeGraphInsights : microsoft.graph.entity {
  @cds.ambiguous : 'missing on condition?'
  shared : Association to many microsoft.graph.sharedInsight {  };
  @cds.ambiguous : 'missing on condition?'
  trending : Association to many microsoft.graph.trending {  };
  @cds.ambiguous : 'missing on condition?'
  used : Association to many microsoft.graph.usedInsight {  };
};

@cds.persistence.skip : true
entity microsoft.graph.userSettings : microsoft.graph.entity {
  contributionToContentDiscoveryAsOrganizationDisabled : Boolean;
  contributionToContentDiscoveryDisabled : Boolean;
  @cds.ambiguous : 'missing on condition?'
  shiftPreferences : Association to one microsoft.graph.shiftPreferences {  };
};

@cds.persistence.skip : true
entity microsoft.graph.onenote : microsoft.graph.entity {
  @cds.ambiguous : 'missing on condition?'
  notebooks : Association to many microsoft.graph.notebook {  };
  @cds.ambiguous : 'missing on condition?'
  operations : Association to many microsoft.graph.onenoteOperation {  };
  @cds.ambiguous : 'missing on condition?'
  pages : Association to many microsoft.graph.onenotePage {  };
  @cds.ambiguous : 'missing on condition?'
  resources : Association to many microsoft.graph.onenoteResource {  };
  @cds.ambiguous : 'missing on condition?'
  sectionGroups : Association to many microsoft.graph.sectionGroup {  };
  @cds.ambiguous : 'missing on condition?'
  sections : Association to many microsoft.graph.onenoteSection {  };
};

@cds.persistence.skip : true
entity microsoft.graph.profilePhoto : microsoft.graph.entity {
  height : Integer;
  width : Integer;
};

@cds.persistence.skip : true
entity microsoft.graph.userActivity : microsoft.graph.entity {
  activationUrl : LargeString;
  activitySourceHost : LargeString;
  appActivityId : LargeString;
  appDisplayName : LargeString;
  contentInfo : microsoft.graph.Json;
  contentUrl : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  expirationDateTime : DateTime;
  fallbackUrl : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastModifiedDateTime : DateTime;
  status : LargeString;
  userTimezone : LargeString;
  visualElements : microsoft.graph.visualInfo;
  @cds.ambiguous : 'missing on condition?'
  historyItems : Association to many microsoft.graph.activityHistoryItem {  };
};

@cds.persistence.skip : true
entity microsoft.graph.onlineMeeting : microsoft.graph.entity {
  allowAttendeeToEnableCamera : Boolean;
  allowAttendeeToEnableMic : Boolean;
  allowedPresenters : LargeString;
  allowMeetingChat : LargeString;
  allowTeamworkReactions : Boolean;
  @odata.type : 'Edm.Stream'
  attendeeReport : LargeBinary;
  audioConferencing : microsoft.graph.audioConferencing;
  broadcastSettings : microsoft.graph.broadcastMeetingSettings;
  chatInfo : microsoft.graph.chatInfo;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  creationDateTime : DateTime;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  endDateTime : DateTime;
  externalId : LargeString;
  isBroadcast : Boolean;
  isEntryExitAnnounced : Boolean;
  joinInformation : microsoft.graph.itemBody;
  joinWebUrl : LargeString;
  lobbyBypassSettings : microsoft.graph.lobbyBypassSettings;
  participants : microsoft.graph.meetingParticipants;
  recordAutomatically : Boolean;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  startDateTime : DateTime;
  subject : LargeString;
  videoTeleconferenceId : LargeString;
  @cds.ambiguous : 'missing on condition?'
  attendanceReports : Association to many microsoft.graph.meetingAttendanceReport {  };
};

@cds.persistence.skip : true
entity microsoft.graph.presence : microsoft.graph.entity {
  activity : LargeString;
  availability : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.authentication : microsoft.graph.entity {
  @cds.ambiguous : 'missing on condition?'
  emailMethods : Association to many microsoft.graph.emailAuthenticationMethod {  };
  @cds.ambiguous : 'missing on condition?'
  fido2Methods : Association to many microsoft.graph.fido2AuthenticationMethod {  };
  @cds.ambiguous : 'missing on condition?'
  methods : Association to many microsoft.graph.authenticationMethod {  };
  @cds.ambiguous : 'missing on condition?'
  microsoftAuthenticatorMethods : Association to many microsoft.graph.microsoftAuthenticatorAuthenticationMethod {  };
  @cds.ambiguous : 'missing on condition?'
  operations : Association to many microsoft.graph.longRunningOperation {  };
  @cds.ambiguous : 'missing on condition?'
  passwordMethods : Association to many microsoft.graph.passwordAuthenticationMethod {  };
  @cds.ambiguous : 'missing on condition?'
  phoneMethods : Association to many microsoft.graph.phoneAuthenticationMethod {  };
  @cds.ambiguous : 'missing on condition?'
  softwareOathMethods : Association to many microsoft.graph.softwareOathAuthenticationMethod {  };
  @cds.ambiguous : 'missing on condition?'
  temporaryAccessPassMethods : Association to many microsoft.graph.temporaryAccessPassAuthenticationMethod {  };
  @cds.ambiguous : 'missing on condition?'
  windowsHelloForBusinessMethods : Association to many microsoft.graph.windowsHelloForBusinessAuthenticationMethod {  };
};

@cds.persistence.skip : true
entity microsoft.graph.chats : microsoft.graph.entity {
  chatType : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastUpdatedDateTime : DateTime;
  onlineMeetingInfo : microsoft.graph.teamworkOnlineMeetingInfo;
  tenantId : LargeString;
  topic : LargeString;
  webUrl : LargeString;
  @cds.ambiguous : 'missing on condition?'
  installedApps : Association to many microsoft.graph.teamsAppInstallation {  };
  @cds.ambiguous : 'missing on condition?'
  members : Association to many microsoft.graph.conversationMember {  };
  @cds.ambiguous : 'missing on condition?'
  messages : Association to many microsoft.graph.chatMessage {  };
  @cds.ambiguous : 'missing on condition?'
  tabs : Association to many microsoft.graph.teamsTab {  };
};

@cds.persistence.skip : true
entity microsoft.graph.teams : microsoft.graph.entity {
  classification : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  description : LargeString;
  displayName : LargeString;
  funSettings : microsoft.graph.teamFunSettings;
  guestSettings : microsoft.graph.teamGuestSettings;
  internalId : LargeString;
  isArchived : Boolean;
  memberSettings : microsoft.graph.teamMemberSettings;
  messagingSettings : microsoft.graph.teamMessagingSettings;
  specialization : LargeString;
  summary : microsoft.graph.teamSummary;
  tenantId : LargeString;
  visibility : LargeString;
  webUrl : LargeString;
  @cds.ambiguous : 'missing on condition?'
  allChannels : Association to many microsoft.graph.channel {  };
  @cds.ambiguous : 'missing on condition?'
  channels : Association to many microsoft.graph.channel {  };
  @cds.ambiguous : 'missing on condition?'
  group : Association to one microsoft.graph.groups {  };
  @cds.ambiguous : 'missing on condition?'
  incomingChannels : Association to many microsoft.graph.channel {  };
  @cds.ambiguous : 'missing on condition?'
  installedApps : Association to many microsoft.graph.teamsAppInstallation {  };
  @cds.ambiguous : 'missing on condition?'
  members : Association to many microsoft.graph.conversationMember {  };
  @cds.ambiguous : 'missing on condition?'
  operations : Association to many microsoft.graph.teamsAsyncOperation {  };
  @cds.ambiguous : 'missing on condition?'
  photo : Association to one microsoft.graph.profilePhoto {  };
  @cds.ambiguous : 'missing on condition?'
  primaryChannel : Association to one microsoft.graph.channel {  };
  @cds.ambiguous : 'missing on condition?'
  template : Association to one microsoft.graph.teamsTemplates {  };
  @cds.ambiguous : 'missing on condition?'
  schedule : Association to one microsoft.graph.schedule {  };
};

@cds.persistence.skip : true
entity microsoft.graph.userTeamwork : microsoft.graph.entity {
  @cds.ambiguous : 'missing on condition?'
  associatedTeams : Association to many microsoft.graph.associatedTeamInfo {  };
  @cds.ambiguous : 'missing on condition?'
  installedApps : Association to many microsoft.graph.userScopeTeamsAppInstallation {  };
};

@cds.persistence.skip : true
entity microsoft.graph.todo : microsoft.graph.entity {
  @cds.ambiguous : 'missing on condition?'
  lists : Association to many microsoft.graph.todoTaskList {  };
};

@cds.persistence.skip : true
entity microsoft.graph.applications : microsoft.graph.directoryObjects {
  addIns : many microsoft.graph.addIn;
  api : microsoft.graph.apiApplication;
  appId : LargeString;
  applicationTemplateId : LargeString;
  appRoles : many microsoft.graph.appRole;
  certification : microsoft.graph.certification;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  description : LargeString;
  disabledByMicrosoftStatus : LargeString;
  displayName : LargeString;
  groupMembershipClaims : LargeString;
  identifierUris : many LargeString;
  info : microsoft.graph.informationalUrl;
  isDeviceOnlyAuthSupported : Boolean;
  isFallbackPublicClient : Boolean;
  keyCredentials : many microsoft.graph.keyCredential;
  @odata.type : 'Edm.Stream'
  logo : LargeBinary;
  notes : LargeString;
  oauth2RequirePostResponse : Boolean;
  optionalClaims : microsoft.graph.optionalClaims;
  parentalControlSettings : microsoft.graph.parentalControlSettings;
  passwordCredentials : many microsoft.graph.passwordCredential;
  publicClient : microsoft.graph.publicClientApplication;
  publisherDomain : LargeString;
  requiredResourceAccess : many microsoft.graph.requiredResourceAccess;
  samlMetadataUrl : LargeString;
  serviceManagementReference : LargeString;
  signInAudience : LargeString;
  spa : microsoft.graph.spaApplication;
  tags : many LargeString;
  tokenEncryptionKeyId : UUID;
  verifiedPublisher : microsoft.graph.verifiedPublisher;
  web : microsoft.graph.webApplication;
  @cds.ambiguous : 'missing on condition?'
  createdOnBehalfOf : Association to one microsoft.graph.directoryObjects {  };
  @cds.ambiguous : 'missing on condition?'
  extensionProperties : Association to many microsoft.graph.extensionProperty {  };
  @cds.ambiguous : 'missing on condition?'
  federatedIdentityCredentials : Association to many microsoft.graph.federatedIdentityCredential {  };
  @cds.ambiguous : 'missing on condition?'
  homeRealmDiscoveryPolicies : Association to many microsoft.graph.homeRealmDiscoveryPolicy {  };
  @cds.ambiguous : 'missing on condition?'
  owners : Association to many microsoft.graph.directoryObjects {  };
  @cds.ambiguous : 'missing on condition?'
  tokenIssuancePolicies : Association to many microsoft.graph.tokenIssuancePolicy {  };
  @cds.ambiguous : 'missing on condition?'
  tokenLifetimePolicies : Association to many microsoft.graph.tokenLifetimePolicy {  };
} actions {
  action setVerifiedPublisher(
    verifiedPublisherId : LargeString
  );
  action unsetVerifiedPublisher();
  action addKey(
    keyCredential : microsoft.graph.keyCredential,
    passwordCredential : microsoft.graph.passwordCredential,
    proof : LargeString
  ) returns microsoft.graph.keyCredential;
  action addPassword(
    passwordCredential : microsoft.graph.passwordCredential
  ) returns microsoft.graph.passwordCredential;
  action removeKey(
    keyId : UUID,
    proof : LargeString
  );
  action removePassword(
    keyId : UUID
  );
};

@cds.persistence.skip : true
entity microsoft.graph.servicePrincipals : microsoft.graph.directoryObjects {
  accountEnabled : Boolean;
  addIns : many microsoft.graph.addIn;
  alternativeNames : many LargeString;
  appDescription : LargeString;
  appDisplayName : LargeString;
  appId : LargeString;
  applicationTemplateId : LargeString;
  appOwnerOrganizationId : UUID;
  appRoleAssignmentRequired : Boolean;
  appRoles : many microsoft.graph.appRole;
  description : LargeString;
  disabledByMicrosoftStatus : LargeString;
  displayName : LargeString;
  homepage : LargeString;
  info : microsoft.graph.informationalUrl;
  keyCredentials : many microsoft.graph.keyCredential;
  loginUrl : LargeString;
  logoutUrl : LargeString;
  notes : LargeString;
  notificationEmailAddresses : many LargeString;
  oauth2PermissionScopes : many microsoft.graph.permissionScope;
  passwordCredentials : many microsoft.graph.passwordCredential;
  preferredSingleSignOnMode : LargeString;
  preferredTokenSigningKeyThumbprint : LargeString;
  replyUrls : many LargeString;
  resourceSpecificApplicationPermissions : many microsoft.graph.resourceSpecificPermission;
  samlSingleSignOnSettings : microsoft.graph.samlSingleSignOnSettings;
  servicePrincipalNames : many LargeString;
  servicePrincipalType : LargeString;
  signInAudience : LargeString;
  tags : many LargeString;
  tokenEncryptionKeyId : UUID;
  @cds.ambiguous : 'missing on condition?'
  appRoleAssignedTo : Association to many microsoft.graph.appRoleAssignment {  };
  @cds.ambiguous : 'missing on condition?'
  appRoleAssignments : Association to many microsoft.graph.appRoleAssignment {  };
  @cds.ambiguous : 'missing on condition?'
  claimsMappingPolicies : Association to many microsoft.graph.claimsMappingPolicy {  };
  @cds.ambiguous : 'missing on condition?'
  createdObjects : Association to many microsoft.graph.directoryObjects {  };
  @cds.ambiguous : 'missing on condition?'
  delegatedPermissionClassifications : Association to many microsoft.graph.delegatedPermissionClassification {  };
  @cds.ambiguous : 'missing on condition?'
  endpoints : Association to many microsoft.graph.endpoint {  };
  @cds.ambiguous : 'missing on condition?'
  federatedIdentityCredentials : Association to many microsoft.graph.federatedIdentityCredential {  };
  @cds.ambiguous : 'missing on condition?'
  homeRealmDiscoveryPolicies : Association to many microsoft.graph.homeRealmDiscoveryPolicy {  };
  @cds.ambiguous : 'missing on condition?'
  memberOf : Association to many microsoft.graph.directoryObjects {  };
  @cds.ambiguous : 'missing on condition?'
  oauth2PermissionGrants : Association to many microsoft.graph.oauth2PermissionGrants {  };
  @cds.ambiguous : 'missing on condition?'
  ownedObjects : Association to many microsoft.graph.directoryObjects {  };
  @cds.ambiguous : 'missing on condition?'
  owners : Association to many microsoft.graph.directoryObjects {  };
  @cds.ambiguous : 'missing on condition?'
  tokenIssuancePolicies : Association to many microsoft.graph.tokenIssuancePolicy {  };
  @cds.ambiguous : 'missing on condition?'
  tokenLifetimePolicies : Association to many microsoft.graph.tokenLifetimePolicy {  };
  @cds.ambiguous : 'missing on condition?'
  transitiveMemberOf : Association to many microsoft.graph.directoryObjects {  };
} actions {
  action addKey(
    keyCredential : microsoft.graph.keyCredential,
    passwordCredential : microsoft.graph.passwordCredential,
    proof : LargeString
  ) returns microsoft.graph.keyCredential;
  action addPassword(
    passwordCredential : microsoft.graph.passwordCredential
  ) returns microsoft.graph.passwordCredential;
  action removeKey(
    keyId : UUID,
    proof : LargeString
  );
  action removePassword(
    keyId : UUID
  );
  action addTokenSigningCertificate(
    displayName : LargeString,
    @odata.precision : 0
    @odata.type : 'Edm.DateTimeOffset'
    endDateTime : DateTime
  ) returns microsoft.graph.selfSignedCertificate;
};

@cds.persistence.skip : true
entity microsoft.graph.extensionProperty : microsoft.graph.directoryObjects {
  appDisplayName : LargeString;
  dataType : LargeString;
  isSyncedFromOnPremises : Boolean;
  name : LargeString;
  targetObjects : many LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.federatedIdentityCredential : microsoft.graph.entity {
  audiences : many LargeString;
  description : LargeString;
  issuer : LargeString;
  name : LargeString;
  subject : LargeString;
};

@cds.persistence.skip : true
abstract entity microsoft.graph.policyBase : microsoft.graph.directoryObjects {
  description : LargeString;
  displayName : LargeString;
};

@cds.persistence.skip : true
abstract entity microsoft.graph.stsPolicy : microsoft.graph.policyBase {
  definition : many LargeString;
  isOrganizationDefault : Boolean;
  @cds.ambiguous : 'missing on condition?'
  appliesTo : Association to many microsoft.graph.directoryObjects {  };
};

@cds.persistence.skip : true
entity microsoft.graph.homeRealmDiscoveryPolicy : microsoft.graph.stsPolicy {
};

@cds.persistence.skip : true
entity microsoft.graph.tokenIssuancePolicy : microsoft.graph.stsPolicy {
};

@cds.persistence.skip : true
entity microsoft.graph.tokenLifetimePolicy : microsoft.graph.stsPolicy {
};

@cds.persistence.skip : true
entity microsoft.graph.applicationTemplates : microsoft.graph.entity {
  categories : many LargeString;
  description : LargeString;
  displayName : LargeString;
  homePageUrl : LargeString;
  logoUrl : LargeString;
  publisher : LargeString;
  supportedProvisioningTypes : many LargeString;
  supportedSingleSignOnModes : many LargeString;
} actions {
  action instantiate(
    displayName : LargeString
  ) returns microsoft.graph.applicationServicePrincipal;
};

@cds.persistence.skip : true
entity microsoft.graph.claimsMappingPolicy : microsoft.graph.stsPolicy {
};

@cds.persistence.skip : true
entity microsoft.graph.delegatedPermissionClassification : microsoft.graph.entity {
  classification : LargeString;
  permissionId : LargeString;
  permissionName : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.endpoint : microsoft.graph.directoryObjects {
  capability : LargeString;
  providerId : LargeString;
  providerName : LargeString;
  providerResourceId : LargeString;
  uri : LargeString;
};

@cds.persistence.skip : true
abstract entity microsoft.graph.authenticationMethodConfigurations : microsoft.graph.entity {
  state : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.authenticationMethodsPolicy : microsoft.graph.entity {
  description : LargeString;
  displayName : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastModifiedDateTime : DateTime;
  policyVersion : LargeString;
  reconfirmationInDays : Integer;
  registrationEnforcement : microsoft.graph.registrationEnforcement;
  @cds.ambiguous : 'missing on condition?'
  authenticationMethodConfigurations : Association to many microsoft.graph.authenticationMethodConfigurations {  };
};

@cds.persistence.skip : true
entity microsoft.graph.authenticationMethodTarget : microsoft.graph.entity {
  isRegistrationRequired : Boolean;
  targetType : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.emailAuthenticationMethodConfiguration : microsoft.graph.authenticationMethodConfigurations {
  allowExternalIdToUseEmailOtp : LargeString;
  @cds.ambiguous : 'missing on condition?'
  includeTargets : Association to many microsoft.graph.authenticationMethodTarget {  };
};

@cds.persistence.skip : true
entity microsoft.graph.fido2AuthenticationMethodConfiguration : microsoft.graph.authenticationMethodConfigurations {
  isAttestationEnforced : Boolean;
  isSelfServiceRegistrationAllowed : Boolean;
  keyRestrictions : microsoft.graph.fido2KeyRestrictions;
  @cds.ambiguous : 'missing on condition?'
  includeTargets : Association to many microsoft.graph.authenticationMethodTarget {  };
};

@cds.persistence.skip : true
entity microsoft.graph.microsoftAuthenticatorAuthenticationMethodConfiguration : microsoft.graph.authenticationMethodConfigurations {
  @cds.ambiguous : 'missing on condition?'
  includeTargets : Association to many microsoft.graph.microsoftAuthenticatorAuthenticationMethodTarget {  };
};

@cds.persistence.skip : true
entity microsoft.graph.microsoftAuthenticatorAuthenticationMethodTarget : microsoft.graph.authenticationMethodTarget {
  authenticationMode : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.policyRoot : microsoft.graph.entity {
  @cds.ambiguous : 'missing on condition?'
  authenticationMethodsPolicy : Association to one microsoft.graph.authenticationMethodsPolicy {  };
  @cds.ambiguous : 'missing on condition?'
  authenticationFlowsPolicy : Association to one microsoft.graph.authenticationFlowsPolicy {  };
  @cds.ambiguous : 'missing on condition?'
  activityBasedTimeoutPolicies : Association to many microsoft.graph.activityBasedTimeoutPolicy {  };
  @cds.ambiguous : 'missing on condition?'
  authorizationPolicy : Association to one microsoft.graph.authorizationPolicy {  };
  @cds.ambiguous : 'missing on condition?'
  claimsMappingPolicies : Association to many microsoft.graph.claimsMappingPolicy {  };
  @cds.ambiguous : 'missing on condition?'
  crossTenantAccessPolicy : Association to one microsoft.graph.crossTenantAccessPolicy {  };
  @cds.ambiguous : 'missing on condition?'
  homeRealmDiscoveryPolicies : Association to many microsoft.graph.homeRealmDiscoveryPolicy {  };
  @cds.ambiguous : 'missing on condition?'
  permissionGrantPolicies : Association to many microsoft.graph.permissionGrantPolicy {  };
  @cds.ambiguous : 'missing on condition?'
  tokenIssuancePolicies : Association to many microsoft.graph.tokenIssuancePolicy {  };
  @cds.ambiguous : 'missing on condition?'
  tokenLifetimePolicies : Association to many microsoft.graph.tokenLifetimePolicy {  };
  @cds.ambiguous : 'missing on condition?'
  featureRolloutPolicies : Association to many microsoft.graph.featureRolloutPolicy {  };
  @cds.ambiguous : 'missing on condition?'
  adminConsentRequestPolicy : Association to one microsoft.graph.adminConsentRequestPolicy {  };
  @cds.ambiguous : 'missing on condition?'
  conditionalAccessPolicies : Association to many microsoft.graph.conditionalAccessPolicy {  };
  @cds.ambiguous : 'missing on condition?'
  identitySecurityDefaultsEnforcementPolicy : Association to one microsoft.graph.identitySecurityDefaultsEnforcementPolicy {  };
  @cds.ambiguous : 'missing on condition?'
  roleManagementPolicies : Association to many microsoft.graph.unifiedRoleManagementPolicy {  };
  @cds.ambiguous : 'missing on condition?'
  roleManagementPolicyAssignments : Association to many microsoft.graph.unifiedRoleManagementPolicyAssignment {  };
};

@cds.persistence.skip : true
entity microsoft.graph.authenticationFlowsPolicy : microsoft.graph.entity {
  description : LargeString;
  displayName : LargeString;
  selfServiceSignUp : microsoft.graph.selfServiceSignUpAuthenticationFlowConfiguration;
};

@cds.persistence.skip : true
entity microsoft.graph.activityBasedTimeoutPolicy : microsoft.graph.stsPolicy {
};

@cds.persistence.skip : true
entity microsoft.graph.authorizationPolicy : microsoft.graph.policyBase {
  allowedToSignUpEmailBasedSubscriptions : Boolean;
  allowedToUseSSPR : Boolean;
  allowEmailVerifiedUsersToJoinOrganization : Boolean;
  allowInvitesFrom : LargeString;
  blockMsolPowerShell : Boolean;
  defaultUserRolePermissions : microsoft.graph.defaultUserRolePermissions;
  guestUserRoleId : UUID;
};

@cds.persistence.skip : true
entity microsoft.graph.crossTenantAccessPolicy : microsoft.graph.policyBase {
  @cds.ambiguous : 'missing on condition?'
  default : Association to one microsoft.graph.crossTenantAccessPolicyConfigurationDefault {  };
  @cds.ambiguous : 'missing on condition?'
  partners : Association to many microsoft.graph.crossTenantAccessPolicyConfigurationPartner {  };
};

@cds.persistence.skip : true
entity microsoft.graph.permissionGrantPolicy : microsoft.graph.policyBase {
  @cds.ambiguous : 'missing on condition?'
  excludes : Association to many microsoft.graph.permissionGrantConditionSet {  };
  @cds.ambiguous : 'missing on condition?'
  includes : Association to many microsoft.graph.permissionGrantConditionSet {  };
};

@cds.persistence.skip : true
entity microsoft.graph.featureRolloutPolicy : microsoft.graph.entity {
  description : LargeString;
  displayName : LargeString;
  feature : LargeString;
  isAppliedToOrganization : Boolean;
  isEnabled : Boolean;
  @cds.ambiguous : 'missing on condition?'
  appliesTo : Association to many microsoft.graph.directoryObjects {  };
};

@cds.persistence.skip : true
entity microsoft.graph.adminConsentRequestPolicy : microsoft.graph.entity {
  isEnabled : Boolean;
  notifyReviewers : Boolean;
  remindersEnabled : Boolean;
  requestDurationInDays : Integer;
  reviewers : many microsoft.graph.accessReviewReviewerScope;
  version : Integer;
};

@cds.persistence.skip : true
entity microsoft.graph.conditionalAccessPolicy : microsoft.graph.entity {
  conditions : microsoft.graph.conditionalAccessConditionSet;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  description : LargeString;
  displayName : LargeString;
  grantControls : microsoft.graph.conditionalAccessGrantControls;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  modifiedDateTime : DateTime;
  sessionControls : microsoft.graph.conditionalAccessSessionControls;
  state : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.identitySecurityDefaultsEnforcementPolicy : microsoft.graph.policyBase {
  isEnabled : Boolean;
};

@cds.persistence.skip : true
entity microsoft.graph.unifiedRoleManagementPolicy : microsoft.graph.entity {
  description : LargeString;
  displayName : LargeString;
  isOrganizationDefault : Boolean;
  lastModifiedBy : microsoft.graph.identity;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastModifiedDateTime : DateTime;
  scopeId : LargeString;
  scopeType : LargeString;
  @cds.ambiguous : 'missing on condition?'
  effectiveRules : Association to many microsoft.graph.unifiedRoleManagementPolicyRule {  };
  @cds.ambiguous : 'missing on condition?'
  rules : Association to many microsoft.graph.unifiedRoleManagementPolicyRule {  };
};

@cds.persistence.skip : true
entity microsoft.graph.unifiedRoleManagementPolicyAssignment : microsoft.graph.entity {
  policyId : LargeString;
  roleDefinitionId : LargeString;
  scopeId : LargeString;
  scopeType : LargeString;
  @cds.ambiguous : 'missing on condition?'
  policy : Association to one microsoft.graph.unifiedRoleManagementPolicy {  };
};

@cds.persistence.skip : true
entity microsoft.graph.temporaryAccessPassAuthenticationMethodConfiguration : microsoft.graph.authenticationMethodConfigurations {
  defaultLength : Integer;
  defaultLifetimeInMinutes : Integer;
  isUsableOnce : Boolean;
  maximumLifetimeInMinutes : Integer;
  minimumLifetimeInMinutes : Integer;
  @cds.ambiguous : 'missing on condition?'
  includeTargets : Association to many microsoft.graph.authenticationMethodTarget {  };
};

@cds.persistence.skip : true
entity microsoft.graph.bitlocker : microsoft.graph.entity {
  @cds.ambiguous : 'missing on condition?'
  recoveryKeys : Association to many microsoft.graph.bitlockerRecoveryKey {  };
};

@cds.persistence.skip : true
entity microsoft.graph.bitlockerRecoveryKey : microsoft.graph.entity {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  deviceId : LargeString;
  ![key] : LargeString;
  volumeType : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.informationProtection : microsoft.graph.entity {
  @cds.ambiguous : 'missing on condition?'
  bitlocker : Association to one microsoft.graph.bitlocker {  };
  @cds.ambiguous : 'missing on condition?'
  threatAssessmentRequests : Association to many microsoft.graph.threatAssessmentRequest {  };
};

@cds.persistence.skip : true
abstract entity microsoft.graph.threatAssessmentRequest : microsoft.graph.entity {
  category : LargeString;
  contentType : LargeString;
  createdBy : microsoft.graph.identitySet;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  expectedAssessment : LargeString;
  requestSource : LargeString;
  status : LargeString;
  @cds.ambiguous : 'missing on condition?'
  results : Association to many microsoft.graph.threatAssessmentResult {  };
};

@cds.persistence.skip : true
entity microsoft.graph.bookingAppointment : microsoft.graph.entity {
  additionalInformation : LargeString;
  customers : many microsoft.graph.bookingCustomerInformationBase;
  customerTimeZone : LargeString;
  endDateTime : microsoft.graph.dateTimeTimeZone;
  filledAttendeesCount : Integer;
  isLocationOnline : Boolean;
  joinWebUrl : LargeString;
  maximumAttendeesCount : Integer;
  optOutOfCustomerEmail : Boolean;
  price : Double;
  priceType : LargeString;
  reminders : many microsoft.graph.bookingReminder;
  selfServiceAppointmentId : LargeString;
  serviceId : LargeString;
  serviceLocation : microsoft.graph.location;
  serviceName : LargeString;
  serviceNotes : LargeString;
  smsNotificationsEnabled : Boolean;
  staffMemberIds : many LargeString;
  startDateTime : microsoft.graph.dateTimeTimeZone;
} actions {
  action cancel(
    cancellationMessage : LargeString
  );
};

@cds.persistence.skip : true
entity microsoft.graph.bookingBusiness : microsoft.graph.entity {
  address : microsoft.graph.physicalAddress;
  businessHours : many microsoft.graph.bookingWorkHours;
  businessType : LargeString;
  defaultCurrencyIso : LargeString;
  displayName : LargeString;
  email : LargeString;
  isPublished : Boolean;
  phone : LargeString;
  publicUrl : LargeString;
  schedulingPolicy : microsoft.graph.bookingSchedulingPolicy;
  webSiteUrl : LargeString;
  @cds.ambiguous : 'missing on condition?'
  appointments : Association to many microsoft.graph.bookingAppointment {  };
  @cds.ambiguous : 'missing on condition?'
  calendarView : Association to many microsoft.graph.bookingAppointment {  };
  @cds.ambiguous : 'missing on condition?'
  customers : Association to many microsoft.graph.bookingCustomerBase {  };
  @cds.ambiguous : 'missing on condition?'
  customQuestions : Association to many microsoft.graph.bookingCustomQuestion {  };
  @cds.ambiguous : 'missing on condition?'
  services : Association to many microsoft.graph.bookingService {  };
  @cds.ambiguous : 'missing on condition?'
  staffMembers : Association to many microsoft.graph.bookingStaffMemberBase {  };
} actions {
  action getStaffAvailability(
    staffIds : many LargeString,
    startDateTime : microsoft.graph.dateTimeTimeZone,
    endDateTime : microsoft.graph.dateTimeTimeZone
  ) returns many microsoft.graph.staffAvailabilityItem;
  action publish();
  action unpublish();
};

@cds.persistence.skip : true
abstract entity microsoft.graph.bookingCustomerBase : microsoft.graph.entity {
};

@cds.persistence.skip : true
entity microsoft.graph.bookingCustomQuestion : microsoft.graph.entity {
  answerInputType : LargeString;
  answerOptions : many LargeString;
  displayName : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.bookingService : microsoft.graph.entity {
  additionalInformation : LargeString;
  customQuestions : many microsoft.graph.bookingQuestionAssignment;
  defaultLocation : microsoft.graph.location;
  defaultPrice : Double;
  defaultPriceType : LargeString;
  defaultReminders : many microsoft.graph.bookingReminder;
  description : LargeString;
  displayName : LargeString;
  isHiddenFromCustomers : Boolean;
  isLocationOnline : Boolean;
  maximumAttendeesCount : Integer;
  notes : LargeString;
  schedulingPolicy : microsoft.graph.bookingSchedulingPolicy;
  smsNotificationsEnabled : Boolean;
  staffMemberIds : many LargeString;
  webUrl : LargeString;
};

@cds.persistence.skip : true
abstract entity microsoft.graph.bookingStaffMemberBase : microsoft.graph.entity {
};

@cds.persistence.skip : true
entity microsoft.graph.bookingCurrency : microsoft.graph.entity {
  symbol : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.bookingCustomer : microsoft.graph.bookingCustomerBase {
  addresses : many microsoft.graph.physicalAddress;
  displayName : LargeString;
  emailAddress : LargeString;
  phones : many microsoft.graph.phone;
};

@cds.persistence.skip : true
entity microsoft.graph.bookingStaffMember : microsoft.graph.bookingStaffMemberBase {
  availabilityIsAffectedByPersonalCalendar : Boolean;
  displayName : LargeString;
  emailAddress : LargeString;
  role : LargeString;
  timeZone : LargeString;
  useBusinessHours : Boolean;
  workingHours : many microsoft.graph.bookingWorkHours;
};

@cds.persistence.skip : true
entity microsoft.graph.solutionsRoot {
  @cds.ambiguous : 'missing on condition?'
  bookingBusinesses : Association to many microsoft.graph.bookingBusiness {  };
  @cds.ambiguous : 'missing on condition?'
  bookingCurrencies : Association to many microsoft.graph.bookingCurrency {  };
};

@cds.persistence.skip : true
entity microsoft.graph.authoredNote : microsoft.graph.entity {
  author : microsoft.graph.identity;
  content : microsoft.graph.itemBody;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
};

@cds.persistence.skip : true
entity microsoft.graph.privacy {
  @cds.ambiguous : 'missing on condition?'
  subjectRightsRequests : Association to many microsoft.graph.subjectRightsRequest {  };
};

@cds.persistence.skip : true
entity microsoft.graph.subjectRightsRequest : microsoft.graph.entity {
  assignedTo : microsoft.graph.identity;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  closedDateTime : DateTime;
  createdBy : microsoft.graph.identitySet;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  dataSubject : microsoft.graph.dataSubject;
  dataSubjectType : LargeString;
  description : LargeString;
  displayName : LargeString;
  history : many microsoft.graph.subjectRightsRequestHistory;
  insight : microsoft.graph.subjectRightsRequestDetail;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  internalDueDateTime : DateTime;
  lastModifiedBy : microsoft.graph.identitySet;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastModifiedDateTime : DateTime;
  regulations : many LargeString;
  stages : many microsoft.graph.subjectRightsRequestStageDetail;
  status : LargeString;
  type : LargeString;
  @cds.ambiguous : 'missing on condition?'
  notes : Association to many microsoft.graph.authoredNote {  };
  @cds.ambiguous : 'missing on condition?'
  team : Association to one microsoft.graph.teams {  };
} actions {
  function getFinalAttachment() returns LargeBinary;
  function getFinalReport() returns LargeBinary;
};

@cds.persistence.skip : true
entity microsoft.graph.channel : microsoft.graph.entity {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  description : LargeString;
  displayName : LargeString;
  email : LargeString;
  isFavoriteByDefault : Boolean;
  membershipType : LargeString;
  tenantId : LargeString;
  webUrl : LargeString;
  @cds.ambiguous : 'missing on condition?'
  filesFolder : Association to one microsoft.graph.driveItem {  };
  @cds.ambiguous : 'missing on condition?'
  members : Association to many microsoft.graph.conversationMember {  };
  @cds.ambiguous : 'missing on condition?'
  messages : Association to many microsoft.graph.chatMessage {  };
  @cds.ambiguous : 'missing on condition?'
  sharedWithTeams : Association to many microsoft.graph.sharedWithChannelTeamInfo {  };
  @cds.ambiguous : 'missing on condition?'
  tabs : Association to many microsoft.graph.teamsTab {  };
};

@cds.persistence.skip : true
entity microsoft.graph.groups : microsoft.graph.directoryObjects {
  assignedLabels : many microsoft.graph.assignedLabel;
  assignedLicenses : many microsoft.graph.assignedLicense;
  classification : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  description : LargeString;
  displayName : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  expirationDateTime : DateTime;
  groupTypes : many LargeString;
  hasMembersWithLicenseErrors : Boolean;
  isAssignableToRole : Boolean;
  licenseProcessingState : microsoft.graph.licenseProcessingState;
  mail : LargeString;
  mailEnabled : Boolean;
  mailNickname : LargeString;
  membershipRule : LargeString;
  membershipRuleProcessingState : LargeString;
  onPremisesDomainName : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  onPremisesLastSyncDateTime : DateTime;
  onPremisesNetBiosName : LargeString;
  onPremisesProvisioningErrors : many microsoft.graph.onPremisesProvisioningError;
  onPremisesSamAccountName : LargeString;
  onPremisesSecurityIdentifier : LargeString;
  onPremisesSyncEnabled : Boolean;
  preferredDataLocation : LargeString;
  preferredLanguage : LargeString;
  proxyAddresses : many LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  renewedDateTime : DateTime;
  securityEnabled : Boolean;
  securityIdentifier : LargeString;
  theme : LargeString;
  visibility : LargeString;
  allowExternalSenders : Boolean;
  autoSubscribeNewMembers : Boolean;
  hideFromAddressLists : Boolean;
  hideFromOutlookClients : Boolean;
  isSubscribedByMail : Boolean;
  unseenCount : Integer;
  isArchived : Boolean;
  @cds.ambiguous : 'missing on condition?'
  appRoleAssignments : Association to many microsoft.graph.appRoleAssignment {  };
  @cds.ambiguous : 'missing on condition?'
  createdOnBehalfOf : Association to one microsoft.graph.directoryObjects {  };
  @cds.ambiguous : 'missing on condition?'
  memberOf : Association to many microsoft.graph.directoryObjects {  };
  @cds.ambiguous : 'missing on condition?'
  members : Association to many microsoft.graph.directoryObjects {  };
  @cds.ambiguous : 'missing on condition?'
  membersWithLicenseErrors : Association to many microsoft.graph.directoryObjects {  };
  @cds.ambiguous : 'missing on condition?'
  owners : Association to many microsoft.graph.directoryObjects {  };
  @cds.ambiguous : 'missing on condition?'
  permissionGrants : Association to many microsoft.graph.permissionGrants {  };
  @cds.ambiguous : 'missing on condition?'
  settings : Association to many microsoft.graph.groupSettings {  };
  @cds.ambiguous : 'missing on condition?'
  transitiveMemberOf : Association to many microsoft.graph.directoryObjects {  };
  @cds.ambiguous : 'missing on condition?'
  transitiveMembers : Association to many microsoft.graph.directoryObjects {  };
  @cds.ambiguous : 'missing on condition?'
  acceptedSenders : Association to many microsoft.graph.directoryObjects {  };
  @cds.ambiguous : 'missing on condition?'
  calendar : Association to one microsoft.graph.calendar {  };
  @cds.ambiguous : 'missing on condition?'
  calendarView : Association to many microsoft.graph.event {  };
  @cds.ambiguous : 'missing on condition?'
  conversations : Association to many microsoft.graph.conversation {  };
  @cds.ambiguous : 'missing on condition?'
  events : Association to many microsoft.graph.event {  };
  @cds.ambiguous : 'missing on condition?'
  rejectedSenders : Association to many microsoft.graph.directoryObjects {  };
  @cds.ambiguous : 'missing on condition?'
  threads : Association to many microsoft.graph.conversationThread {  };
  @cds.ambiguous : 'missing on condition?'
  drive : Association to one microsoft.graph.drives {  };
  @cds.ambiguous : 'missing on condition?'
  drives : Association to many microsoft.graph.drives {  };
  @cds.ambiguous : 'missing on condition?'
  sites : Association to many microsoft.graph.sites {  };
  @cds.ambiguous : 'missing on condition?'
  extensions : Association to many microsoft.graph.extension {  };
  @cds.ambiguous : 'missing on condition?'
  groupLifecyclePolicies : Association to many microsoft.graph.groupLifecyclePolicies {  };
  @cds.ambiguous : 'missing on condition?'
  planner : Association to one microsoft.graph.plannerGroup {  };
  @cds.ambiguous : 'missing on condition?'
  onenote : Association to one microsoft.graph.onenote {  };
  @cds.ambiguous : 'missing on condition?'
  photo : Association to one microsoft.graph.profilePhoto {  };
  @cds.ambiguous : 'missing on condition?'
  photos : Association to many microsoft.graph.profilePhoto {  };
  @cds.ambiguous : 'missing on condition?'
  team : Association to one microsoft.graph.teams {  };
} actions {
  action assignLicense(
    addLicenses : many microsoft.graph.assignedLicense,
    removeLicenses : many UUID
  ) returns microsoft.graph.groups;
  action checkGrantedPermissionsForApp() returns many microsoft.graph.permissionGrants;
  action validateProperties(
    displayName : LargeString,
    mailNickname : LargeString,
    onBehalfOfUserId : UUID
  );
  action addFavorite();
  action removeFavorite();
  action resetUnseenCount();
  action subscribeByMail();
  action unsubscribeByMail();
  action renew();
};

@cds.persistence.skip : true
entity microsoft.graph.teamsAppInstallation : microsoft.graph.entity {
  @cds.ambiguous : 'missing on condition?'
  teamsApp : Association to one microsoft.graph.teamsApp {  };
  @cds.ambiguous : 'missing on condition?'
  teamsAppDefinition : Association to one microsoft.graph.teamsAppDefinition {  };
};

@cds.persistence.skip : true
abstract entity microsoft.graph.conversationMember : microsoft.graph.entity {
  displayName : LargeString;
  roles : many LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  visibleHistoryStartDateTime : DateTime;
};

@cds.persistence.skip : true
entity microsoft.graph.teamsAsyncOperation : microsoft.graph.entity {
  attemptsCount : Integer;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  error : microsoft.graph.operationError;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastActionDateTime : DateTime;
  operationType : LargeString;
  status : LargeString;
  targetResourceId : LargeString;
  targetResourceLocation : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.teamsTemplates : microsoft.graph.entity {
};

@cds.persistence.skip : true
entity microsoft.graph.schedule : microsoft.graph.entity {
  enabled : Boolean;
  offerShiftRequestsEnabled : Boolean;
  openShiftsEnabled : Boolean;
  provisionStatus : LargeString;
  provisionStatusCode : LargeString;
  swapShiftsRequestsEnabled : Boolean;
  timeClockEnabled : Boolean;
  timeOffRequestsEnabled : Boolean;
  timeZone : LargeString;
  workforceIntegrationIds : many LargeString;
  @cds.ambiguous : 'missing on condition?'
  offerShiftRequests : Association to many microsoft.graph.offerShiftRequest {  };
  @cds.ambiguous : 'missing on condition?'
  openShiftChangeRequests : Association to many microsoft.graph.openShiftChangeRequest {  };
  @cds.ambiguous : 'missing on condition?'
  openShifts : Association to many microsoft.graph.openShift {  };
  @cds.ambiguous : 'missing on condition?'
  schedulingGroups : Association to many microsoft.graph.schedulingGroup {  };
  @cds.ambiguous : 'missing on condition?'
  shifts : Association to many microsoft.graph.shift {  };
  @cds.ambiguous : 'missing on condition?'
  swapShiftsChangeRequests : Association to many microsoft.graph.swapShiftsChangeRequest {  };
  @cds.ambiguous : 'missing on condition?'
  timeOffReasons : Association to many microsoft.graph.timeOffReason {  };
  @cds.ambiguous : 'missing on condition?'
  timeOffRequests : Association to many microsoft.graph.timeOffRequest {  };
  @cds.ambiguous : 'missing on condition?'
  timesOff : Association to many microsoft.graph.timeOff {  };
};

@cds.persistence.skip : true
entity microsoft.graph.compliance {
};

@cds.persistence.skip : true
entity microsoft.graph.permissionGrants : microsoft.graph.directoryObjects {
  clientAppId : LargeString;
  clientId : LargeString;
  permission : LargeString;
  permissionType : LargeString;
  resourceAppId : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.groupSettings : microsoft.graph.entity {
  displayName : LargeString;
  templateId : LargeString;
  values : many microsoft.graph.settingValue;
};

@cds.persistence.skip : true
entity microsoft.graph.conversation : microsoft.graph.entity {
  hasAttachments : Boolean;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastDeliveredDateTime : DateTime;
  preview : LargeString;
  topic : LargeString;
  uniqueSenders : many LargeString;
  @cds.ambiguous : 'missing on condition?'
  threads : Association to many microsoft.graph.conversationThread {  };
};

@cds.persistence.skip : true
entity microsoft.graph.conversationThread : microsoft.graph.entity {
  ccRecipients : many microsoft.graph.recipient;
  hasAttachments : Boolean;
  isLocked : Boolean;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastDeliveredDateTime : DateTime;
  preview : LargeString;
  topic : LargeString;
  toRecipients : many microsoft.graph.recipient;
  uniqueSenders : many LargeString;
  @cds.ambiguous : 'missing on condition?'
  posts : Association to many microsoft.graph.post {  };
};

@cds.persistence.skip : true
entity microsoft.graph.groupLifecyclePolicies : microsoft.graph.entity {
  alternateNotificationEmails : LargeString;
  groupLifetimeInDays : Integer;
  managedGroupTypes : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.plannerGroup : microsoft.graph.entity {
  @cds.ambiguous : 'missing on condition?'
  plans : Association to many microsoft.graph.plannerPlan {  };
};

@cds.persistence.skip : true
entity microsoft.graph.security : microsoft.graph.entity {
  @cds.ambiguous : 'missing on condition?'
  cases : Association to one microsoft.graph.security.casesRoot {  };
  @cds.ambiguous : 'missing on condition?'
  alerts : Association to many microsoft.graph.alert {  };
  @cds.ambiguous : 'missing on condition?'
  secureScoreControlProfiles : Association to many microsoft.graph.secureScoreControlProfile {  };
  @cds.ambiguous : 'missing on condition?'
  secureScores : Association to many microsoft.graph.secureScore {  };
};

@cds.persistence.skip : true
entity microsoft.graph.alert : microsoft.graph.entity {
  activityGroupName : LargeString;
  alertDetections : many microsoft.graph.alertDetection;
  assignedTo : LargeString;
  azureSubscriptionId : LargeString;
  azureTenantId : LargeString;
  category : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  closedDateTime : DateTime;
  cloudAppStates : many microsoft.graph.cloudAppSecurityState;
  comments : many LargeString;
  confidence : Integer;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  description : LargeString;
  detectionIds : many LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  eventDateTime : DateTime;
  feedback : LargeString;
  fileStates : many microsoft.graph.fileSecurityState;
  historyStates : many microsoft.graph.alertHistoryState;
  hostStates : many microsoft.graph.hostSecurityState;
  incidentIds : many LargeString;
  investigationSecurityStates : many microsoft.graph.investigationSecurityState;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastEventDateTime : DateTime;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastModifiedDateTime : DateTime;
  malwareStates : many microsoft.graph.malwareState;
  messageSecurityStates : many microsoft.graph.messageSecurityState;
  networkConnections : many microsoft.graph.networkConnection;
  processes : many microsoft.graph.process;
  recommendedActions : many LargeString;
  registryKeyStates : many microsoft.graph.registryKeyState;
  securityResources : many microsoft.graph.securityResource;
  severity : LargeString;
  sourceMaterials : many LargeString;
  status : LargeString;
  tags : many LargeString;
  title : LargeString;
  triggers : many microsoft.graph.alertTrigger;
  uriClickSecurityStates : many microsoft.graph.uriClickSecurityState;
  userStates : many microsoft.graph.userSecurityState;
  vendorInformation : microsoft.graph.securityVendorInformation;
  vulnerabilityStates : many microsoft.graph.vulnerabilityState;
};

@cds.persistence.skip : true
entity microsoft.graph.secureScoreControlProfile : microsoft.graph.entity {
  actionType : LargeString;
  actionUrl : LargeString;
  azureTenantId : LargeString;
  complianceInformation : many microsoft.graph.complianceInformation;
  controlCategory : LargeString;
  controlStateUpdates : many microsoft.graph.secureScoreControlStateUpdate;
  deprecated : Boolean;
  implementationCost : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastModifiedDateTime : DateTime;
  maxScore : Double;
  rank : Integer;
  remediation : LargeString;
  remediationImpact : LargeString;
  service : LargeString;
  threats : many LargeString;
  tier : LargeString;
  title : LargeString;
  userImpact : LargeString;
  vendorInformation : microsoft.graph.securityVendorInformation;
};

@cds.persistence.skip : true
entity microsoft.graph.secureScore : microsoft.graph.entity {
  activeUserCount : Integer;
  averageComparativeScores : many microsoft.graph.averageComparativeScore;
  azureTenantId : LargeString;
  controlScores : many microsoft.graph.controlScore;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  currentScore : Double;
  enabledServices : many LargeString;
  licensedUserCount : Integer;
  maxScore : Double;
  vendorInformation : microsoft.graph.securityVendorInformation;
};

@cds.persistence.skip : true
entity microsoft.graph.itemAnalytics : microsoft.graph.entity {
  @cds.ambiguous : 'missing on condition?'
  allTime : Association to one microsoft.graph.itemActivityStat {  };
  @cds.ambiguous : 'missing on condition?'
  itemActivityStats : Association to many microsoft.graph.itemActivityStat {  };
  @cds.ambiguous : 'missing on condition?'
  lastSevenDays : Association to one microsoft.graph.itemActivityStat {  };
};

@cds.persistence.skip : true
entity microsoft.graph.columnDefinition : microsoft.graph.entity {
  boolean : microsoft.graph.booleanColumn;
  calculated : microsoft.graph.calculatedColumn;
  choice : microsoft.graph.choiceColumn;
  columnGroup : LargeString;
  contentApprovalStatus : microsoft.graph.contentApprovalStatusColumn;
  currency : microsoft.graph.currencyColumn;
  dateTime : microsoft.graph.dateTimeColumn;
  defaultValue : microsoft.graph.defaultColumnValue;
  description : LargeString;
  displayName : LargeString;
  enforceUniqueValues : Boolean;
  geolocation : microsoft.graph.geolocationColumn;
  hidden : Boolean;
  hyperlinkOrPicture : microsoft.graph.hyperlinkOrPictureColumn;
  indexed : Boolean;
  isDeletable : Boolean;
  isReorderable : Boolean;
  isSealed : Boolean;
  lookup : microsoft.graph.lookupColumn;
  name : LargeString;
  number : microsoft.graph.numberColumn;
  personOrGroup : microsoft.graph.personOrGroupColumn;
  propagateChanges : Boolean;
  readOnly : Boolean;
  required : Boolean;
  sourceContentType : microsoft.graph.contentTypeInfo;
  term : microsoft.graph.termColumn;
  text : microsoft.graph.textColumn;
  thumbnail : microsoft.graph.thumbnailColumn;
  type : LargeString;
  validation : microsoft.graph.columnValidation;
  @cds.ambiguous : 'missing on condition?'
  sourceColumn : Association to one microsoft.graph.columnDefinition {  };
};

@cds.persistence.skip : true
entity microsoft.graph.contentType : microsoft.graph.entity {
  associatedHubsUrls : many LargeString;
  description : LargeString;
  documentSet : microsoft.graph.documentSet;
  documentTemplate : microsoft.graph.documentSetContent;
  group : LargeString;
  hidden : Boolean;
  inheritedFrom : microsoft.graph.itemReference;
  isBuiltIn : Boolean;
  name : LargeString;
  order : microsoft.graph.contentTypeOrder;
  parentId : LargeString;
  propagateChanges : Boolean;
  readOnly : Boolean;
  sealed : Boolean;
  @cds.ambiguous : 'missing on condition?'
  base : Association to one microsoft.graph.contentType {  };
  @cds.ambiguous : 'missing on condition?'
  baseTypes : Association to many microsoft.graph.contentType {  };
  @cds.ambiguous : 'missing on condition?'
  columnLinks : Association to many microsoft.graph.columnLink {  };
  @cds.ambiguous : 'missing on condition?'
  columnPositions : Association to many microsoft.graph.columnDefinition {  };
  @cds.ambiguous : 'missing on condition?'
  columns : Association to many microsoft.graph.columnDefinition {  };
} actions {
  action publish();
  action unpublish();
};

@cds.persistence.skip : true
entity microsoft.graph.list : microsoft.graph.baseItem {
  displayName : LargeString;
  list : microsoft.graph.listInfo;
  sharepointIds : microsoft.graph.sharepointIds;
  system : microsoft.graph.systemFacet;
  @cds.ambiguous : 'missing on condition?'
  columns : Association to many microsoft.graph.columnDefinition {  };
  @cds.ambiguous : 'missing on condition?'
  contentTypes : Association to many microsoft.graph.contentType {  };
  @cds.ambiguous : 'missing on condition?'
  drive : Association to one microsoft.graph.drives {  };
  @cds.ambiguous : 'missing on condition?'
  items : Association to many microsoft.graph.listItem {  };
  @cds.ambiguous : 'missing on condition?'
  operations : Association to many microsoft.graph.richLongRunningOperation {  };
  @cds.ambiguous : 'missing on condition?'
  subscriptions : Association to many microsoft.graph.subscriptions {  };
};

@cds.persistence.skip : true
entity microsoft.graph.longRunningOperation : microsoft.graph.entity {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastActionDateTime : DateTime;
  resourceLocation : LargeString;
  status : LargeString;
  statusDetail : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.richLongRunningOperation : microsoft.graph.longRunningOperation {
  error : microsoft.graph.publicError;
  percentageComplete : Integer;
  resourceId : LargeString;
  type : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.permission : microsoft.graph.entity {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  expirationDateTime : DateTime;
  grantedTo : microsoft.graph.identitySet;
  grantedToIdentities : many microsoft.graph.identitySet;
  grantedToIdentitiesV2 : many microsoft.graph.sharePointIdentitySet;
  grantedToV2 : microsoft.graph.sharePointIdentitySet;
  hasPassword : Boolean;
  inheritedFrom : microsoft.graph.itemReference;
  invitation : microsoft.graph.sharingInvitation;
  link : microsoft.graph.sharingLink;
  roles : many LargeString;
  shareId : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.identityApiConnector : microsoft.graph.entity {
  authenticationConfiguration : microsoft.graph.apiAuthenticationConfigurationBase;
  displayName : LargeString;
  targetUrl : LargeString;
} actions {
  action uploadClientCertificate(
    pkcs12Value : LargeString,
    password : LargeString
  ) returns microsoft.graph.identityApiConnector;
};

@cds.persistence.skip : true
abstract entity microsoft.graph.identityProviderBase : microsoft.graph.entity {
  displayName : LargeString;
} actions {
  function availableProviderTypes() returns many LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.appleManagedIdentityProvider : microsoft.graph.identityProviderBase {
  certificateData : LargeString;
  developerId : LargeString;
  keyId : LargeString;
  serviceId : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.identityUserFlow : microsoft.graph.entity {
  userFlowType : LargeString;
  @odata.type : 'Edm.Single'
  userFlowTypeVersion : Double;
};

@cds.persistence.skip : true
entity microsoft.graph.b2xIdentityUserFlow : microsoft.graph.identityUserFlow {
  apiConnectorConfiguration : microsoft.graph.userFlowApiConnectorConfiguration;
  @cds.ambiguous : 'missing on condition?'
  identityProviders : Association to many microsoft.graph.identityProviders {  };
  @cds.ambiguous : 'missing on condition?'
  languages : Association to many microsoft.graph.userFlowLanguageConfiguration {  };
  @cds.ambiguous : 'missing on condition?'
  userAttributeAssignments : Association to many microsoft.graph.identityUserFlowAttributeAssignment {  };
  @cds.ambiguous : 'missing on condition?'
  userFlowIdentityProviders : Association to many microsoft.graph.identityProviderBase {  };
};

@cds.persistence.skip : true
entity microsoft.graph.identityProviders : microsoft.graph.entity {
  clientId : LargeString;
  clientSecret : LargeString;
  name : LargeString;
  type : LargeString;
} actions {
  function availableProviderTypes() returns many LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.userFlowLanguageConfiguration : microsoft.graph.entity {
  displayName : LargeString;
  isEnabled : Boolean;
  @cds.ambiguous : 'missing on condition?'
  defaultPages : Association to many microsoft.graph.userFlowLanguagePage {  };
  @cds.ambiguous : 'missing on condition?'
  overridesPages : Association to many microsoft.graph.userFlowLanguagePage {  };
};

@cds.persistence.skip : true
entity microsoft.graph.identityUserFlowAttributeAssignment : microsoft.graph.entity {
  displayName : LargeString;
  isOptional : Boolean;
  requiresVerification : Boolean;
  userAttributeValues : many microsoft.graph.userAttributeValuesItem;
  userInputType : LargeString;
  @cds.ambiguous : 'missing on condition?'
  userAttribute : Association to one microsoft.graph.identityUserFlowAttribute {  };
} actions {
  action setOrder(
    newAssignmentOrder : microsoft.graph.assignmentOrder
  );
  function getOrder() returns microsoft.graph.assignmentOrder;
};

@cds.persistence.skip : true
entity microsoft.graph.builtInIdentityProvider : microsoft.graph.identityProviderBase {
  identityProviderType : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.identityUserFlowAttribute : microsoft.graph.entity {
  dataType : LargeString;
  description : LargeString;
  displayName : LargeString;
  userFlowAttributeType : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.identityBuiltInUserFlowAttribute : microsoft.graph.identityUserFlowAttribute {
};

@cds.persistence.skip : true
entity microsoft.graph.identityContainer : microsoft.graph.entity {
  @cds.ambiguous : 'missing on condition?'
  apiConnectors : Association to many microsoft.graph.identityApiConnector {  };
  @cds.ambiguous : 'missing on condition?'
  b2xUserFlows : Association to many microsoft.graph.b2xIdentityUserFlow {  };
  @cds.ambiguous : 'missing on condition?'
  identityProviders : Association to many microsoft.graph.identityProviderBase {  };
  @cds.ambiguous : 'missing on condition?'
  userFlowAttributes : Association to many microsoft.graph.identityUserFlowAttribute {  };
  @cds.ambiguous : 'missing on condition?'
  conditionalAccess : Association to one microsoft.graph.conditionalAccessRoot {  };
};

@cds.persistence.skip : true
entity microsoft.graph.conditionalAccessRoot : microsoft.graph.entity {
  @cds.ambiguous : 'missing on condition?'
  namedLocations : Association to many microsoft.graph.namedLocation {  };
  @cds.ambiguous : 'missing on condition?'
  policies : Association to many microsoft.graph.conditionalAccessPolicy {  };
};

@cds.persistence.skip : true
entity microsoft.graph.identityCustomUserFlowAttribute : microsoft.graph.identityUserFlowAttribute {
};

@cds.persistence.skip : true
entity microsoft.graph.socialIdentityProvider : microsoft.graph.identityProviderBase {
  clientId : LargeString;
  clientSecret : LargeString;
  identityProviderType : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.userFlowLanguagePage : microsoft.graph.entity {
};

@cds.persistence.skip : true
entity microsoft.graph.administrativeUnit : microsoft.graph.directoryObjects {
  description : LargeString;
  displayName : LargeString;
  visibility : LargeString;
  @cds.ambiguous : 'missing on condition?'
  members : Association to many microsoft.graph.directoryObjects {  };
  @cds.ambiguous : 'missing on condition?'
  scopedRoleMembers : Association to many microsoft.graph.scopedRoleMemberships {  };
  @cds.ambiguous : 'missing on condition?'
  extensions : Association to many microsoft.graph.extension {  };
};

@cds.persistence.skip : true
entity microsoft.graph.appScope : microsoft.graph.entity {
  displayName : LargeString;
  type : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.certificateBasedAuthConfiguration : microsoft.graph.entity {
  certificateAuthorities : many microsoft.graph.certificateAuthority;
};

@cds.persistence.skip : true
entity microsoft.graph.contracts : microsoft.graph.directoryObjects {
  contractType : LargeString;
  customerId : UUID;
  defaultDomainName : LargeString;
  displayName : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.crossTenantAccessPolicyConfigurationDefault : microsoft.graph.entity {
  b2bCollaborationInbound : microsoft.graph.crossTenantAccessPolicyB2BSetting;
  b2bCollaborationOutbound : microsoft.graph.crossTenantAccessPolicyB2BSetting;
  b2bDirectConnectInbound : microsoft.graph.crossTenantAccessPolicyB2BSetting;
  b2bDirectConnectOutbound : microsoft.graph.crossTenantAccessPolicyB2BSetting;
  inboundTrust : microsoft.graph.crossTenantAccessPolicyInboundTrust;
  isServiceDefault : Boolean;
} actions {
  action resetToSystemDefault();
};

@cds.persistence.skip : true
entity microsoft.graph.crossTenantAccessPolicyConfigurationPartner {
  b2bCollaborationInbound : microsoft.graph.crossTenantAccessPolicyB2BSetting;
  b2bCollaborationOutbound : microsoft.graph.crossTenantAccessPolicyB2BSetting;
  b2bDirectConnectInbound : microsoft.graph.crossTenantAccessPolicyB2BSetting;
  b2bDirectConnectOutbound : microsoft.graph.crossTenantAccessPolicyB2BSetting;
  inboundTrust : microsoft.graph.crossTenantAccessPolicyInboundTrust;
  isServiceProvider : Boolean;
  key tenantId : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.devices : microsoft.graph.directoryObjects {
  accountEnabled : Boolean;
  alternativeSecurityIds : many microsoft.graph.alternativeSecurityId;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  approximateLastSignInDateTime : DateTime;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  complianceExpirationDateTime : DateTime;
  deviceId : LargeString;
  deviceMetadata : LargeString;
  deviceVersion : Integer;
  displayName : LargeString;
  isCompliant : Boolean;
  isManaged : Boolean;
  mdmAppId : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  onPremisesLastSyncDateTime : DateTime;
  onPremisesSyncEnabled : Boolean;
  operatingSystem : LargeString;
  operatingSystemVersion : LargeString;
  physicalIds : many LargeString;
  profileType : LargeString;
  systemLabels : many LargeString;
  trustType : LargeString;
  @cds.ambiguous : 'missing on condition?'
  memberOf : Association to many microsoft.graph.directoryObjects {  };
  @cds.ambiguous : 'missing on condition?'
  registeredOwners : Association to many microsoft.graph.directoryObjects {  };
  @cds.ambiguous : 'missing on condition?'
  registeredUsers : Association to many microsoft.graph.directoryObjects {  };
  @cds.ambiguous : 'missing on condition?'
  transitiveMemberOf : Association to many microsoft.graph.directoryObjects {  };
  @cds.ambiguous : 'missing on condition?'
  extensions : Association to many microsoft.graph.extension {  };
};

@cds.persistence.skip : true
entity microsoft.graph.directory : microsoft.graph.entity {
  @cds.ambiguous : 'missing on condition?'
  administrativeUnits : Association to many microsoft.graph.administrativeUnit {  };
  @cds.ambiguous : 'missing on condition?'
  deletedItems : Association to many microsoft.graph.directoryObjects {  };
  @cds.ambiguous : 'missing on condition?'
  federationConfigurations : Association to many microsoft.graph.identityProviderBase {  };
};

@cds.persistence.skip : true
entity microsoft.graph.directoryObjectPartnerReference : microsoft.graph.directoryObjects {
  description : LargeString;
  displayName : LargeString;
  externalPartnerTenantId : UUID;
  objectType : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.directoryRoles : microsoft.graph.directoryObjects {
  description : LargeString;
  displayName : LargeString;
  roleTemplateId : LargeString;
  @cds.ambiguous : 'missing on condition?'
  members : Association to many microsoft.graph.directoryObjects {  };
  @cds.ambiguous : 'missing on condition?'
  scopedMembers : Association to many microsoft.graph.scopedRoleMemberships {  };
};

@cds.persistence.skip : true
entity microsoft.graph.directoryRoleTemplates : microsoft.graph.directoryObjects {
  description : LargeString;
  displayName : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.domains : microsoft.graph.entity {
  authenticationType : LargeString;
  availabilityStatus : LargeString;
  isAdminManaged : Boolean;
  isDefault : Boolean;
  isInitial : Boolean;
  isRoot : Boolean;
  isVerified : Boolean;
  manufacturer : LargeString;
  model : LargeString;
  passwordNotificationWindowInDays : Integer;
  passwordValidityPeriodInDays : Integer;
  state : microsoft.graph.domainState;
  supportedServices : many LargeString;
  @cds.ambiguous : 'missing on condition?'
  domainNameReferences : Association to many microsoft.graph.directoryObjects {  };
  @cds.ambiguous : 'missing on condition?'
  federationConfiguration : Association to many microsoft.graph.internalDomainFederation {  };
  @cds.ambiguous : 'missing on condition?'
  serviceConfigurationRecords : Association to many microsoft.graph.domainDnsRecords {  };
  @cds.ambiguous : 'missing on condition?'
  verificationDnsRecords : Association to many microsoft.graph.domainDnsRecords {  };
} actions {
  action forceDelete(
    disableUserAccounts : Boolean
  );
  action verify() returns microsoft.graph.domains;
};

@cds.persistence.skip : true
abstract entity microsoft.graph.samlOrWsFedProvider : microsoft.graph.identityProviderBase {
  issuerUri : LargeString;
  metadataExchangeUri : LargeString;
  passiveSignInUri : LargeString;
  preferredAuthenticationProtocol : LargeString;
  signingCertificate : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.internalDomainFederation : microsoft.graph.samlOrWsFedProvider {
  activeSignInUri : LargeString;
  federatedIdpMfaBehavior : LargeString;
  isSignedAuthenticationRequestRequired : Boolean;
  nextSigningCertificate : LargeString;
  promptLoginBehavior : LargeString;
  signingCertificateUpdateStatus : microsoft.graph.signingCertificateUpdateStatus;
  signOutUri : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.domainDnsRecords : microsoft.graph.entity {
  isOptional : Boolean;
  label : LargeString;
  recordType : LargeString;
  supportedService : LargeString;
  ttl : Integer;
};

@cds.persistence.skip : true
entity microsoft.graph.domainDnsCnameRecord : microsoft.graph.domainDnsRecords {
  canonicalName : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.domainDnsMxRecord : microsoft.graph.domainDnsRecords {
  mailExchange : LargeString;
  preference : Integer;
};

@cds.persistence.skip : true
entity microsoft.graph.domainDnsSrvRecord : microsoft.graph.domainDnsRecords {
  nameTarget : LargeString;
  port : Integer;
  priority : Integer;
  protocol : LargeString;
  service : LargeString;
  weight : Integer;
};

@cds.persistence.skip : true
entity microsoft.graph.domainDnsTxtRecord : microsoft.graph.domainDnsRecords {
  text : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.domainDnsUnavailableRecord : microsoft.graph.domainDnsRecords {
  description : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.externalDomainName : microsoft.graph.entity {
};

@cds.persistence.skip : true
entity microsoft.graph.groupSettingTemplates : microsoft.graph.directoryObjects {
  description : LargeString;
  displayName : LargeString;
  values : many microsoft.graph.settingTemplateValue;
};

@cds.persistence.skip : true
entity microsoft.graph.organization : microsoft.graph.directoryObjects {
  assignedPlans : many microsoft.graph.assignedPlan;
  businessPhones : many LargeString;
  city : LargeString;
  country : LargeString;
  countryLetterCode : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  displayName : LargeString;
  marketingNotificationEmails : many LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  onPremisesLastSyncDateTime : DateTime;
  onPremisesSyncEnabled : Boolean;
  postalCode : LargeString;
  preferredLanguage : LargeString;
  privacyProfile : microsoft.graph.privacyProfile;
  provisionedPlans : many microsoft.graph.provisionedPlan;
  securityComplianceNotificationMails : many LargeString;
  securityComplianceNotificationPhones : many LargeString;
  state : LargeString;
  street : LargeString;
  technicalNotificationMails : many LargeString;
  tenantType : LargeString;
  verifiedDomains : many microsoft.graph.verifiedDomain;
  mobileDeviceManagementAuthority : LargeString;
  @cds.ambiguous : 'missing on condition?'
  branding : Association to one microsoft.graph.organizationalBranding {  };
  @cds.ambiguous : 'missing on condition?'
  certificateBasedAuthConfiguration : Association to many microsoft.graph.certificateBasedAuthConfiguration {  };
  @cds.ambiguous : 'missing on condition?'
  extensions : Association to many microsoft.graph.extension {  };
} actions {
  action setMobileDeviceManagementAuthority() returns Integer;
};

@cds.persistence.skip : true
abstract entity microsoft.graph.organizationalBrandingProperties : microsoft.graph.entity {
  backgroundColor : LargeString;
  @odata.type : 'Edm.Stream'
  backgroundImage : LargeBinary;
  backgroundImageRelativeUrl : LargeString;
  @odata.type : 'Edm.Stream'
  bannerLogo : LargeBinary;
  bannerLogoRelativeUrl : LargeString;
  cdnList : many LargeString;
  signInPageText : LargeString;
  @odata.type : 'Edm.Stream'
  squareLogo : LargeBinary;
  squareLogoRelativeUrl : LargeString;
  usernameHintText : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.organizationalBranding : microsoft.graph.organizationalBrandingProperties {
  @cds.ambiguous : 'missing on condition?'
  localizations : Association to many microsoft.graph.localizations {  };
};

@cds.persistence.skip : true
entity microsoft.graph.localizations : microsoft.graph.organizationalBrandingProperties {
};

@cds.persistence.skip : true
entity microsoft.graph.contacts : microsoft.graph.directoryObjects {
  addresses : many microsoft.graph.physicalOfficeAddress;
  companyName : LargeString;
  department : LargeString;
  displayName : LargeString;
  givenName : LargeString;
  jobTitle : LargeString;
  mail : LargeString;
  mailNickname : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  onPremisesLastSyncDateTime : DateTime;
  onPremisesProvisioningErrors : many microsoft.graph.onPremisesProvisioningError;
  onPremisesSyncEnabled : Boolean;
  phones : many microsoft.graph.phone;
  proxyAddresses : many LargeString;
  surname : LargeString;
  @cds.ambiguous : 'missing on condition?'
  directReports : Association to many microsoft.graph.directoryObjects {  };
  @cds.ambiguous : 'missing on condition?'
  manager : Association to one microsoft.graph.directoryObjects {  };
  @cds.ambiguous : 'missing on condition?'
  memberOf : Association to many microsoft.graph.directoryObjects {  };
  @cds.ambiguous : 'missing on condition?'
  transitiveMemberOf : Association to many microsoft.graph.directoryObjects {  };
};

@cds.persistence.skip : true
entity microsoft.graph.permissionGrantConditionSet : microsoft.graph.entity {
  clientApplicationIds : many LargeString;
  clientApplicationPublisherIds : many LargeString;
  clientApplicationsFromVerifiedPublisherOnly : Boolean;
  clientApplicationTenantIds : many LargeString;
  permissionClassification : LargeString;
  permissions : many LargeString;
  permissionType : LargeString;
  resourceApplication : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.rbacApplication : microsoft.graph.entity {
  @cds.ambiguous : 'missing on condition?'
  roleAssignments : Association to many microsoft.graph.unifiedRoleAssignment {  };
  @cds.ambiguous : 'missing on condition?'
  roleDefinitions : Association to many microsoft.graph.unifiedRoleDefinition {  };
  @cds.ambiguous : 'missing on condition?'
  roleAssignmentScheduleInstances : Association to many microsoft.graph.unifiedRoleAssignmentScheduleInstance {  };
  @cds.ambiguous : 'missing on condition?'
  roleAssignmentScheduleRequests : Association to many microsoft.graph.unifiedRoleAssignmentScheduleRequest {  };
  @cds.ambiguous : 'missing on condition?'
  roleAssignmentSchedules : Association to many microsoft.graph.unifiedRoleAssignmentSchedule {  };
  @cds.ambiguous : 'missing on condition?'
  roleEligibilityScheduleInstances : Association to many microsoft.graph.unifiedRoleEligibilityScheduleInstance {  };
  @cds.ambiguous : 'missing on condition?'
  roleEligibilityScheduleRequests : Association to many microsoft.graph.unifiedRoleEligibilityScheduleRequest {  };
  @cds.ambiguous : 'missing on condition?'
  roleEligibilitySchedules : Association to many microsoft.graph.unifiedRoleEligibilitySchedule {  };
};

@cds.persistence.skip : true
entity microsoft.graph.unifiedRoleAssignment : microsoft.graph.entity {
  appScopeId : LargeString;
  condition : LargeString;
  directoryScopeId : LargeString;
  principalId : LargeString;
  roleDefinitionId : LargeString;
  @cds.ambiguous : 'missing on condition?'
  appScope : Association to one microsoft.graph.appScope {  };
  @cds.ambiguous : 'missing on condition?'
  directoryScope : Association to one microsoft.graph.directoryObjects {  };
  @cds.ambiguous : 'missing on condition?'
  principal : Association to one microsoft.graph.directoryObjects {  };
  @cds.ambiguous : 'missing on condition?'
  roleDefinition : Association to one microsoft.graph.unifiedRoleDefinition {  };
};

@cds.persistence.skip : true
entity microsoft.graph.unifiedRoleDefinition : microsoft.graph.entity {
  description : LargeString;
  displayName : LargeString;
  isBuiltIn : Boolean;
  isEnabled : Boolean;
  resourceScopes : many LargeString;
  rolePermissions : many microsoft.graph.unifiedRolePermission;
  templateId : LargeString;
  version : LargeString;
  @cds.ambiguous : 'missing on condition?'
  inheritsPermissionsFrom : Association to many microsoft.graph.unifiedRoleDefinition {  };
};

@cds.persistence.skip : true
entity microsoft.graph.unifiedRoleScheduleInstanceBase : microsoft.graph.entity {
  appScopeId : LargeString;
  directoryScopeId : LargeString;
  principalId : LargeString;
  roleDefinitionId : LargeString;
  @cds.ambiguous : 'missing on condition?'
  appScope : Association to one microsoft.graph.appScope {  };
  @cds.ambiguous : 'missing on condition?'
  directoryScope : Association to one microsoft.graph.directoryObjects {  };
  @cds.ambiguous : 'missing on condition?'
  principal : Association to one microsoft.graph.directoryObjects {  };
  @cds.ambiguous : 'missing on condition?'
  roleDefinition : Association to one microsoft.graph.unifiedRoleDefinition {  };
};

@cds.persistence.skip : true
entity microsoft.graph.unifiedRoleAssignmentScheduleInstance : microsoft.graph.unifiedRoleScheduleInstanceBase {
  assignmentType : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  endDateTime : DateTime;
  memberType : LargeString;
  roleAssignmentOriginId : LargeString;
  roleAssignmentScheduleId : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  startDateTime : DateTime;
  @cds.ambiguous : 'missing on condition?'
  activatedUsing : Association to one microsoft.graph.unifiedRoleEligibilityScheduleInstance {  };
};

@cds.persistence.skip : true
entity microsoft.graph.request : microsoft.graph.entity {
  approvalId : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  completedDateTime : DateTime;
  createdBy : microsoft.graph.identitySet;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  customData : LargeString;
  status : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.unifiedRoleAssignmentScheduleRequest : microsoft.graph.request {
  action : LargeString;
  appScopeId : LargeString;
  directoryScopeId : LargeString;
  isValidationOnly : Boolean;
  justification : LargeString;
  principalId : LargeString;
  roleDefinitionId : LargeString;
  scheduleInfo : microsoft.graph.requestSchedule;
  targetScheduleId : LargeString;
  ticketInfo : microsoft.graph.ticketInfo;
  @cds.ambiguous : 'missing on condition?'
  activatedUsing : Association to one microsoft.graph.unifiedRoleEligibilitySchedule {  };
  @cds.ambiguous : 'missing on condition?'
  appScope : Association to one microsoft.graph.appScope {  };
  @cds.ambiguous : 'missing on condition?'
  directoryScope : Association to one microsoft.graph.directoryObjects {  };
  @cds.ambiguous : 'missing on condition?'
  principal : Association to one microsoft.graph.directoryObjects {  };
  @cds.ambiguous : 'missing on condition?'
  roleDefinition : Association to one microsoft.graph.unifiedRoleDefinition {  };
  @cds.ambiguous : 'missing on condition?'
  targetSchedule : Association to one microsoft.graph.unifiedRoleAssignmentSchedule {  };
} actions {
  action cancel();
};

@cds.persistence.skip : true
entity microsoft.graph.unifiedRoleScheduleBase : microsoft.graph.entity {
  appScopeId : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  createdUsing : LargeString;
  directoryScopeId : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  modifiedDateTime : DateTime;
  principalId : LargeString;
  roleDefinitionId : LargeString;
  status : LargeString;
  @cds.ambiguous : 'missing on condition?'
  appScope : Association to one microsoft.graph.appScope {  };
  @cds.ambiguous : 'missing on condition?'
  directoryScope : Association to one microsoft.graph.directoryObjects {  };
  @cds.ambiguous : 'missing on condition?'
  principal : Association to one microsoft.graph.directoryObjects {  };
  @cds.ambiguous : 'missing on condition?'
  roleDefinition : Association to one microsoft.graph.unifiedRoleDefinition {  };
};

@cds.persistence.skip : true
entity microsoft.graph.unifiedRoleAssignmentSchedule : microsoft.graph.unifiedRoleScheduleBase {
  assignmentType : LargeString;
  memberType : LargeString;
  scheduleInfo : microsoft.graph.requestSchedule;
  @cds.ambiguous : 'missing on condition?'
  activatedUsing : Association to one microsoft.graph.unifiedRoleEligibilitySchedule {  };
};

@cds.persistence.skip : true
entity microsoft.graph.unifiedRoleEligibilityScheduleInstance : microsoft.graph.unifiedRoleScheduleInstanceBase {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  endDateTime : DateTime;
  memberType : LargeString;
  roleEligibilityScheduleId : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  startDateTime : DateTime;
};

@cds.persistence.skip : true
entity microsoft.graph.unifiedRoleEligibilityScheduleRequest : microsoft.graph.request {
  action : LargeString;
  appScopeId : LargeString;
  directoryScopeId : LargeString;
  isValidationOnly : Boolean;
  justification : LargeString;
  principalId : LargeString;
  roleDefinitionId : LargeString;
  scheduleInfo : microsoft.graph.requestSchedule;
  targetScheduleId : LargeString;
  ticketInfo : microsoft.graph.ticketInfo;
  @cds.ambiguous : 'missing on condition?'
  appScope : Association to one microsoft.graph.appScope {  };
  @cds.ambiguous : 'missing on condition?'
  directoryScope : Association to one microsoft.graph.directoryObjects {  };
  @cds.ambiguous : 'missing on condition?'
  principal : Association to one microsoft.graph.directoryObjects {  };
  @cds.ambiguous : 'missing on condition?'
  roleDefinition : Association to one microsoft.graph.unifiedRoleDefinition {  };
  @cds.ambiguous : 'missing on condition?'
  targetSchedule : Association to one microsoft.graph.unifiedRoleEligibilitySchedule {  };
} actions {
  action cancel();
};

@cds.persistence.skip : true
entity microsoft.graph.unifiedRoleEligibilitySchedule : microsoft.graph.unifiedRoleScheduleBase {
  memberType : LargeString;
  scheduleInfo : microsoft.graph.requestSchedule;
};

@cds.persistence.skip : true
entity microsoft.graph.roleManagement {
  @cds.ambiguous : 'missing on condition?'
  directory : Association to one microsoft.graph.rbacApplication {  };
  @cds.ambiguous : 'missing on condition?'
  entitlementManagement : Association to one microsoft.graph.rbacApplication {  };
};

@cds.persistence.skip : true
entity microsoft.graph.samlOrWsFedExternalDomainFederation : microsoft.graph.samlOrWsFedProvider {
  @cds.ambiguous : 'missing on condition?'
  domains : Association to many microsoft.graph.externalDomainName {  };
};

@cds.persistence.skip : true
entity microsoft.graph.subscribedSkus : microsoft.graph.entity {
  appliesTo : LargeString;
  capabilityStatus : LargeString;
  consumedUnits : Integer;
  prepaidUnits : microsoft.graph.licenseUnitsDetail;
  servicePlans : many microsoft.graph.servicePlanInfo;
  skuId : UUID;
  skuPartNumber : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.educationAssignment : microsoft.graph.entity {
  addedStudentAction : LargeString;
  addToCalendarAction : LargeString;
  allowLateSubmissions : Boolean;
  allowStudentsToAddResourcesToSubmission : Boolean;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  assignDateTime : DateTime;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  assignedDateTime : DateTime;
  assignTo : microsoft.graph.educationAssignmentRecipient;
  classId : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  closeDateTime : DateTime;
  createdBy : microsoft.graph.identitySet;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  displayName : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  dueDateTime : DateTime;
  grading : microsoft.graph.educationAssignmentGradeType;
  instructions : microsoft.graph.educationItemBody;
  lastModifiedBy : microsoft.graph.identitySet;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastModifiedDateTime : DateTime;
  notificationChannelUrl : LargeString;
  resourcesFolderUrl : LargeString;
  status : LargeString;
  webUrl : LargeString;
  @cds.ambiguous : 'missing on condition?'
  categories : Association to many microsoft.graph.educationCategory {  };
  @cds.ambiguous : 'missing on condition?'
  resources : Association to many microsoft.graph.educationAssignmentResource {  };
  @cds.ambiguous : 'missing on condition?'
  rubric : Association to one microsoft.graph.educationRubric {  };
  @cds.ambiguous : 'missing on condition?'
  submissions : Association to many microsoft.graph.educationSubmission {  };
} actions {
  action publish() returns microsoft.graph.educationAssignment;
};

@cds.persistence.skip : true
entity microsoft.graph.educationCategory : microsoft.graph.entity {
  displayName : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.educationAssignmentResource : microsoft.graph.entity {
  distributeForStudentWork : Boolean;
  resource : microsoft.graph.educationResource;
};

@cds.persistence.skip : true
entity microsoft.graph.educationRubric : microsoft.graph.entity {
  createdBy : microsoft.graph.identitySet;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  description : microsoft.graph.educationItemBody;
  displayName : LargeString;
  grading : microsoft.graph.educationAssignmentGradeType;
  lastModifiedBy : microsoft.graph.identitySet;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastModifiedDateTime : DateTime;
  levels : many microsoft.graph.rubricLevel;
  qualities : many microsoft.graph.rubricQuality;
};

@cds.persistence.skip : true
entity microsoft.graph.educationSubmission : microsoft.graph.entity {
  reassignedBy : microsoft.graph.identitySet;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  reassignedDateTime : DateTime;
  recipient : microsoft.graph.educationSubmissionRecipient;
  resourcesFolderUrl : LargeString;
  returnedBy : microsoft.graph.identitySet;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  returnedDateTime : DateTime;
  status : LargeString;
  submittedBy : microsoft.graph.identitySet;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  submittedDateTime : DateTime;
  unsubmittedBy : microsoft.graph.identitySet;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  unsubmittedDateTime : DateTime;
  @cds.ambiguous : 'missing on condition?'
  outcomes : Association to many microsoft.graph.educationOutcome {  };
  @cds.ambiguous : 'missing on condition?'
  resources : Association to many microsoft.graph.educationSubmissionResource {  };
  @cds.ambiguous : 'missing on condition?'
  submittedResources : Association to many microsoft.graph.educationSubmissionResource {  };
};

@cds.persistence.skip : true
entity microsoft.graph.educationAssignmentDefaults : microsoft.graph.entity {
  addedStudentAction : LargeString;
  addToCalendarAction : LargeString;
  dueTime : Time;
  notificationChannelUrl : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.educationAssignmentSettings : microsoft.graph.entity {
  submissionAnimationDisabled : Boolean;
};

@cds.persistence.skip : true
entity microsoft.graph.educationClass : microsoft.graph.entity {
  classCode : LargeString;
  course : microsoft.graph.educationCourse;
  createdBy : microsoft.graph.identitySet;
  description : LargeString;
  displayName : LargeString;
  externalId : LargeString;
  externalName : LargeString;
  externalSource : LargeString;
  externalSourceDetail : LargeString;
  grade : LargeString;
  mailNickname : LargeString;
  term : microsoft.graph.educationTerm;
  @cds.ambiguous : 'missing on condition?'
  assignmentCategories : Association to many microsoft.graph.educationCategory {  };
  @cds.ambiguous : 'missing on condition?'
  assignmentDefaults : Association to one microsoft.graph.educationAssignmentDefaults {  };
  @cds.ambiguous : 'missing on condition?'
  assignments : Association to many microsoft.graph.educationAssignment {  };
  @cds.ambiguous : 'missing on condition?'
  assignmentSettings : Association to one microsoft.graph.educationAssignmentSettings {  };
  @cds.ambiguous : 'missing on condition?'
  group : Association to one microsoft.graph.groups {  };
  @cds.ambiguous : 'missing on condition?'
  members : Association to many microsoft.graph.educationUser {  };
  @cds.ambiguous : 'missing on condition?'
  schools : Association to many microsoft.graph.educationSchool {  };
  @cds.ambiguous : 'missing on condition?'
  teachers : Association to many microsoft.graph.educationUser {  };
};

@cds.persistence.skip : true
entity microsoft.graph.educationUser : microsoft.graph.entity {
  relatedContacts : many microsoft.graph.relatedContact;
  accountEnabled : Boolean;
  assignedLicenses : many microsoft.graph.assignedLicense;
  assignedPlans : many microsoft.graph.assignedPlan;
  businessPhones : many LargeString;
  createdBy : microsoft.graph.identitySet;
  department : LargeString;
  displayName : LargeString;
  externalSource : LargeString;
  externalSourceDetail : LargeString;
  givenName : LargeString;
  mail : LargeString;
  mailingAddress : microsoft.graph.physicalAddress;
  mailNickname : LargeString;
  middleName : LargeString;
  mobilePhone : LargeString;
  officeLocation : LargeString;
  onPremisesInfo : microsoft.graph.educationOnPremisesInfo;
  passwordPolicies : LargeString;
  passwordProfile : microsoft.graph.passwordProfile;
  preferredLanguage : LargeString;
  primaryRole : LargeString;
  provisionedPlans : many microsoft.graph.provisionedPlan;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  refreshTokensValidFromDateTime : DateTime;
  residenceAddress : microsoft.graph.physicalAddress;
  showInAddressList : Boolean;
  student : microsoft.graph.educationStudent;
  surname : LargeString;
  teacher : microsoft.graph.educationTeacher;
  usageLocation : LargeString;
  userPrincipalName : LargeString;
  userType : LargeString;
  @cds.ambiguous : 'missing on condition?'
  assignments : Association to many microsoft.graph.educationAssignment {  };
  @cds.ambiguous : 'missing on condition?'
  rubrics : Association to many microsoft.graph.educationRubric {  };
  @cds.ambiguous : 'missing on condition?'
  classes : Association to many microsoft.graph.educationClass {  };
  @cds.ambiguous : 'missing on condition?'
  schools : Association to many microsoft.graph.educationSchool {  };
  @cds.ambiguous : 'missing on condition?'
  taughtClasses : Association to many microsoft.graph.educationClass {  };
  @cds.ambiguous : 'missing on condition?'
  user : Association to one microsoft.graph.users {  };
};

@cds.persistence.skip : true
abstract entity microsoft.graph.educationOrganization : microsoft.graph.entity {
  description : LargeString;
  displayName : LargeString;
  externalSource : LargeString;
  externalSourceDetail : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.educationSchool : microsoft.graph.educationOrganization {
  address : microsoft.graph.physicalAddress;
  createdBy : microsoft.graph.identitySet;
  externalId : LargeString;
  externalPrincipalId : LargeString;
  fax : LargeString;
  highestGrade : LargeString;
  lowestGrade : LargeString;
  phone : LargeString;
  principalEmail : LargeString;
  principalName : LargeString;
  schoolNumber : LargeString;
  @cds.ambiguous : 'missing on condition?'
  administrativeUnit : Association to one microsoft.graph.administrativeUnit {  };
  @cds.ambiguous : 'missing on condition?'
  classes : Association to many microsoft.graph.educationClass {  };
  @cds.ambiguous : 'missing on condition?'
  users : Association to many microsoft.graph.educationUser {  };
};

@cds.persistence.skip : true
abstract entity microsoft.graph.educationOutcome : microsoft.graph.entity {
  lastModifiedBy : microsoft.graph.identitySet;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastModifiedDateTime : DateTime;
};

@cds.persistence.skip : true
entity microsoft.graph.educationFeedbackOutcome : microsoft.graph.educationOutcome {
  feedback : microsoft.graph.educationFeedback;
  publishedFeedback : microsoft.graph.educationFeedback;
};

@cds.persistence.skip : true
entity microsoft.graph.educationPointsOutcome : microsoft.graph.educationOutcome {
  points : microsoft.graph.educationAssignmentPointsGrade;
  publishedPoints : microsoft.graph.educationAssignmentPointsGrade;
};

@cds.persistence.skip : true
entity microsoft.graph.educationRoot {
  @cds.ambiguous : 'missing on condition?'
  classes : Association to many microsoft.graph.educationClass {  };
  @cds.ambiguous : 'missing on condition?'
  me : Association to one microsoft.graph.educationUser {  };
  @cds.ambiguous : 'missing on condition?'
  schools : Association to many microsoft.graph.educationSchool {  };
  @cds.ambiguous : 'missing on condition?'
  users : Association to many microsoft.graph.educationUser {  };
};

@cds.persistence.skip : true
entity microsoft.graph.educationRubricOutcome : microsoft.graph.educationOutcome {
  publishedRubricQualityFeedback : many microsoft.graph.rubricQualityFeedbackModel;
  publishedRubricQualitySelectedLevels : many microsoft.graph.rubricQualitySelectedColumnModel;
  rubricQualityFeedback : many microsoft.graph.rubricQualityFeedbackModel;
  rubricQualitySelectedLevels : many microsoft.graph.rubricQualitySelectedColumnModel;
};

@cds.persistence.skip : true
entity microsoft.graph.educationSubmissionResource : microsoft.graph.entity {
  assignmentResourceUrl : LargeString;
  resource : microsoft.graph.educationResource;
};

@cds.persistence.skip : true
entity microsoft.graph.driveItem : microsoft.graph.baseItem {
  audio : microsoft.graph.audio;
  bundle : microsoft.graph.bundle;
  @odata.type : 'Edm.Stream'
  content : LargeBinary;
  cTag : LargeString;
  deleted : microsoft.graph.deleted;
  file : microsoft.graph.file;
  fileSystemInfo : microsoft.graph.fileSystemInfo;
  folder : microsoft.graph.folder;
  image : microsoft.graph.image;
  location : microsoft.graph.geoCoordinates;
  malware : microsoft.graph.malware;
  package : microsoft.graph.package;
  pendingOperations : microsoft.graph.pendingOperations;
  photo : microsoft.graph.photo;
  publication : microsoft.graph.publicationFacet;
  remoteItem : microsoft.graph.remoteItem;
  root : microsoft.graph.root;
  searchResult : microsoft.graph.searchResult;
  shared : microsoft.graph.shared;
  sharepointIds : microsoft.graph.sharepointIds;
  size : Integer64;
  specialFolder : microsoft.graph.specialFolder;
  video : microsoft.graph.video;
  webDavUrl : LargeString;
  @cds.ambiguous : 'missing on condition?'
  workbook : Association to one microsoft.graph.workbook {  };
  @cds.ambiguous : 'missing on condition?'
  analytics : Association to one microsoft.graph.itemAnalytics {  };
  @cds.ambiguous : 'missing on condition?'
  children : Association to many microsoft.graph.driveItem {  };
  @cds.ambiguous : 'missing on condition?'
  listItem : Association to one microsoft.graph.listItem {  };
  @cds.ambiguous : 'missing on condition?'
  permissions : Association to many microsoft.graph.permission {  };
  @cds.ambiguous : 'missing on condition?'
  subscriptions : Association to many microsoft.graph.subscriptions {  };
  @cds.ambiguous : 'missing on condition?'
  thumbnails : Association to many microsoft.graph.thumbnailSet {  };
  @cds.ambiguous : 'missing on condition?'
  versions : Association to many microsoft.graph.driveItemVersion {  };
} actions {
  action restore(
    parentReference : microsoft.graph.itemReference,
    name : LargeString
  ) returns microsoft.graph.driveItem;
};

@cds.persistence.skip : true
entity microsoft.graph.workbook : microsoft.graph.entity {
  @cds.ambiguous : 'missing on condition?'
  application : Association to one microsoft.graph.workbookApplication {  };
  @cds.ambiguous : 'missing on condition?'
  comments : Association to many microsoft.graph.workbookComment {  };
  @cds.ambiguous : 'missing on condition?'
  functions : Association to one microsoft.graph.workbookFunctions {  };
  @cds.ambiguous : 'missing on condition?'
  names : Association to many microsoft.graph.workbookNamedItem {  };
  @cds.ambiguous : 'missing on condition?'
  operations : Association to many microsoft.graph.workbookOperation {  };
  @cds.ambiguous : 'missing on condition?'
  tables : Association to many microsoft.graph.workbookTable {  };
  @cds.ambiguous : 'missing on condition?'
  worksheets : Association to many microsoft.graph.workbookWorksheet {  };
};

@cds.persistence.skip : true
entity microsoft.graph.listItem : microsoft.graph.baseItem {
  contentType : microsoft.graph.contentTypeInfo;
  sharepointIds : microsoft.graph.sharepointIds;
  @cds.ambiguous : 'missing on condition?'
  analytics : Association to one microsoft.graph.itemAnalytics {  };
  @cds.ambiguous : 'missing on condition?'
  documentSetVersions : Association to many microsoft.graph.documentSetVersion {  };
  @cds.ambiguous : 'missing on condition?'
  driveItem : Association to one microsoft.graph.driveItem {  };
  @cds.ambiguous : 'missing on condition?'
  fields : Association to one microsoft.graph.fieldValueSet {  };
  @cds.ambiguous : 'missing on condition?'
  versions : Association to many microsoft.graph.listItemVersion {  };
};

@cds.persistence.skip : true
entity microsoft.graph.subscriptions : microsoft.graph.entity {
  applicationId : LargeString;
  changeType : LargeString;
  clientState : LargeString;
  creatorId : LargeString;
  encryptionCertificate : LargeString;
  encryptionCertificateId : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  expirationDateTime : DateTime;
  includeResourceData : Boolean;
  latestSupportedTlsVersion : LargeString;
  lifecycleNotificationUrl : LargeString;
  notificationQueryOptions : LargeString;
  notificationUrl : LargeString;
  notificationUrlAppId : LargeString;
  resource : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.thumbnailSet : microsoft.graph.entity {
  large : microsoft.graph.thumbnail;
  medium : microsoft.graph.thumbnail;
  small : microsoft.graph.thumbnail;
  source : microsoft.graph.thumbnail;
};

@cds.persistence.skip : true
abstract entity microsoft.graph.baseItemVersion : microsoft.graph.entity {
  lastModifiedBy : microsoft.graph.identitySet;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastModifiedDateTime : DateTime;
  publication : microsoft.graph.publicationFacet;
};

@cds.persistence.skip : true
entity microsoft.graph.driveItemVersion : microsoft.graph.baseItemVersion {
  @odata.type : 'Edm.Stream'
  content : LargeBinary;
  size : Integer64;
};

@cds.persistence.skip : true
entity microsoft.graph.workbookApplication : microsoft.graph.entity {
  calculationMode : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.workbookComment : microsoft.graph.entity {
  content : LargeString;
  contentType : LargeString;
  @cds.ambiguous : 'missing on condition?'
  replies : Association to many microsoft.graph.workbookCommentReply {  };
};

@cds.persistence.skip : true
entity microsoft.graph.workbookFunctions : microsoft.graph.entity {
};

@cds.persistence.skip : true
entity microsoft.graph.workbookNamedItem : microsoft.graph.entity {
  comment : LargeString;
  name : LargeString;
  scope : LargeString;
  type : LargeString;
  value : microsoft.graph.Json;
  visible : Boolean;
  @cds.ambiguous : 'missing on condition?'
  worksheet : Association to one microsoft.graph.workbookWorksheet {  };
};

@cds.persistence.skip : true
entity microsoft.graph.workbookOperation : microsoft.graph.entity {
  error : microsoft.graph.workbookOperationError;
  resourceLocation : LargeString;
  status : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.workbookTable : microsoft.graph.entity {
  highlightFirstColumn : Boolean;
  highlightLastColumn : Boolean;
  legacyId : LargeString;
  name : LargeString;
  showBandedColumns : Boolean;
  showBandedRows : Boolean;
  showFilterButton : Boolean;
  showHeaders : Boolean;
  showTotals : Boolean;
  style : LargeString;
  @cds.ambiguous : 'missing on condition?'
  columns : Association to many microsoft.graph.workbookTableColumn {  };
  @cds.ambiguous : 'missing on condition?'
  rows : Association to many microsoft.graph.workbookTableRow {  };
  @cds.ambiguous : 'missing on condition?'
  sort : Association to one microsoft.graph.workbookTableSort {  };
  @cds.ambiguous : 'missing on condition?'
  worksheet : Association to one microsoft.graph.workbookWorksheet {  };
};

@cds.persistence.skip : true
entity microsoft.graph.workbookWorksheet : microsoft.graph.entity {
  name : LargeString;
  position : Integer;
  visibility : LargeString;
  @cds.ambiguous : 'missing on condition?'
  charts : Association to many microsoft.graph.workbookChart {  };
  @cds.ambiguous : 'missing on condition?'
  names : Association to many microsoft.graph.workbookNamedItem {  };
  @cds.ambiguous : 'missing on condition?'
  pivotTables : Association to many microsoft.graph.workbookPivotTable {  };
  @cds.ambiguous : 'missing on condition?'
  protection : Association to one microsoft.graph.workbookWorksheetProtection {  };
  @cds.ambiguous : 'missing on condition?'
  tables : Association to many microsoft.graph.workbookTable {  };
};

@cds.persistence.skip : true
entity microsoft.graph.workbookChart : microsoft.graph.entity {
  height : Double;
  left : Double;
  name : LargeString;
  top : Double;
  width : Double;
  @cds.ambiguous : 'missing on condition?'
  axes : Association to one microsoft.graph.workbookChartAxes {  };
  @cds.ambiguous : 'missing on condition?'
  dataLabels : Association to one microsoft.graph.workbookChartDataLabels {  };
  @cds.ambiguous : 'missing on condition?'
  format : Association to one microsoft.graph.workbookChartAreaFormat {  };
  @cds.ambiguous : 'missing on condition?'
  legend : Association to one microsoft.graph.workbookChartLegend {  };
  @cds.ambiguous : 'missing on condition?'
  series : Association to many microsoft.graph.workbookChartSeries {  };
  @cds.ambiguous : 'missing on condition?'
  title : Association to one microsoft.graph.workbookChartTitle {  };
  @cds.ambiguous : 'missing on condition?'
  worksheet : Association to one microsoft.graph.workbookWorksheet {  };
};

@cds.persistence.skip : true
entity microsoft.graph.workbookChartAxes : microsoft.graph.entity {
  @cds.ambiguous : 'missing on condition?'
  categoryAxis : Association to one microsoft.graph.workbookChartAxis {  };
  @cds.ambiguous : 'missing on condition?'
  seriesAxis : Association to one microsoft.graph.workbookChartAxis {  };
  @cds.ambiguous : 'missing on condition?'
  valueAxis : Association to one microsoft.graph.workbookChartAxis {  };
};

@cds.persistence.skip : true
entity microsoft.graph.workbookChartDataLabels : microsoft.graph.entity {
  position : LargeString;
  separator : LargeString;
  showBubbleSize : Boolean;
  showCategoryName : Boolean;
  showLegendKey : Boolean;
  showPercentage : Boolean;
  showSeriesName : Boolean;
  showValue : Boolean;
  @cds.ambiguous : 'missing on condition?'
  format : Association to one microsoft.graph.workbookChartDataLabelFormat {  };
};

@cds.persistence.skip : true
entity microsoft.graph.workbookChartAreaFormat : microsoft.graph.entity {
  @cds.ambiguous : 'missing on condition?'
  fill : Association to one microsoft.graph.workbookChartFill {  };
  @cds.ambiguous : 'missing on condition?'
  font : Association to one microsoft.graph.workbookChartFont {  };
};

@cds.persistence.skip : true
entity microsoft.graph.workbookChartLegend : microsoft.graph.entity {
  overlay : Boolean;
  position : LargeString;
  visible : Boolean;
  @cds.ambiguous : 'missing on condition?'
  format : Association to one microsoft.graph.workbookChartLegendFormat {  };
};

@cds.persistence.skip : true
entity microsoft.graph.workbookChartSeries : microsoft.graph.entity {
  name : LargeString;
  @cds.ambiguous : 'missing on condition?'
  format : Association to one microsoft.graph.workbookChartSeriesFormat {  };
  @cds.ambiguous : 'missing on condition?'
  points : Association to many microsoft.graph.workbookChartPoint {  };
};

@cds.persistence.skip : true
entity microsoft.graph.workbookChartTitle : microsoft.graph.entity {
  overlay : Boolean;
  text : LargeString;
  visible : Boolean;
  @cds.ambiguous : 'missing on condition?'
  format : Association to one microsoft.graph.workbookChartTitleFormat {  };
};

@cds.persistence.skip : true
entity microsoft.graph.workbookChartFill : microsoft.graph.entity {
};

@cds.persistence.skip : true
entity microsoft.graph.workbookChartFont : microsoft.graph.entity {
  bold : Boolean;
  color : LargeString;
  italic : Boolean;
  name : LargeString;
  size : Double;
  underline : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.workbookChartAxis : microsoft.graph.entity {
  majorUnit : microsoft.graph.Json;
  maximum : microsoft.graph.Json;
  minimum : microsoft.graph.Json;
  minorUnit : microsoft.graph.Json;
  @cds.ambiguous : 'missing on condition?'
  format : Association to one microsoft.graph.workbookChartAxisFormat {  };
  @cds.ambiguous : 'missing on condition?'
  majorGridlines : Association to one microsoft.graph.workbookChartGridlines {  };
  @cds.ambiguous : 'missing on condition?'
  minorGridlines : Association to one microsoft.graph.workbookChartGridlines {  };
  @cds.ambiguous : 'missing on condition?'
  title : Association to one microsoft.graph.workbookChartAxisTitle {  };
};

@cds.persistence.skip : true
entity microsoft.graph.workbookChartAxisFormat : microsoft.graph.entity {
  @cds.ambiguous : 'missing on condition?'
  font : Association to one microsoft.graph.workbookChartFont {  };
  @cds.ambiguous : 'missing on condition?'
  line : Association to one microsoft.graph.workbookChartLineFormat {  };
};

@cds.persistence.skip : true
entity microsoft.graph.workbookChartGridlines : microsoft.graph.entity {
  visible : Boolean;
  @cds.ambiguous : 'missing on condition?'
  format : Association to one microsoft.graph.workbookChartGridlinesFormat {  };
};

@cds.persistence.skip : true
entity microsoft.graph.workbookChartAxisTitle : microsoft.graph.entity {
  text : LargeString;
  visible : Boolean;
  @cds.ambiguous : 'missing on condition?'
  format : Association to one microsoft.graph.workbookChartAxisTitleFormat {  };
};

@cds.persistence.skip : true
entity microsoft.graph.workbookChartLineFormat : microsoft.graph.entity {
  color : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.workbookChartAxisTitleFormat : microsoft.graph.entity {
  @cds.ambiguous : 'missing on condition?'
  font : Association to one microsoft.graph.workbookChartFont {  };
};

@cds.persistence.skip : true
entity microsoft.graph.workbookChartDataLabelFormat : microsoft.graph.entity {
  @cds.ambiguous : 'missing on condition?'
  fill : Association to one microsoft.graph.workbookChartFill {  };
  @cds.ambiguous : 'missing on condition?'
  font : Association to one microsoft.graph.workbookChartFont {  };
};

@cds.persistence.skip : true
entity microsoft.graph.workbookChartGridlinesFormat : microsoft.graph.entity {
  @cds.ambiguous : 'missing on condition?'
  line : Association to one microsoft.graph.workbookChartLineFormat {  };
};

@cds.persistence.skip : true
entity microsoft.graph.workbookChartLegendFormat : microsoft.graph.entity {
  @cds.ambiguous : 'missing on condition?'
  fill : Association to one microsoft.graph.workbookChartFill {  };
  @cds.ambiguous : 'missing on condition?'
  font : Association to one microsoft.graph.workbookChartFont {  };
};

@cds.persistence.skip : true
entity microsoft.graph.workbookChartPoint : microsoft.graph.entity {
  value : microsoft.graph.Json;
  @cds.ambiguous : 'missing on condition?'
  format : Association to one microsoft.graph.workbookChartPointFormat {  };
};

@cds.persistence.skip : true
entity microsoft.graph.workbookChartPointFormat : microsoft.graph.entity {
  @cds.ambiguous : 'missing on condition?'
  fill : Association to one microsoft.graph.workbookChartFill {  };
};

@cds.persistence.skip : true
entity microsoft.graph.workbookChartSeriesFormat : microsoft.graph.entity {
  @cds.ambiguous : 'missing on condition?'
  fill : Association to one microsoft.graph.workbookChartFill {  };
  @cds.ambiguous : 'missing on condition?'
  line : Association to one microsoft.graph.workbookChartLineFormat {  };
};

@cds.persistence.skip : true
entity microsoft.graph.workbookChartTitleFormat : microsoft.graph.entity {
  @cds.ambiguous : 'missing on condition?'
  fill : Association to one microsoft.graph.workbookChartFill {  };
  @cds.ambiguous : 'missing on condition?'
  font : Association to one microsoft.graph.workbookChartFont {  };
};

@cds.persistence.skip : true
entity microsoft.graph.workbookCommentReply : microsoft.graph.entity {
  content : LargeString;
  contentType : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.workbookFilter : microsoft.graph.entity {
  criteria : microsoft.graph.workbookFilterCriteria;
};

@cds.persistence.skip : true
entity microsoft.graph.workbookFormatProtection : microsoft.graph.entity {
  formulaHidden : Boolean;
  locked : Boolean;
};

@cds.persistence.skip : true
entity microsoft.graph.workbookFunctionResult : microsoft.graph.entity {
  error : LargeString;
  value : microsoft.graph.Json;
};

@cds.persistence.skip : true
entity microsoft.graph.workbookPivotTable : microsoft.graph.entity {
  name : LargeString;
  @cds.ambiguous : 'missing on condition?'
  worksheet : Association to one microsoft.graph.workbookWorksheet {  };
};

@cds.persistence.skip : true
entity microsoft.graph.workbookRange : microsoft.graph.entity {
  address : LargeString;
  addressLocal : LargeString;
  cellCount : Integer;
  columnCount : Integer;
  columnHidden : Boolean;
  columnIndex : Integer;
  formulas : microsoft.graph.Json;
  formulasLocal : microsoft.graph.Json;
  formulasR1C1 : microsoft.graph.Json;
  hidden : Boolean;
  numberFormat : microsoft.graph.Json;
  rowCount : Integer;
  rowHidden : Boolean;
  rowIndex : Integer;
  text : microsoft.graph.Json;
  values : microsoft.graph.Json;
  valueTypes : microsoft.graph.Json;
  @cds.ambiguous : 'missing on condition?'
  format : Association to one microsoft.graph.workbookRangeFormat {  };
  @cds.ambiguous : 'missing on condition?'
  sort : Association to one microsoft.graph.workbookRangeSort {  };
  @cds.ambiguous : 'missing on condition?'
  worksheet : Association to one microsoft.graph.workbookWorksheet {  };
};

@cds.persistence.skip : true
entity microsoft.graph.workbookRangeFormat : microsoft.graph.entity {
  columnWidth : Double;
  horizontalAlignment : LargeString;
  rowHeight : Double;
  verticalAlignment : LargeString;
  wrapText : Boolean;
  @cds.ambiguous : 'missing on condition?'
  borders : Association to many microsoft.graph.workbookRangeBorder {  };
  @cds.ambiguous : 'missing on condition?'
  fill : Association to one microsoft.graph.workbookRangeFill {  };
  @cds.ambiguous : 'missing on condition?'
  font : Association to one microsoft.graph.workbookRangeFont {  };
  @cds.ambiguous : 'missing on condition?'
  protection : Association to one microsoft.graph.workbookFormatProtection {  };
};

@cds.persistence.skip : true
entity microsoft.graph.workbookRangeSort : microsoft.graph.entity {
};

@cds.persistence.skip : true
entity microsoft.graph.workbookRangeBorder : microsoft.graph.entity {
  color : LargeString;
  sideIndex : LargeString;
  style : LargeString;
  weight : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.workbookRangeFill : microsoft.graph.entity {
  color : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.workbookRangeFont : microsoft.graph.entity {
  bold : Boolean;
  color : LargeString;
  italic : Boolean;
  name : LargeString;
  size : Double;
  underline : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.workbookRangeView : microsoft.graph.entity {
  cellAddresses : microsoft.graph.Json;
  columnCount : Integer;
  formulas : microsoft.graph.Json;
  formulasLocal : microsoft.graph.Json;
  formulasR1C1 : microsoft.graph.Json;
  index : Integer;
  numberFormat : microsoft.graph.Json;
  rowCount : Integer;
  text : microsoft.graph.Json;
  values : microsoft.graph.Json;
  valueTypes : microsoft.graph.Json;
  @cds.ambiguous : 'missing on condition?'
  rows : Association to many microsoft.graph.workbookRangeView {  };
};

@cds.persistence.skip : true
entity microsoft.graph.workbookTableColumn : microsoft.graph.entity {
  index : Integer;
  name : LargeString;
  values : microsoft.graph.Json;
  @cds.ambiguous : 'missing on condition?'
  filter : Association to one microsoft.graph.workbookFilter {  };
};

@cds.persistence.skip : true
entity microsoft.graph.workbookTableRow : microsoft.graph.entity {
  index : Integer;
  values : microsoft.graph.Json;
};

@cds.persistence.skip : true
entity microsoft.graph.workbookTableSort : microsoft.graph.entity {
  fields : many microsoft.graph.workbookSortField;
  matchCase : Boolean;
  method : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.workbookWorksheetProtection : microsoft.graph.entity {
  options : microsoft.graph.workbookWorksheetProtectionOptions;
  protected : Boolean;
};

@cds.persistence.skip : true
abstract entity microsoft.graph.places : microsoft.graph.entity {
  address : microsoft.graph.physicalAddress;
  displayName : LargeString;
  geoCoordinates : microsoft.graph.outlookGeoCoordinates;
  phone : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.room : microsoft.graph.places {
  audioDeviceName : LargeString;
  bookingType : LargeString;
  building : LargeString;
  capacity : Integer;
  displayDeviceName : LargeString;
  emailAddress : LargeString;
  floorLabel : LargeString;
  floorNumber : Integer;
  isWheelChairAccessible : Boolean;
  label : LargeString;
  nickname : LargeString;
  tags : many LargeString;
  videoDeviceName : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.roomList : microsoft.graph.places {
  emailAddress : LargeString;
  @cds.ambiguous : 'missing on condition?'
  rooms : Association to many microsoft.graph.room {  };
};

@cds.persistence.skip : true
abstract entity microsoft.graph.attachment : microsoft.graph.entity {
  contentType : LargeString;
  isInline : Boolean;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastModifiedDateTime : DateTime;
  name : LargeString;
  size : Integer;
};

@cds.persistence.skip : true
entity microsoft.graph.calendarPermission : microsoft.graph.entity {
  allowedRoles : LargeString;
  emailAddress : microsoft.graph.emailAddress;
  isInsideOrganization : Boolean;
  isRemovable : Boolean;
  role : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.multiValueLegacyExtendedProperty : microsoft.graph.entity {
  value : many LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.singleValueLegacyExtendedProperty : microsoft.graph.entity {
  value : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.calendarSharingMessage : microsoft.graph.message {
  canAccept : Boolean;
  sharingMessageAction : microsoft.graph.calendarSharingMessageAction;
  sharingMessageActions : many microsoft.graph.calendarSharingMessageAction;
  suggestedCalendarName : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.post : microsoft.graph.outlookItem {
  body : microsoft.graph.itemBody;
  conversationId : LargeString;
  conversationThreadId : LargeString;
  ![from] : microsoft.graph.recipient;
  hasAttachments : Boolean;
  newParticipants : many microsoft.graph.recipient;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  receivedDateTime : DateTime;
  sender : microsoft.graph.recipient;
  @cds.ambiguous : 'missing on condition?'
  attachments : Association to many microsoft.graph.attachment {  };
  @cds.ambiguous : 'missing on condition?'
  extensions : Association to many microsoft.graph.extension {  };
  @cds.ambiguous : 'missing on condition?'
  inReplyTo : Association to one microsoft.graph.post {  };
  @cds.ambiguous : 'missing on condition?'
  multiValueExtendedProperties : Association to many microsoft.graph.multiValueLegacyExtendedProperty {  };
  @cds.ambiguous : 'missing on condition?'
  singleValueExtendedProperties : Association to many microsoft.graph.singleValueLegacyExtendedProperty {  };
};

@cds.persistence.skip : true
entity microsoft.graph.eventMessage : microsoft.graph.message {
  endDateTime : microsoft.graph.dateTimeTimeZone;
  isAllDay : Boolean;
  isDelegated : Boolean;
  isOutOfDate : Boolean;
  location : microsoft.graph.location;
  meetingMessageType : LargeString;
  recurrence : microsoft.graph.patternedRecurrence;
  startDateTime : microsoft.graph.dateTimeTimeZone;
  type : LargeString;
  @cds.ambiguous : 'missing on condition?'
  event : Association to one microsoft.graph.event {  };
};

@cds.persistence.skip : true
entity microsoft.graph.eventMessageRequest : microsoft.graph.eventMessage {
  allowNewTimeProposals : Boolean;
  meetingRequestType : LargeString;
  previousEndDateTime : microsoft.graph.dateTimeTimeZone;
  previousLocation : microsoft.graph.location;
  previousStartDateTime : microsoft.graph.dateTimeTimeZone;
  responseRequested : Boolean;
};

@cds.persistence.skip : true
entity microsoft.graph.eventMessageResponse : microsoft.graph.eventMessage {
  proposedNewTime : microsoft.graph.timeSlot;
  responseType : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.fileAttachment : microsoft.graph.attachment {
  contentBytes : LargeBinary;
  contentId : LargeString;
  contentLocation : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.inferenceClassificationOverride : microsoft.graph.entity {
  classifyAs : LargeString;
  senderEmailAddress : microsoft.graph.emailAddress;
};

@cds.persistence.skip : true
entity microsoft.graph.itemAttachment : microsoft.graph.attachment {
  @cds.ambiguous : 'missing on condition?'
  item : Association to one microsoft.graph.outlookItem {  };
};

@cds.persistence.skip : true
entity microsoft.graph.messageRule : microsoft.graph.entity {
  actions : microsoft.graph.messageRuleActions;
  conditions : microsoft.graph.messageRulePredicates;
  displayName : LargeString;
  exceptions : microsoft.graph.messageRulePredicates;
  hasError : Boolean;
  isEnabled : Boolean;
  isReadOnly : Boolean;
  sequence : Integer;
};

@cds.persistence.skip : true
entity microsoft.graph.mailSearchFolder : microsoft.graph.mailFolder {
  filterQuery : LargeString;
  includeNestedFolders : Boolean;
  isSupported : Boolean;
  sourceFolderIds : many LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.openTypeExtension : microsoft.graph.extension {
  extensionName : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.outlookCategory : microsoft.graph.entity {
  color : LargeString;
  displayName : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.referenceAttachment : microsoft.graph.attachment {
};

@cds.persistence.skip : true
entity microsoft.graph.columnLink : microsoft.graph.entity {
  name : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.listItemVersion : microsoft.graph.baseItemVersion {
  @cds.ambiguous : 'missing on condition?'
  fields : Association to one microsoft.graph.fieldValueSet {  };
};

@cds.persistence.skip : true
entity microsoft.graph.documentSetVersion : microsoft.graph.listItemVersion {
  comment : LargeString;
  createdBy : microsoft.graph.identitySet;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  items : many microsoft.graph.documentSetVersionItem;
  shouldCaptureMinorVersion : Boolean;
} actions {
  action restore();
};

@cds.persistence.skip : true
entity microsoft.graph.fieldValueSet : microsoft.graph.entity {
};

@cds.persistence.skip : true
entity microsoft.graph.itemActivity : microsoft.graph.entity {
  access : microsoft.graph.accessAction;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  activityDateTime : DateTime;
  actor : microsoft.graph.identitySet;
  @cds.ambiguous : 'missing on condition?'
  driveItem : Association to one microsoft.graph.driveItem {  };
};

@cds.persistence.skip : true
entity microsoft.graph.itemActivityStat : microsoft.graph.entity {
  access : microsoft.graph.itemActionStat;
  create : microsoft.graph.itemActionStat;
  delete : microsoft.graph.itemActionStat;
  edit : microsoft.graph.itemActionStat;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  endDateTime : DateTime;
  incompleteData : microsoft.graph.incompleteData;
  isTrending : Boolean;
  move : microsoft.graph.itemActionStat;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  startDateTime : DateTime;
  @cds.ambiguous : 'missing on condition?'
  activities : Association to many microsoft.graph.itemActivity {  };
};

@cds.persistence.skip : true
entity microsoft.graph.shares : microsoft.graph.baseItem {
  owner : microsoft.graph.identitySet;
  @cds.ambiguous : 'missing on condition?'
  driveItem : Association to one microsoft.graph.driveItem {  };
  @cds.ambiguous : 'missing on condition?'
  items : Association to many microsoft.graph.driveItem {  };
  @cds.ambiguous : 'missing on condition?'
  list : Association to one microsoft.graph.list {  };
  @cds.ambiguous : 'missing on condition?'
  listItem : Association to one microsoft.graph.listItem {  };
  @cds.ambiguous : 'missing on condition?'
  permission : Association to one microsoft.graph.permission {  };
  @cds.ambiguous : 'missing on condition?'
  root : Association to one microsoft.graph.driveItem {  };
  @cds.ambiguous : 'missing on condition?'
  site : Association to one microsoft.graph.sites {  };
};

@cds.persistence.skip : true
entity microsoft.graph.schemaExtensions : microsoft.graph.entity {
  description : LargeString;
  owner : LargeString;
  properties : many microsoft.graph.extensionSchemaProperty;
  status : LargeString;
  targetTypes : many LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.cloudCommunications : microsoft.graph.entity {
  @cds.ambiguous : 'missing on condition?'
  calls : Association to many microsoft.graph.call {  };
  @cds.ambiguous : 'missing on condition?'
  callRecords : Association to many microsoft.graph.callRecords.callRecord {  };
  @cds.ambiguous : 'missing on condition?'
  onlineMeetings : Association to many microsoft.graph.onlineMeeting {  };
  @cds.ambiguous : 'missing on condition?'
  presences : Association to many microsoft.graph.presence {  };
};

@cds.persistence.skip : true
entity microsoft.graph.call : microsoft.graph.entity {
  callbackUri : LargeString;
  callChainId : LargeString;
  callOptions : microsoft.graph.callOptions;
  callRoutes : many microsoft.graph.callRoute;
  chatInfo : microsoft.graph.chatInfo;
  direction : LargeString;
  incomingContext : microsoft.graph.incomingContext;
  mediaConfig : microsoft.graph.mediaConfig;
  mediaState : microsoft.graph.callMediaState;
  meetingInfo : microsoft.graph.meetingInfo;
  myParticipantId : LargeString;
  requestedModalities : LargeString;
  resultInfo : microsoft.graph.resultInfo;
  source : microsoft.graph.participantInfo;
  state : LargeString;
  subject : LargeString;
  targets : many microsoft.graph.invitationParticipantInfo;
  tenantId : LargeString;
  toneInfo : microsoft.graph.toneInfo;
  transcription : microsoft.graph.callTranscriptionInfo;
  @cds.ambiguous : 'missing on condition?'
  audioRoutingGroups : Association to many microsoft.graph.audioRoutingGroup {  };
  @cds.ambiguous : 'missing on condition?'
  operations : Association to many microsoft.graph.commsOperation {  };
  @cds.ambiguous : 'missing on condition?'
  participants : Association to many microsoft.graph.participant {  };
};

@cds.persistence.skip : true
entity microsoft.graph.accessReviewHistoryDefinition : microsoft.graph.entity {
  createdBy : microsoft.graph.userIdentity;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  decisions : LargeString;
  displayName : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  reviewHistoryPeriodEndDateTime : DateTime;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  reviewHistoryPeriodStartDateTime : DateTime;
  scheduleSettings : microsoft.graph.accessReviewHistoryScheduleSettings;
  scopes : many microsoft.graph.accessReviewScope;
  status : LargeString;
  @cds.ambiguous : 'missing on condition?'
  instances : Association to many microsoft.graph.accessReviewHistoryInstance {  };
};

@cds.persistence.skip : true
entity microsoft.graph.accessReviewHistoryInstance : microsoft.graph.entity {
  downloadUri : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  expirationDateTime : DateTime;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  fulfilledDateTime : DateTime;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  reviewHistoryPeriodEndDateTime : DateTime;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  reviewHistoryPeriodStartDateTime : DateTime;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  runDateTime : DateTime;
  status : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.accessReviewInstance : microsoft.graph.entity {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  endDateTime : DateTime;
  fallbackReviewers : many microsoft.graph.accessReviewReviewerScope;
  reviewers : many microsoft.graph.accessReviewReviewerScope;
  scope : microsoft.graph.accessReviewScope;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  startDateTime : DateTime;
  status : LargeString;
  @cds.ambiguous : 'missing on condition?'
  contactedReviewers : Association to many microsoft.graph.accessReviewReviewer {  };
  @cds.ambiguous : 'missing on condition?'
  decisions : Association to many microsoft.graph.accessReviewInstanceDecisionItem {  };
  @cds.ambiguous : 'missing on condition?'
  stages : Association to many microsoft.graph.accessReviewStage {  };
};

@cds.persistence.skip : true
entity microsoft.graph.accessReviewReviewer : microsoft.graph.entity {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  displayName : LargeString;
  userPrincipalName : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.accessReviewInstanceDecisionItem : microsoft.graph.entity {
  accessReviewId : LargeString;
  appliedBy : microsoft.graph.userIdentity;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  appliedDateTime : DateTime;
  applyResult : LargeString;
  decision : LargeString;
  justification : LargeString;
  principal : microsoft.graph.identity;
  principalLink : LargeString;
  recommendation : LargeString;
  resource : microsoft.graph.accessReviewInstanceDecisionItemResource;
  resourceLink : LargeString;
  reviewedBy : microsoft.graph.userIdentity;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  reviewedDateTime : DateTime;
};

@cds.persistence.skip : true
entity microsoft.graph.accessReviewStage : microsoft.graph.entity {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  endDateTime : DateTime;
  fallbackReviewers : many microsoft.graph.accessReviewReviewerScope;
  reviewers : many microsoft.graph.accessReviewReviewerScope;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  startDateTime : DateTime;
  status : LargeString;
  @cds.ambiguous : 'missing on condition?'
  decisions : Association to many microsoft.graph.accessReviewInstanceDecisionItem {  };
};

@cds.persistence.skip : true
entity microsoft.graph.accessReviewScheduleDefinition : microsoft.graph.entity {
  additionalNotificationRecipients : many microsoft.graph.accessReviewNotificationRecipientItem;
  createdBy : microsoft.graph.userIdentity;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  descriptionForAdmins : LargeString;
  descriptionForReviewers : LargeString;
  displayName : LargeString;
  fallbackReviewers : many microsoft.graph.accessReviewReviewerScope;
  instanceEnumerationScope : microsoft.graph.accessReviewScope;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastModifiedDateTime : DateTime;
  reviewers : many microsoft.graph.accessReviewReviewerScope;
  scope : microsoft.graph.accessReviewScope;
  settings : microsoft.graph.accessReviewScheduleSettings;
  stageSettings : many microsoft.graph.accessReviewStageSettings;
  status : LargeString;
  @cds.ambiguous : 'missing on condition?'
  instances : Association to many microsoft.graph.accessReviewInstance {  };
};

@cds.persistence.skip : true
entity microsoft.graph.accessReviewSet : microsoft.graph.entity {
  @cds.ambiguous : 'missing on condition?'
  definitions : Association to many microsoft.graph.accessReviewScheduleDefinition {  };
  @cds.ambiguous : 'missing on condition?'
  historyDefinitions : Association to many microsoft.graph.accessReviewHistoryDefinition {  };
};

@cds.persistence.skip : true
entity microsoft.graph.appConsentApprovalRoute : microsoft.graph.entity {
  @cds.ambiguous : 'missing on condition?'
  appConsentRequests : Association to many microsoft.graph.appConsentRequest {  };
};

@cds.persistence.skip : true
entity microsoft.graph.appConsentRequest : microsoft.graph.entity {
  appDisplayName : LargeString;
  appId : LargeString;
  pendingScopes : many microsoft.graph.appConsentRequestScope;
  @cds.ambiguous : 'missing on condition?'
  userConsentRequests : Association to many microsoft.graph.userConsentRequest {  };
};

@cds.persistence.skip : true
entity microsoft.graph.userConsentRequest : microsoft.graph.request {
  reason : LargeString;
  @cds.ambiguous : 'missing on condition?'
  approval : Association to one microsoft.graph.approval {  };
};

@cds.persistence.skip : true
entity microsoft.graph.approval : microsoft.graph.entity {
  @cds.ambiguous : 'missing on condition?'
  stages : Association to many microsoft.graph.approvalStage {  };
};

@cds.persistence.skip : true
entity microsoft.graph.approvalStage : microsoft.graph.entity {
  assignedToMe : Boolean;
  displayName : LargeString;
  justification : LargeString;
  reviewedBy : microsoft.graph.identity;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  reviewedDateTime : DateTime;
  reviewResult : LargeString;
  status : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.entitlementManagement : microsoft.graph.entity {
  @cds.ambiguous : 'missing on condition?'
  accessPackageAssignmentApprovals : Association to many microsoft.graph.approval {  };
  @cds.ambiguous : 'missing on condition?'
  accessPackages : Association to many microsoft.graph.accessPackage {  };
  @cds.ambiguous : 'missing on condition?'
  assignmentPolicies : Association to many microsoft.graph.accessPackageAssignmentPolicy {  };
  @cds.ambiguous : 'missing on condition?'
  assignmentRequests : Association to many microsoft.graph.accessPackageAssignmentRequest {  };
  @cds.ambiguous : 'missing on condition?'
  assignments : Association to many microsoft.graph.accessPackageAssignment {  };
  @cds.ambiguous : 'missing on condition?'
  catalogs : Association to many microsoft.graph.accessPackageCatalog {  };
  @cds.ambiguous : 'missing on condition?'
  connectedOrganizations : Association to many microsoft.graph.connectedOrganization {  };
  @cds.ambiguous : 'missing on condition?'
  settings : Association to one microsoft.graph.entitlementManagementSettings {  };
};

@cds.persistence.skip : true
entity microsoft.graph.accessPackage : microsoft.graph.entity {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  description : LargeString;
  displayName : LargeString;
  isHidden : Boolean;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  modifiedDateTime : DateTime;
  @cds.ambiguous : 'missing on condition?'
  assignmentPolicies : Association to many microsoft.graph.accessPackageAssignmentPolicy {  };
  @cds.ambiguous : 'missing on condition?'
  catalog : Association to one microsoft.graph.accessPackageCatalog {  };
};

@cds.persistence.skip : true
entity microsoft.graph.accessPackageAssignmentPolicy : microsoft.graph.entity {
  allowedTargetScope : LargeString;
  automaticRequestSettings : microsoft.graph.accessPackageAutomaticRequestSettings;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  description : LargeString;
  displayName : LargeString;
  expiration : microsoft.graph.expirationPattern;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  modifiedDateTime : DateTime;
  requestApprovalSettings : microsoft.graph.accessPackageAssignmentApprovalSettings;
  requestorSettings : microsoft.graph.accessPackageAssignmentRequestorSettings;
  reviewSettings : microsoft.graph.accessPackageAssignmentReviewSettings;
  specificAllowedTargets : many microsoft.graph.subjectSet;
  @cds.ambiguous : 'missing on condition?'
  accessPackage : Association to one microsoft.graph.accessPackage {  };
  @cds.ambiguous : 'missing on condition?'
  catalog : Association to one microsoft.graph.accessPackageCatalog {  };
};

@cds.persistence.skip : true
entity microsoft.graph.accessPackageAssignmentRequest : microsoft.graph.entity {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  completedDateTime : DateTime;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  requestType : LargeString;
  schedule : microsoft.graph.entitlementManagementSchedule;
  state : LargeString;
  status : LargeString;
  @cds.ambiguous : 'missing on condition?'
  accessPackage : Association to one microsoft.graph.accessPackage {  };
  @cds.ambiguous : 'missing on condition?'
  assignment : Association to one microsoft.graph.accessPackageAssignment {  };
  @cds.ambiguous : 'missing on condition?'
  requestor : Association to one microsoft.graph.accessPackageSubject {  };
} actions {
  action cancel();
};

@cds.persistence.skip : true
entity microsoft.graph.accessPackageAssignment : microsoft.graph.entity {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  expiredDateTime : DateTime;
  schedule : microsoft.graph.entitlementManagementSchedule;
  state : LargeString;
  status : LargeString;
  @cds.ambiguous : 'missing on condition?'
  accessPackage : Association to one microsoft.graph.accessPackage {  };
  @cds.ambiguous : 'missing on condition?'
  assignmentPolicy : Association to one microsoft.graph.accessPackageAssignmentPolicy {  };
  @cds.ambiguous : 'missing on condition?'
  target : Association to one microsoft.graph.accessPackageSubject {  };
};

@cds.persistence.skip : true
entity microsoft.graph.accessPackageCatalog : microsoft.graph.entity {
  catalogType : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  description : LargeString;
  displayName : LargeString;
  isExternallyVisible : Boolean;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  modifiedDateTime : DateTime;
  state : LargeString;
  @cds.ambiguous : 'missing on condition?'
  accessPackages : Association to many microsoft.graph.accessPackage {  };
};

@cds.persistence.skip : true
entity microsoft.graph.connectedOrganization : microsoft.graph.entity {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  description : LargeString;
  displayName : LargeString;
  identitySources : many microsoft.graph.identitySource;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  modifiedDateTime : DateTime;
  state : LargeString;
  @cds.ambiguous : 'missing on condition?'
  externalSponsors : Association to many microsoft.graph.directoryObjects {  };
  @cds.ambiguous : 'missing on condition?'
  internalSponsors : Association to many microsoft.graph.directoryObjects {  };
};

@cds.persistence.skip : true
entity microsoft.graph.entitlementManagementSettings : microsoft.graph.entity {
  externalUserLifecycleAction : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.identityGovernance {
  @cds.ambiguous : 'missing on condition?'
  accessReviews : Association to one microsoft.graph.accessReviewSet {  };
  @cds.ambiguous : 'missing on condition?'
  appConsent : Association to one microsoft.graph.appConsentApprovalRoute {  };
  @cds.ambiguous : 'missing on condition?'
  termsOfUse : Association to one microsoft.graph.termsOfUseContainer {  };
  @cds.ambiguous : 'missing on condition?'
  entitlementManagement : Association to one microsoft.graph.entitlementManagement {  };
};

@cds.persistence.skip : true
entity microsoft.graph.termsOfUseContainer : microsoft.graph.entity {
  @cds.ambiguous : 'missing on condition?'
  agreementAcceptances : Association to many microsoft.graph.agreementAcceptances {  };
  @cds.ambiguous : 'missing on condition?'
  agreements : Association to many microsoft.graph.agreements {  };
};

@cds.persistence.skip : true
entity microsoft.graph.agreements : microsoft.graph.entity {
  displayName : LargeString;
  isPerDeviceAcceptanceRequired : Boolean;
  isViewingBeforeAcceptanceRequired : Boolean;
  termsExpiration : microsoft.graph.termsExpiration;
  @cds.ambiguous : 'missing on condition?'
  acceptances : Association to many microsoft.graph.agreementAcceptances {  };
  @cds.ambiguous : 'missing on condition?'
  file : Association to one microsoft.graph.agreementFile {  };
  @cds.ambiguous : 'missing on condition?'
  files : Association to many microsoft.graph.agreementFileLocalization {  };
};

@cds.persistence.skip : true
entity microsoft.graph.agreementFileProperties : microsoft.graph.entity {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  displayName : LargeString;
  fileData : microsoft.graph.agreementFileData;
  fileName : LargeString;
  isDefault : Boolean;
  isMajorVersion : Boolean;
  language : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.agreementFile : microsoft.graph.agreementFileProperties {
  @cds.ambiguous : 'missing on condition?'
  localizations : Association to many microsoft.graph.agreementFileLocalization {  };
};

@cds.persistence.skip : true
entity microsoft.graph.agreementFileLocalization : microsoft.graph.agreementFileProperties {
  @cds.ambiguous : 'missing on condition?'
  versions : Association to many microsoft.graph.agreementFileVersion {  };
};

@cds.persistence.skip : true
entity microsoft.graph.agreementFileVersion : microsoft.graph.agreementFileProperties {
};

@cds.persistence.skip : true
entity microsoft.graph.namedLocation : microsoft.graph.entity {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  displayName : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  modifiedDateTime : DateTime;
};

@cds.persistence.skip : true
entity microsoft.graph.countryNamedLocation : microsoft.graph.namedLocation {
  countriesAndRegions : many LargeString;
  countryLookupMethod : LargeString;
  includeUnknownCountriesAndRegions : Boolean;
};

@cds.persistence.skip : true
entity microsoft.graph.identityProtectionRoot {
  @cds.ambiguous : 'missing on condition?'
  riskDetections : Association to many microsoft.graph.riskDetection {  };
  @cds.ambiguous : 'missing on condition?'
  riskyUsers : Association to many microsoft.graph.riskyUser {  };
};

@cds.persistence.skip : true
entity microsoft.graph.riskDetection : microsoft.graph.entity {
  activity : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  activityDateTime : DateTime;
  additionalInfo : LargeString;
  correlationId : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  detectedDateTime : DateTime;
  detectionTimingType : LargeString;
  ipAddress : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastUpdatedDateTime : DateTime;
  location : microsoft.graph.signInLocation;
  requestId : LargeString;
  riskDetail : LargeString;
  riskEventType : LargeString;
  riskLevel : LargeString;
  riskState : LargeString;
  source : LargeString;
  tokenIssuerType : LargeString;
  userDisplayName : LargeString;
  userId : LargeString;
  userPrincipalName : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.riskyUser : microsoft.graph.entity {
  isDeleted : Boolean;
  isProcessing : Boolean;
  riskDetail : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  riskLastUpdatedDateTime : DateTime;
  riskLevel : LargeString;
  riskState : LargeString;
  userDisplayName : LargeString;
  userPrincipalName : LargeString;
  @cds.ambiguous : 'missing on condition?'
  history : Association to many microsoft.graph.riskyUserHistoryItem {  };
};

@cds.persistence.skip : true
entity microsoft.graph.ipNamedLocation : microsoft.graph.namedLocation {
  ipRanges : many microsoft.graph.ipRange;
  isTrusted : Boolean;
};

@cds.persistence.skip : true
entity microsoft.graph.riskyUserHistoryItem : microsoft.graph.riskyUser {
  activity : microsoft.graph.riskUserActivity;
  initiatedBy : LargeString;
  userId : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.accessPackageSubject : microsoft.graph.entity {
  displayName : LargeString;
  email : LargeString;
  objectId : LargeString;
  onPremisesSecurityIdentifier : LargeString;
  principalName : LargeString;
  subjectType : LargeString;
  @cds.ambiguous : 'missing on condition?'
  connectedOrganization : Association to one microsoft.graph.connectedOrganization {  };
};

@cds.persistence.skip : true
abstract entity microsoft.graph.mobileApp : microsoft.graph.entity {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  description : LargeString;
  developer : LargeString;
  displayName : LargeString;
  informationUrl : LargeString;
  isFeatured : Boolean;
  largeIcon : microsoft.graph.mimeContent;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastModifiedDateTime : DateTime;
  notes : LargeString;
  owner : LargeString;
  privacyInformationUrl : LargeString;
  publisher : LargeString;
  publishingState : LargeString;
  @cds.ambiguous : 'missing on condition?'
  assignments : Association to many microsoft.graph.mobileAppAssignment {  };
  @cds.ambiguous : 'missing on condition?'
  categories : Association to many microsoft.graph.mobileAppCategory {  };
};

@cds.persistence.skip : true
abstract entity microsoft.graph.mobileLobApp : microsoft.graph.mobileApp {
  committedContentVersion : LargeString;
  fileName : LargeString;
  size : Integer64;
  @cds.ambiguous : 'missing on condition?'
  contentVersions : Association to many microsoft.graph.mobileAppContent {  };
};

@cds.persistence.skip : true
entity microsoft.graph.androidLobApp : microsoft.graph.mobileLobApp {
  minimumSupportedOperatingSystem : microsoft.graph.androidMinimumOperatingSystem;
  packageId : LargeString;
  versionCode : LargeString;
  versionName : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.androidStoreApp : microsoft.graph.mobileApp {
  appStoreUrl : LargeString;
  minimumSupportedOperatingSystem : microsoft.graph.androidMinimumOperatingSystem;
  packageId : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.deviceAppManagement : microsoft.graph.entity {
  isEnabledForMicrosoftStoreForBusiness : Boolean;
  microsoftStoreForBusinessLanguage : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  microsoftStoreForBusinessLastCompletedApplicationSyncTime : DateTime;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  microsoftStoreForBusinessLastSuccessfulSyncDateTime : DateTime;
  @cds.ambiguous : 'missing on condition?'
  managedEBooks : Association to many microsoft.graph.managedEBook {  };
  @cds.ambiguous : 'missing on condition?'
  mobileAppCategories : Association to many microsoft.graph.mobileAppCategory {  };
  @cds.ambiguous : 'missing on condition?'
  mobileAppConfigurations : Association to many microsoft.graph.managedDeviceMobileAppConfiguration {  };
  @cds.ambiguous : 'missing on condition?'
  mobileApps : Association to many microsoft.graph.mobileApp {  };
  @cds.ambiguous : 'missing on condition?'
  vppTokens : Association to many microsoft.graph.vppToken {  };
  @cds.ambiguous : 'missing on condition?'
  androidManagedAppProtections : Association to many microsoft.graph.androidManagedAppProtection {  };
  @cds.ambiguous : 'missing on condition?'
  defaultManagedAppProtections : Association to many microsoft.graph.defaultManagedAppProtection {  };
  @cds.ambiguous : 'missing on condition?'
  iosManagedAppProtections : Association to many microsoft.graph.iosManagedAppProtection {  };
  @cds.ambiguous : 'missing on condition?'
  managedAppPolicies : Association to many microsoft.graph.managedAppPolicy {  };
  @cds.ambiguous : 'missing on condition?'
  managedAppRegistrations : Association to many microsoft.graph.managedAppRegistration {  };
  @cds.ambiguous : 'missing on condition?'
  managedAppStatuses : Association to many microsoft.graph.managedAppStatus {  };
  @cds.ambiguous : 'missing on condition?'
  mdmWindowsInformationProtectionPolicies : Association to many microsoft.graph.mdmWindowsInformationProtectionPolicy {  };
  @cds.ambiguous : 'missing on condition?'
  targetedManagedAppConfigurations : Association to many microsoft.graph.targetedManagedAppConfiguration {  };
  @cds.ambiguous : 'missing on condition?'
  windowsInformationProtectionPolicies : Association to many microsoft.graph.windowsInformationProtectionPolicy {  };
};

@cds.persistence.skip : true
abstract entity microsoft.graph.managedEBook : microsoft.graph.entity {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  description : LargeString;
  displayName : LargeString;
  informationUrl : LargeString;
  largeCover : microsoft.graph.mimeContent;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastModifiedDateTime : DateTime;
  privacyInformationUrl : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  publishedDateTime : DateTime;
  publisher : LargeString;
  @cds.ambiguous : 'missing on condition?'
  assignments : Association to many microsoft.graph.managedEBookAssignment {  };
  @cds.ambiguous : 'missing on condition?'
  deviceStates : Association to many microsoft.graph.deviceInstallState {  };
  @cds.ambiguous : 'missing on condition?'
  installSummary : Association to one microsoft.graph.eBookInstallSummary {  };
  @cds.ambiguous : 'missing on condition?'
  userStateSummary : Association to many microsoft.graph.userInstallStateSummary {  };
};

@cds.persistence.skip : true
entity microsoft.graph.mobileAppCategory : microsoft.graph.entity {
  displayName : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastModifiedDateTime : DateTime;
};

@cds.persistence.skip : true
abstract entity microsoft.graph.managedDeviceMobileAppConfiguration : microsoft.graph.entity {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  description : LargeString;
  displayName : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastModifiedDateTime : DateTime;
  targetedMobileApps : many LargeString;
  version : Integer;
  @cds.ambiguous : 'missing on condition?'
  assignments : Association to many microsoft.graph.managedDeviceMobileAppConfigurationAssignment {  };
  @cds.ambiguous : 'missing on condition?'
  deviceStatuses : Association to many microsoft.graph.managedDeviceMobileAppConfigurationDeviceStatus {  };
  @cds.ambiguous : 'missing on condition?'
  deviceStatusSummary : Association to one microsoft.graph.managedDeviceMobileAppConfigurationDeviceSummary {  };
  @cds.ambiguous : 'missing on condition?'
  userStatuses : Association to many microsoft.graph.managedDeviceMobileAppConfigurationUserStatus {  };
  @cds.ambiguous : 'missing on condition?'
  userStatusSummary : Association to one microsoft.graph.managedDeviceMobileAppConfigurationUserSummary {  };
};

@cds.persistence.skip : true
entity microsoft.graph.vppToken : microsoft.graph.entity {
  appleId : LargeString;
  automaticallyUpdateApps : Boolean;
  countryOrRegion : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  expirationDateTime : DateTime;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastModifiedDateTime : DateTime;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastSyncDateTime : DateTime;
  lastSyncStatus : LargeString;
  organizationName : LargeString;
  state : LargeString;
  token : LargeString;
  vppTokenAccountType : LargeString;
};

@cds.persistence.skip : true
abstract entity microsoft.graph.managedAppPolicy : microsoft.graph.entity {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  description : LargeString;
  displayName : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastModifiedDateTime : DateTime;
  version : LargeString;
};

@cds.persistence.skip : true
abstract entity microsoft.graph.managedAppProtection : microsoft.graph.managedAppPolicy {
  allowedDataStorageLocations : LargeString;
  allowedInboundDataTransferSources : LargeString;
  allowedOutboundClipboardSharingLevel : LargeString;
  allowedOutboundDataTransferDestinations : LargeString;
  contactSyncBlocked : Boolean;
  dataBackupBlocked : Boolean;
  deviceComplianceRequired : Boolean;
  disableAppPinIfDevicePinIsSet : Boolean;
  fingerprintBlocked : Boolean;
  managedBrowser : LargeString;
  managedBrowserToOpenLinksRequired : Boolean;
  maximumPinRetries : Integer;
  minimumPinLength : Integer;
  minimumRequiredAppVersion : LargeString;
  minimumRequiredOsVersion : LargeString;
  minimumWarningAppVersion : LargeString;
  minimumWarningOsVersion : LargeString;
  organizationalCredentialsRequired : Boolean;
  pinCharacterSet : LargeString;
  pinRequired : Boolean;
  printBlocked : Boolean;
  saveAsBlocked : Boolean;
  simplePinBlocked : Boolean;
};

@cds.persistence.skip : true
abstract entity microsoft.graph.targetedManagedAppProtection : microsoft.graph.managedAppProtection {
  isAssigned : Boolean;
  @cds.ambiguous : 'missing on condition?'
  assignments : Association to many microsoft.graph.targetedManagedAppPolicyAssignment {  };
};

@cds.persistence.skip : true
entity microsoft.graph.androidManagedAppProtection : microsoft.graph.targetedManagedAppProtection {
  customBrowserDisplayName : LargeString;
  customBrowserPackageId : LargeString;
  deployedAppCount : Integer;
  disableAppEncryptionIfDeviceEncryptionIsEnabled : Boolean;
  encryptAppData : Boolean;
  minimumRequiredPatchVersion : LargeString;
  minimumWarningPatchVersion : LargeString;
  screenCaptureBlocked : Boolean;
  @cds.ambiguous : 'missing on condition?'
  apps : Association to many microsoft.graph.managedMobileApp {  };
  @cds.ambiguous : 'missing on condition?'
  deploymentSummary : Association to one microsoft.graph.managedAppPolicyDeploymentSummary {  };
};

@cds.persistence.skip : true
entity microsoft.graph.defaultManagedAppProtection : microsoft.graph.managedAppProtection {
  appDataEncryptionType : LargeString;
  customSettings : many microsoft.graph.keyValuePair;
  deployedAppCount : Integer;
  disableAppEncryptionIfDeviceEncryptionIsEnabled : Boolean;
  encryptAppData : Boolean;
  faceIdBlocked : Boolean;
  minimumRequiredPatchVersion : LargeString;
  minimumRequiredSdkVersion : LargeString;
  minimumWarningPatchVersion : LargeString;
  screenCaptureBlocked : Boolean;
  @cds.ambiguous : 'missing on condition?'
  apps : Association to many microsoft.graph.managedMobileApp {  };
  @cds.ambiguous : 'missing on condition?'
  deploymentSummary : Association to one microsoft.graph.managedAppPolicyDeploymentSummary {  };
};

@cds.persistence.skip : true
entity microsoft.graph.iosManagedAppProtection : microsoft.graph.targetedManagedAppProtection {
  appDataEncryptionType : LargeString;
  customBrowserProtocol : LargeString;
  deployedAppCount : Integer;
  faceIdBlocked : Boolean;
  minimumRequiredSdkVersion : LargeString;
  @cds.ambiguous : 'missing on condition?'
  apps : Association to many microsoft.graph.managedMobileApp {  };
  @cds.ambiguous : 'missing on condition?'
  deploymentSummary : Association to one microsoft.graph.managedAppPolicyDeploymentSummary {  };
};

@cds.persistence.skip : true
abstract entity microsoft.graph.managedAppStatus : microsoft.graph.entity {
  displayName : LargeString;
  version : LargeString;
};

@cds.persistence.skip : true
abstract entity microsoft.graph.windowsInformationProtection : microsoft.graph.managedAppPolicy {
  azureRightsManagementServicesAllowed : Boolean;
  dataRecoveryCertificate : microsoft.graph.windowsInformationProtectionDataRecoveryCertificate;
  enforcementLevel : LargeString;
  enterpriseDomain : LargeString;
  enterpriseInternalProxyServers : many microsoft.graph.windowsInformationProtectionResourceCollection;
  enterpriseIPRanges : many microsoft.graph.windowsInformationProtectionIPRangeCollection;
  enterpriseIPRangesAreAuthoritative : Boolean;
  enterpriseNetworkDomainNames : many microsoft.graph.windowsInformationProtectionResourceCollection;
  enterpriseProtectedDomainNames : many microsoft.graph.windowsInformationProtectionResourceCollection;
  enterpriseProxiedDomains : many microsoft.graph.windowsInformationProtectionProxiedDomainCollection;
  enterpriseProxyServers : many microsoft.graph.windowsInformationProtectionResourceCollection;
  enterpriseProxyServersAreAuthoritative : Boolean;
  exemptApps : many microsoft.graph.windowsInformationProtectionApp;
  iconsVisible : Boolean;
  indexingEncryptedStoresOrItemsBlocked : Boolean;
  isAssigned : Boolean;
  neutralDomainResources : many microsoft.graph.windowsInformationProtectionResourceCollection;
  protectedApps : many microsoft.graph.windowsInformationProtectionApp;
  protectionUnderLockConfigRequired : Boolean;
  revokeOnUnenrollDisabled : Boolean;
  rightsManagementServicesTemplateId : UUID;
  smbAutoEncryptedFileExtensions : many microsoft.graph.windowsInformationProtectionResourceCollection;
  @cds.ambiguous : 'missing on condition?'
  assignments : Association to many microsoft.graph.targetedManagedAppPolicyAssignment {  };
  @cds.ambiguous : 'missing on condition?'
  exemptAppLockerFiles : Association to many microsoft.graph.windowsInformationProtectionAppLockerFile {  };
  @cds.ambiguous : 'missing on condition?'
  protectedAppLockerFiles : Association to many microsoft.graph.windowsInformationProtectionAppLockerFile {  };
};

@cds.persistence.skip : true
entity microsoft.graph.mdmWindowsInformationProtectionPolicy : microsoft.graph.windowsInformationProtection {
};

@cds.persistence.skip : true
abstract entity microsoft.graph.managedAppConfiguration : microsoft.graph.managedAppPolicy {
  customSettings : many microsoft.graph.keyValuePair;
};

@cds.persistence.skip : true
entity microsoft.graph.targetedManagedAppConfiguration : microsoft.graph.managedAppConfiguration {
  deployedAppCount : Integer;
  isAssigned : Boolean;
  @cds.ambiguous : 'missing on condition?'
  apps : Association to many microsoft.graph.managedMobileApp {  };
  @cds.ambiguous : 'missing on condition?'
  assignments : Association to many microsoft.graph.targetedManagedAppPolicyAssignment {  };
  @cds.ambiguous : 'missing on condition?'
  deploymentSummary : Association to one microsoft.graph.managedAppPolicyDeploymentSummary {  };
};

@cds.persistence.skip : true
entity microsoft.graph.windowsInformationProtectionPolicy : microsoft.graph.windowsInformationProtection {
  daysWithoutContactBeforeUnenroll : Integer;
  mdmEnrollmentUrl : LargeString;
  minutesOfInactivityBeforeDeviceLock : Integer;
  numberOfPastPinsRemembered : Integer;
  passwordMaximumAttemptCount : Integer;
  pinExpirationDays : Integer;
  pinLowercaseLetters : LargeString;
  pinMinimumLength : Integer;
  pinSpecialCharacters : LargeString;
  pinUppercaseLetters : LargeString;
  revokeOnMdmHandoffDisabled : Boolean;
  windowsHelloForBusinessBlocked : Boolean;
};

@cds.persistence.skip : true
entity microsoft.graph.iosLobApp : microsoft.graph.mobileLobApp {
  applicableDeviceType : microsoft.graph.iosDeviceType;
  buildNumber : LargeString;
  bundleId : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  expirationDateTime : DateTime;
  minimumSupportedOperatingSystem : microsoft.graph.iosMinimumOperatingSystem;
  versionNumber : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.iosMobileAppConfiguration : microsoft.graph.managedDeviceMobileAppConfiguration {
  encodedSettingXml : LargeBinary;
  settings : many microsoft.graph.appConfigurationSettingItem;
};

@cds.persistence.skip : true
entity microsoft.graph.iosStoreApp : microsoft.graph.mobileApp {
  applicableDeviceType : microsoft.graph.iosDeviceType;
  appStoreUrl : LargeString;
  bundleId : LargeString;
  minimumSupportedOperatingSystem : microsoft.graph.iosMinimumOperatingSystem;
};

@cds.persistence.skip : true
entity microsoft.graph.iosVppApp : microsoft.graph.mobileApp {
  applicableDeviceType : microsoft.graph.iosDeviceType;
  appStoreUrl : LargeString;
  bundleId : LargeString;
  licensingType : microsoft.graph.vppLicensingType;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  releaseDateTime : DateTime;
  totalLicenseCount : Integer;
  usedLicenseCount : Integer;
  vppTokenAccountType : LargeString;
  vppTokenAppleId : LargeString;
  vppTokenOrganizationName : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.macOSOfficeSuiteApp : microsoft.graph.mobileApp {
};

@cds.persistence.skip : true
abstract entity microsoft.graph.managedApp : microsoft.graph.mobileApp {
  appAvailability : LargeString;
  version : LargeString;
};

@cds.persistence.skip : true
abstract entity microsoft.graph.managedMobileLobApp : microsoft.graph.managedApp {
  committedContentVersion : LargeString;
  fileName : LargeString;
  size : Integer64;
  @cds.ambiguous : 'missing on condition?'
  contentVersions : Association to many microsoft.graph.mobileAppContent {  };
};

@cds.persistence.skip : true
entity microsoft.graph.managedAndroidLobApp : microsoft.graph.managedMobileLobApp {
  minimumSupportedOperatingSystem : microsoft.graph.androidMinimumOperatingSystem;
  packageId : LargeString;
  versionCode : LargeString;
  versionName : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.managedAndroidStoreApp : microsoft.graph.managedApp {
  appStoreUrl : LargeString;
  minimumSupportedOperatingSystem : microsoft.graph.androidMinimumOperatingSystem;
  packageId : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.managedDeviceMobileAppConfigurationAssignment : microsoft.graph.entity {
  target : microsoft.graph.deviceAndAppManagementAssignmentTarget;
};

@cds.persistence.skip : true
entity microsoft.graph.managedDeviceMobileAppConfigurationDeviceStatus : microsoft.graph.entity {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  complianceGracePeriodExpirationDateTime : DateTime;
  deviceDisplayName : LargeString;
  deviceModel : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastReportedDateTime : DateTime;
  status : LargeString;
  userName : LargeString;
  userPrincipalName : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.managedDeviceMobileAppConfigurationDeviceSummary : microsoft.graph.entity {
  configurationVersion : Integer;
  errorCount : Integer;
  failedCount : Integer;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastUpdateDateTime : DateTime;
  notApplicableCount : Integer;
  pendingCount : Integer;
  successCount : Integer;
};

@cds.persistence.skip : true
entity microsoft.graph.managedDeviceMobileAppConfigurationUserStatus : microsoft.graph.entity {
  devicesCount : Integer;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastReportedDateTime : DateTime;
  status : LargeString;
  userDisplayName : LargeString;
  userPrincipalName : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.managedDeviceMobileAppConfigurationUserSummary : microsoft.graph.entity {
  configurationVersion : Integer;
  errorCount : Integer;
  failedCount : Integer;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastUpdateDateTime : DateTime;
  notApplicableCount : Integer;
  pendingCount : Integer;
  successCount : Integer;
};

@cds.persistence.skip : true
entity microsoft.graph.managedIOSLobApp : microsoft.graph.managedMobileLobApp {
  applicableDeviceType : microsoft.graph.iosDeviceType;
  buildNumber : LargeString;
  bundleId : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  expirationDateTime : DateTime;
  minimumSupportedOperatingSystem : microsoft.graph.iosMinimumOperatingSystem;
  versionNumber : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.managedIOSStoreApp : microsoft.graph.managedApp {
  applicableDeviceType : microsoft.graph.iosDeviceType;
  appStoreUrl : LargeString;
  bundleId : LargeString;
  minimumSupportedOperatingSystem : microsoft.graph.iosMinimumOperatingSystem;
};

@cds.persistence.skip : true
entity microsoft.graph.mobileAppContent : microsoft.graph.entity {
  @cds.ambiguous : 'missing on condition?'
  files : Association to many microsoft.graph.mobileAppContentFile {  };
};

@cds.persistence.skip : true
entity microsoft.graph.microsoftStoreForBusinessApp : microsoft.graph.mobileApp {
  licenseType : LargeString;
  packageIdentityName : LargeString;
  productKey : LargeString;
  totalLicenseCount : Integer;
  usedLicenseCount : Integer;
};

@cds.persistence.skip : true
entity microsoft.graph.mobileAppAssignment : microsoft.graph.entity {
  intent : LargeString;
  settings : microsoft.graph.mobileAppAssignmentSettings;
  target : microsoft.graph.deviceAndAppManagementAssignmentTarget;
};

@cds.persistence.skip : true
entity microsoft.graph.mobileAppContentFile : microsoft.graph.entity {
  azureStorageUri : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  azureStorageUriExpirationDateTime : DateTime;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  isCommitted : Boolean;
  manifest : LargeBinary;
  name : LargeString;
  size : Integer64;
  sizeEncrypted : Integer64;
  uploadState : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.webApp : microsoft.graph.mobileApp {
  appUrl : LargeString;
  useManagedBrowser : Boolean;
};

@cds.persistence.skip : true
entity microsoft.graph.win32LobApp : microsoft.graph.mobileLobApp {
  applicableArchitectures : LargeString;
  installCommandLine : LargeString;
  installExperience : microsoft.graph.win32LobAppInstallExperience;
  minimumCpuSpeedInMHz : Integer;
  minimumFreeDiskSpaceInMB : Integer;
  minimumMemoryInMB : Integer;
  minimumNumberOfProcessors : Integer;
  minimumSupportedWindowsRelease : LargeString;
  msiInformation : microsoft.graph.win32LobAppMsiInformation;
  returnCodes : many microsoft.graph.win32LobAppReturnCode;
  rules : many microsoft.graph.win32LobAppRule;
  setupFilePath : LargeString;
  uninstallCommandLine : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.windowsMobileMSI : microsoft.graph.mobileLobApp {
  commandLine : LargeString;
  ignoreVersionDetection : Boolean;
  productCode : LargeString;
  productVersion : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.windowsUniversalAppX : microsoft.graph.mobileLobApp {
  applicableArchitectures : LargeString;
  applicableDeviceTypes : LargeString;
  identityName : LargeString;
  identityPublisherHash : LargeString;
  identityResourceIdentifier : LargeString;
  identityVersion : LargeString;
  isBundle : Boolean;
  minimumSupportedOperatingSystem : microsoft.graph.windowsMinimumOperatingSystem;
};

@cds.persistence.skip : true
entity microsoft.graph.deviceInstallState : microsoft.graph.entity {
  deviceId : LargeString;
  deviceName : LargeString;
  errorCode : LargeString;
  installState : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastSyncDateTime : DateTime;
  osDescription : LargeString;
  osVersion : LargeString;
  userName : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.eBookInstallSummary : microsoft.graph.entity {
  failedDeviceCount : Integer;
  failedUserCount : Integer;
  installedDeviceCount : Integer;
  installedUserCount : Integer;
  notInstalledDeviceCount : Integer;
  notInstalledUserCount : Integer;
};

@cds.persistence.skip : true
entity microsoft.graph.iosVppEBook : microsoft.graph.managedEBook {
  appleId : LargeString;
  genres : many LargeString;
  language : LargeString;
  seller : LargeString;
  totalLicenseCount : Integer;
  usedLicenseCount : Integer;
  vppOrganizationName : LargeString;
  vppTokenId : UUID;
};

@cds.persistence.skip : true
entity microsoft.graph.managedEBookAssignment : microsoft.graph.entity {
  installIntent : LargeString;
  target : microsoft.graph.deviceAndAppManagementAssignmentTarget;
};

@cds.persistence.skip : true
entity microsoft.graph.iosVppEBookAssignment : microsoft.graph.managedEBookAssignment {
};

@cds.persistence.skip : true
entity microsoft.graph.userInstallStateSummary : microsoft.graph.entity {
  failedDeviceCount : Integer;
  installedDeviceCount : Integer;
  notInstalledDeviceCount : Integer;
  userName : LargeString;
  @cds.ambiguous : 'missing on condition?'
  deviceStates : Association to many microsoft.graph.deviceInstallState {  };
};

@cds.persistence.skip : true
entity microsoft.graph.deviceManagement : microsoft.graph.entity {
  intuneAccountId : UUID;
  settings : microsoft.graph.deviceManagementSettings;
  intuneBrand : microsoft.graph.intuneBrand;
  subscriptionState : LargeString;
  @cds.ambiguous : 'missing on condition?'
  termsAndConditions : Association to many microsoft.graph.termsAndConditions {  };
  @cds.ambiguous : 'missing on condition?'
  deviceCompliancePolicies : Association to many microsoft.graph.deviceCompliancePolicy {  };
  @cds.ambiguous : 'missing on condition?'
  deviceCompliancePolicyDeviceStateSummary : Association to one microsoft.graph.deviceCompliancePolicyDeviceStateSummary {  };
  @cds.ambiguous : 'missing on condition?'
  deviceCompliancePolicySettingStateSummaries : Association to many microsoft.graph.deviceCompliancePolicySettingStateSummary {  };
  @cds.ambiguous : 'missing on condition?'
  deviceConfigurationDeviceStateSummaries : Association to one microsoft.graph.deviceConfigurationDeviceStateSummary {  };
  @cds.ambiguous : 'missing on condition?'
  deviceConfigurations : Association to many microsoft.graph.deviceConfiguration {  };
  @cds.ambiguous : 'missing on condition?'
  iosUpdateStatuses : Association to many microsoft.graph.iosUpdateDeviceStatus {  };
  @cds.ambiguous : 'missing on condition?'
  softwareUpdateStatusSummary : Association to one microsoft.graph.softwareUpdateStatusSummary {  };
  @cds.ambiguous : 'missing on condition?'
  complianceManagementPartners : Association to many microsoft.graph.complianceManagementPartner {  };
  @cds.ambiguous : 'missing on condition?'
  conditionalAccessSettings : Association to one microsoft.graph.onPremisesConditionalAccessSettings {  };
  @cds.ambiguous : 'missing on condition?'
  deviceCategories : Association to many microsoft.graph.deviceCategory {  };
  @cds.ambiguous : 'missing on condition?'
  deviceEnrollmentConfigurations : Association to many microsoft.graph.deviceEnrollmentConfiguration {  };
  @cds.ambiguous : 'missing on condition?'
  deviceManagementPartners : Association to many microsoft.graph.deviceManagementPartner {  };
  @cds.ambiguous : 'missing on condition?'
  exchangeConnectors : Association to many microsoft.graph.deviceManagementExchangeConnector {  };
  @cds.ambiguous : 'missing on condition?'
  mobileThreatDefenseConnectors : Association to many microsoft.graph.mobileThreatDefenseConnector {  };
  @cds.ambiguous : 'missing on condition?'
  applePushNotificationCertificate : Association to one microsoft.graph.applePushNotificationCertificate {  };
  @cds.ambiguous : 'missing on condition?'
  detectedApps : Association to many microsoft.graph.detectedApp {  };
  @cds.ambiguous : 'missing on condition?'
  managedDeviceOverview : Association to one microsoft.graph.managedDeviceOverview {  };
  @cds.ambiguous : 'missing on condition?'
  managedDevices : Association to many microsoft.graph.managedDevice {  };
  @cds.ambiguous : 'missing on condition?'
  importedWindowsAutopilotDeviceIdentities : Association to many microsoft.graph.importedWindowsAutopilotDeviceIdentity {  };
  @cds.ambiguous : 'missing on condition?'
  windowsAutopilotDeviceIdentities : Association to many microsoft.graph.windowsAutopilotDeviceIdentity {  };
  @cds.ambiguous : 'missing on condition?'
  notificationMessageTemplates : Association to many microsoft.graph.notificationMessageTemplate {  };
  @cds.ambiguous : 'missing on condition?'
  resourceOperations : Association to many microsoft.graph.resourceOperation {  };
  @cds.ambiguous : 'missing on condition?'
  roleAssignments : Association to many microsoft.graph.deviceAndAppManagementRoleAssignment {  };
  @cds.ambiguous : 'missing on condition?'
  roleDefinitions : Association to many microsoft.graph.roleDefinition {  };
  @cds.ambiguous : 'missing on condition?'
  remoteAssistancePartners : Association to many microsoft.graph.remoteAssistancePartner {  };
  @cds.ambiguous : 'missing on condition?'
  reports : Association to one microsoft.graph.deviceManagementReports {  };
  @cds.ambiguous : 'missing on condition?'
  telecomExpenseManagementPartners : Association to many microsoft.graph.telecomExpenseManagementPartner {  };
  @cds.ambiguous : 'missing on condition?'
  troubleshootingEvents : Association to many microsoft.graph.deviceManagementTroubleshootingEvent {  };
  @cds.ambiguous : 'missing on condition?'
  windowsInformationProtectionAppLearningSummaries : Association to many microsoft.graph.windowsInformationProtectionAppLearningSummary {  };
  @cds.ambiguous : 'missing on condition?'
  windowsInformationProtectionNetworkLearningSummaries : Association to many microsoft.graph.windowsInformationProtectionNetworkLearningSummary {  };
};

@cds.persistence.skip : true
entity microsoft.graph.termsAndConditions : microsoft.graph.entity {
  acceptanceStatement : LargeString;
  bodyText : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  description : LargeString;
  displayName : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastModifiedDateTime : DateTime;
  title : LargeString;
  version : Integer;
  @cds.ambiguous : 'missing on condition?'
  acceptanceStatuses : Association to many microsoft.graph.termsAndConditionsAcceptanceStatus {  };
  @cds.ambiguous : 'missing on condition?'
  assignments : Association to many microsoft.graph.termsAndConditionsAssignment {  };
};

@cds.persistence.skip : true
abstract entity microsoft.graph.deviceCompliancePolicy : microsoft.graph.entity {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  description : LargeString;
  displayName : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastModifiedDateTime : DateTime;
  version : Integer;
  @cds.ambiguous : 'missing on condition?'
  assignments : Association to many microsoft.graph.deviceCompliancePolicyAssignment {  };
  @cds.ambiguous : 'missing on condition?'
  deviceSettingStateSummaries : Association to many microsoft.graph.settingStateDeviceSummary {  };
  @cds.ambiguous : 'missing on condition?'
  deviceStatuses : Association to many microsoft.graph.deviceComplianceDeviceStatus {  };
  @cds.ambiguous : 'missing on condition?'
  deviceStatusOverview : Association to one microsoft.graph.deviceComplianceDeviceOverview {  };
  @cds.ambiguous : 'missing on condition?'
  scheduledActionsForRule : Association to many microsoft.graph.deviceComplianceScheduledActionForRule {  };
  @cds.ambiguous : 'missing on condition?'
  userStatuses : Association to many microsoft.graph.deviceComplianceUserStatus {  };
  @cds.ambiguous : 'missing on condition?'
  userStatusOverview : Association to one microsoft.graph.deviceComplianceUserOverview {  };
};

@cds.persistence.skip : true
entity microsoft.graph.deviceCompliancePolicyDeviceStateSummary : microsoft.graph.entity {
  compliantDeviceCount : Integer;
  configManagerCount : Integer;
  conflictDeviceCount : Integer;
  errorDeviceCount : Integer;
  inGracePeriodCount : Integer;
  nonCompliantDeviceCount : Integer;
  notApplicableDeviceCount : Integer;
  remediatedDeviceCount : Integer;
  unknownDeviceCount : Integer;
};

@cds.persistence.skip : true
entity microsoft.graph.deviceCompliancePolicySettingStateSummary : microsoft.graph.entity {
  compliantDeviceCount : Integer;
  conflictDeviceCount : Integer;
  errorDeviceCount : Integer;
  nonCompliantDeviceCount : Integer;
  notApplicableDeviceCount : Integer;
  platformType : LargeString;
  remediatedDeviceCount : Integer;
  setting : LargeString;
  settingName : LargeString;
  unknownDeviceCount : Integer;
  @cds.ambiguous : 'missing on condition?'
  deviceComplianceSettingStates : Association to many microsoft.graph.deviceComplianceSettingState {  };
};

@cds.persistence.skip : true
entity microsoft.graph.deviceConfigurationDeviceStateSummary : microsoft.graph.entity {
  compliantDeviceCount : Integer;
  conflictDeviceCount : Integer;
  errorDeviceCount : Integer;
  nonCompliantDeviceCount : Integer;
  notApplicableDeviceCount : Integer;
  remediatedDeviceCount : Integer;
  unknownDeviceCount : Integer;
};

@cds.persistence.skip : true
abstract entity microsoft.graph.deviceConfiguration : microsoft.graph.entity {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  description : LargeString;
  displayName : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastModifiedDateTime : DateTime;
  version : Integer;
  @cds.ambiguous : 'missing on condition?'
  assignments : Association to many microsoft.graph.deviceConfigurationAssignment {  };
  @cds.ambiguous : 'missing on condition?'
  deviceSettingStateSummaries : Association to many microsoft.graph.settingStateDeviceSummary {  };
  @cds.ambiguous : 'missing on condition?'
  deviceStatuses : Association to many microsoft.graph.deviceConfigurationDeviceStatus {  };
  @cds.ambiguous : 'missing on condition?'
  deviceStatusOverview : Association to one microsoft.graph.deviceConfigurationDeviceOverview {  };
  @cds.ambiguous : 'missing on condition?'
  userStatuses : Association to many microsoft.graph.deviceConfigurationUserStatus {  };
  @cds.ambiguous : 'missing on condition?'
  userStatusOverview : Association to one microsoft.graph.deviceConfigurationUserOverview {  };
};

@cds.persistence.skip : true
entity microsoft.graph.iosUpdateDeviceStatus : microsoft.graph.entity {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  complianceGracePeriodExpirationDateTime : DateTime;
  deviceDisplayName : LargeString;
  deviceId : LargeString;
  deviceModel : LargeString;
  installStatus : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastReportedDateTime : DateTime;
  osVersion : LargeString;
  status : LargeString;
  userId : LargeString;
  userName : LargeString;
  userPrincipalName : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.softwareUpdateStatusSummary : microsoft.graph.entity {
  compliantDeviceCount : Integer;
  compliantUserCount : Integer;
  conflictDeviceCount : Integer;
  conflictUserCount : Integer;
  displayName : LargeString;
  errorDeviceCount : Integer;
  errorUserCount : Integer;
  nonCompliantDeviceCount : Integer;
  nonCompliantUserCount : Integer;
  notApplicableDeviceCount : Integer;
  notApplicableUserCount : Integer;
  remediatedDeviceCount : Integer;
  remediatedUserCount : Integer;
  unknownDeviceCount : Integer;
  unknownUserCount : Integer;
};

@cds.persistence.skip : true
entity microsoft.graph.complianceManagementPartner : microsoft.graph.entity {
  androidEnrollmentAssignments : many microsoft.graph.complianceManagementPartnerAssignment;
  androidOnboarded : Boolean;
  displayName : LargeString;
  iosEnrollmentAssignments : many microsoft.graph.complianceManagementPartnerAssignment;
  iosOnboarded : Boolean;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastHeartbeatDateTime : DateTime;
  macOsEnrollmentAssignments : many microsoft.graph.complianceManagementPartnerAssignment;
  macOsOnboarded : Boolean;
  partnerState : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.onPremisesConditionalAccessSettings : microsoft.graph.entity {
  enabled : Boolean;
  excludedGroups : many UUID;
  includedGroups : many UUID;
  overrideDefaultRule : Boolean;
};

@cds.persistence.skip : true
entity microsoft.graph.deviceCategory : microsoft.graph.entity {
  description : LargeString;
  displayName : LargeString;
};

@cds.persistence.skip : true
abstract entity microsoft.graph.deviceEnrollmentConfiguration : microsoft.graph.entity {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  description : LargeString;
  displayName : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastModifiedDateTime : DateTime;
  priority : Integer;
  version : Integer;
  @cds.ambiguous : 'missing on condition?'
  assignments : Association to many microsoft.graph.enrollmentConfigurationAssignment {  };
};

@cds.persistence.skip : true
entity microsoft.graph.deviceManagementPartner : microsoft.graph.entity {
  displayName : LargeString;
  isConfigured : Boolean;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastHeartbeatDateTime : DateTime;
  partnerAppType : LargeString;
  partnerState : LargeString;
  singleTenantAppId : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  whenPartnerDevicesWillBeMarkedAsNonCompliantDateTime : DateTime;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  whenPartnerDevicesWillBeRemovedDateTime : DateTime;
};

@cds.persistence.skip : true
entity microsoft.graph.deviceManagementExchangeConnector : microsoft.graph.entity {
  connectorServerName : LargeString;
  exchangeAlias : LargeString;
  exchangeConnectorType : LargeString;
  exchangeOrganization : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastSyncDateTime : DateTime;
  primarySmtpAddress : LargeString;
  serverName : LargeString;
  status : LargeString;
  version : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.mobileThreatDefenseConnector : microsoft.graph.entity {
  androidDeviceBlockedOnMissingPartnerData : Boolean;
  androidEnabled : Boolean;
  iosDeviceBlockedOnMissingPartnerData : Boolean;
  iosEnabled : Boolean;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastHeartbeatDateTime : DateTime;
  partnerState : LargeString;
  partnerUnresponsivenessThresholdInDays : Integer;
  partnerUnsupportedOsVersionBlocked : Boolean;
};

@cds.persistence.skip : true
entity microsoft.graph.applePushNotificationCertificate : microsoft.graph.entity {
  appleIdentifier : LargeString;
  certificate : LargeString;
  certificateSerialNumber : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  expirationDateTime : DateTime;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastModifiedDateTime : DateTime;
  topicIdentifier : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.detectedApp : microsoft.graph.entity {
  deviceCount : Integer;
  displayName : LargeString;
  sizeInByte : Integer64;
  version : LargeString;
  @cds.ambiguous : 'missing on condition?'
  managedDevices : Association to many microsoft.graph.managedDevice {  };
};

@cds.persistence.skip : true
entity microsoft.graph.managedDeviceOverview : microsoft.graph.entity {
  deviceExchangeAccessStateSummary : microsoft.graph.deviceExchangeAccessStateSummary;
  deviceOperatingSystemSummary : microsoft.graph.deviceOperatingSystemSummary;
  dualEnrolledDeviceCount : Integer;
  enrolledDeviceCount : Integer;
  mdmEnrolledCount : Integer;
};

@cds.persistence.skip : true
entity microsoft.graph.importedWindowsAutopilotDeviceIdentity : microsoft.graph.entity {
  assignedUserPrincipalName : LargeString;
  groupTag : LargeString;
  hardwareIdentifier : LargeBinary;
  importId : LargeString;
  productKey : LargeString;
  serialNumber : LargeString;
  state : microsoft.graph.importedWindowsAutopilotDeviceIdentityState;
};

@cds.persistence.skip : true
entity microsoft.graph.windowsAutopilotDeviceIdentity : microsoft.graph.entity {
  addressableUserName : LargeString;
  azureActiveDirectoryDeviceId : LargeString;
  displayName : LargeString;
  enrollmentState : LargeString;
  groupTag : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastContactedDateTime : DateTime;
  managedDeviceId : LargeString;
  manufacturer : LargeString;
  model : LargeString;
  productKey : LargeString;
  purchaseOrderIdentifier : LargeString;
  resourceName : LargeString;
  serialNumber : LargeString;
  skuNumber : LargeString;
  systemFamily : LargeString;
  userPrincipalName : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.notificationMessageTemplate : microsoft.graph.entity {
  brandingOptions : LargeString;
  defaultLocale : LargeString;
  displayName : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastModifiedDateTime : DateTime;
  @cds.ambiguous : 'missing on condition?'
  localizedNotificationMessages : Association to many microsoft.graph.localizedNotificationMessage {  };
};

@cds.persistence.skip : true
entity microsoft.graph.resourceOperation : microsoft.graph.entity {
  actionName : LargeString;
  description : LargeString;
  resourceName : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.roleAssignment : microsoft.graph.entity {
  description : LargeString;
  displayName : LargeString;
  resourceScopes : many LargeString;
  @cds.ambiguous : 'missing on condition?'
  roleDefinition : Association to one microsoft.graph.roleDefinition {  };
};

@cds.persistence.skip : true
entity microsoft.graph.deviceAndAppManagementRoleAssignment : microsoft.graph.roleAssignment {
  members : many LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.roleDefinition : microsoft.graph.entity {
  description : LargeString;
  displayName : LargeString;
  isBuiltIn : Boolean;
  rolePermissions : many microsoft.graph.rolePermission;
  @cds.ambiguous : 'missing on condition?'
  roleAssignments : Association to many microsoft.graph.roleAssignment {  };
};

@cds.persistence.skip : true
entity microsoft.graph.remoteAssistancePartner : microsoft.graph.entity {
  displayName : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastConnectionDateTime : DateTime;
  onboardingStatus : LargeString;
  onboardingUrl : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.deviceManagementReports : microsoft.graph.entity {
  @cds.ambiguous : 'missing on condition?'
  exportJobs : Association to many microsoft.graph.deviceManagementExportJob {  };
};

@cds.persistence.skip : true
entity microsoft.graph.telecomExpenseManagementPartner : microsoft.graph.entity {
  appAuthorized : Boolean;
  displayName : LargeString;
  enabled : Boolean;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastConnectionDateTime : DateTime;
  url : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.windowsInformationProtectionAppLearningSummary : microsoft.graph.entity {
  applicationName : LargeString;
  applicationType : LargeString;
  deviceCount : Integer;
};

@cds.persistence.skip : true
entity microsoft.graph.windowsInformationProtectionNetworkLearningSummary : microsoft.graph.entity {
  deviceCount : Integer;
  url : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.termsAndConditionsAcceptanceStatus : microsoft.graph.entity {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  acceptedDateTime : DateTime;
  acceptedVersion : Integer;
  userDisplayName : LargeString;
  userPrincipalName : LargeString;
  @cds.ambiguous : 'missing on condition?'
  termsAndConditions : Association to one microsoft.graph.termsAndConditions {  };
};

@cds.persistence.skip : true
entity microsoft.graph.termsAndConditionsAssignment : microsoft.graph.entity {
  target : microsoft.graph.deviceAndAppManagementAssignmentTarget;
};

@cds.persistence.skip : true
entity microsoft.graph.androidCompliancePolicy : microsoft.graph.deviceCompliancePolicy {
  deviceThreatProtectionEnabled : Boolean;
  deviceThreatProtectionRequiredSecurityLevel : LargeString;
  minAndroidSecurityPatchLevel : LargeString;
  osMaximumVersion : LargeString;
  osMinimumVersion : LargeString;
  passwordExpirationDays : Integer;
  passwordMinimumLength : Integer;
  passwordMinutesOfInactivityBeforeLock : Integer;
  passwordPreviousPasswordBlockCount : Integer;
  passwordRequired : Boolean;
  passwordRequiredType : LargeString;
  securityBlockJailbrokenDevices : Boolean;
  securityDisableUsbDebugging : Boolean;
  securityPreventInstallAppsFromUnknownSources : Boolean;
  securityRequireCompanyPortalAppIntegrity : Boolean;
  securityRequireGooglePlayServices : Boolean;
  securityRequireSafetyNetAttestationBasicIntegrity : Boolean;
  securityRequireSafetyNetAttestationCertifiedDevice : Boolean;
  securityRequireUpToDateSecurityProviders : Boolean;
  securityRequireVerifyApps : Boolean;
  storageRequireEncryption : Boolean;
};

@cds.persistence.skip : true
entity microsoft.graph.androidCustomConfiguration : microsoft.graph.deviceConfiguration {
  omaSettings : many microsoft.graph.omaSetting;
};

@cds.persistence.skip : true
entity microsoft.graph.androidGeneralDeviceConfiguration : microsoft.graph.deviceConfiguration {
  appsBlockClipboardSharing : Boolean;
  appsBlockCopyPaste : Boolean;
  appsBlockYouTube : Boolean;
  appsHideList : many microsoft.graph.appListItem;
  appsInstallAllowList : many microsoft.graph.appListItem;
  appsLaunchBlockList : many microsoft.graph.appListItem;
  bluetoothBlocked : Boolean;
  cameraBlocked : Boolean;
  cellularBlockDataRoaming : Boolean;
  cellularBlockMessaging : Boolean;
  cellularBlockVoiceRoaming : Boolean;
  cellularBlockWiFiTethering : Boolean;
  compliantAppListType : LargeString;
  compliantAppsList : many microsoft.graph.appListItem;
  deviceSharingAllowed : Boolean;
  diagnosticDataBlockSubmission : Boolean;
  factoryResetBlocked : Boolean;
  googleAccountBlockAutoSync : Boolean;
  googlePlayStoreBlocked : Boolean;
  kioskModeApps : many microsoft.graph.appListItem;
  kioskModeBlockSleepButton : Boolean;
  kioskModeBlockVolumeButtons : Boolean;
  locationServicesBlocked : Boolean;
  nfcBlocked : Boolean;
  passwordBlockFingerprintUnlock : Boolean;
  passwordBlockTrustAgents : Boolean;
  passwordExpirationDays : Integer;
  passwordMinimumLength : Integer;
  passwordMinutesOfInactivityBeforeScreenTimeout : Integer;
  passwordPreviousPasswordBlockCount : Integer;
  passwordRequired : Boolean;
  passwordRequiredType : LargeString;
  passwordSignInFailureCountBeforeFactoryReset : Integer;
  powerOffBlocked : Boolean;
  screenCaptureBlocked : Boolean;
  securityRequireVerifyApps : Boolean;
  storageBlockGoogleBackup : Boolean;
  storageBlockRemovableStorage : Boolean;
  storageRequireDeviceEncryption : Boolean;
  storageRequireRemovableStorageEncryption : Boolean;
  voiceAssistantBlocked : Boolean;
  voiceDialingBlocked : Boolean;
  webBrowserBlockAutofill : Boolean;
  webBrowserBlocked : Boolean;
  webBrowserBlockJavaScript : Boolean;
  webBrowserBlockPopups : Boolean;
  webBrowserCookieSettings : LargeString;
  wiFiBlocked : Boolean;
};

@cds.persistence.skip : true
entity microsoft.graph.androidWorkProfileCompliancePolicy : microsoft.graph.deviceCompliancePolicy {
  deviceThreatProtectionEnabled : Boolean;
  deviceThreatProtectionRequiredSecurityLevel : LargeString;
  minAndroidSecurityPatchLevel : LargeString;
  osMaximumVersion : LargeString;
  osMinimumVersion : LargeString;
  passwordExpirationDays : Integer;
  passwordMinimumLength : Integer;
  passwordMinutesOfInactivityBeforeLock : Integer;
  passwordPreviousPasswordBlockCount : Integer;
  passwordRequired : Boolean;
  passwordRequiredType : LargeString;
  securityBlockJailbrokenDevices : Boolean;
  securityDisableUsbDebugging : Boolean;
  securityPreventInstallAppsFromUnknownSources : Boolean;
  securityRequireCompanyPortalAppIntegrity : Boolean;
  securityRequireGooglePlayServices : Boolean;
  securityRequireSafetyNetAttestationBasicIntegrity : Boolean;
  securityRequireSafetyNetAttestationCertifiedDevice : Boolean;
  securityRequireUpToDateSecurityProviders : Boolean;
  securityRequireVerifyApps : Boolean;
  storageRequireEncryption : Boolean;
};

@cds.persistence.skip : true
entity microsoft.graph.androidWorkProfileCustomConfiguration : microsoft.graph.deviceConfiguration {
  omaSettings : many microsoft.graph.omaSetting;
};

@cds.persistence.skip : true
entity microsoft.graph.androidWorkProfileGeneralDeviceConfiguration : microsoft.graph.deviceConfiguration {
  passwordBlockFingerprintUnlock : Boolean;
  passwordBlockTrustAgents : Boolean;
  passwordExpirationDays : Integer;
  passwordMinimumLength : Integer;
  passwordMinutesOfInactivityBeforeScreenTimeout : Integer;
  passwordPreviousPasswordBlockCount : Integer;
  passwordRequiredType : LargeString;
  passwordSignInFailureCountBeforeFactoryReset : Integer;
  securityRequireVerifyApps : Boolean;
  workProfileBlockAddingAccounts : Boolean;
  workProfileBlockCamera : Boolean;
  workProfileBlockCrossProfileCallerId : Boolean;
  workProfileBlockCrossProfileContactsSearch : Boolean;
  workProfileBlockCrossProfileCopyPaste : Boolean;
  workProfileBlockNotificationsWhileDeviceLocked : Boolean;
  workProfileBlockScreenCapture : Boolean;
  workProfileBluetoothEnableContactSharing : Boolean;
  workProfileDataSharingType : LargeString;
  workProfileDefaultAppPermissionPolicy : LargeString;
  workProfilePasswordBlockFingerprintUnlock : Boolean;
  workProfilePasswordBlockTrustAgents : Boolean;
  workProfilePasswordExpirationDays : Integer;
  workProfilePasswordMinimumLength : Integer;
  workProfilePasswordMinLetterCharacters : Integer;
  workProfilePasswordMinLowerCaseCharacters : Integer;
  workProfilePasswordMinNonLetterCharacters : Integer;
  workProfilePasswordMinNumericCharacters : Integer;
  workProfilePasswordMinSymbolCharacters : Integer;
  workProfilePasswordMinUpperCaseCharacters : Integer;
  workProfilePasswordMinutesOfInactivityBeforeScreenTimeout : Integer;
  workProfilePasswordPreviousPasswordBlockCount : Integer;
  workProfilePasswordRequiredType : LargeString;
  workProfilePasswordSignInFailureCountBeforeFactoryReset : Integer;
  workProfileRequirePassword : Boolean;
};

@cds.persistence.skip : true
abstract entity microsoft.graph.appleDeviceFeaturesConfigurationBase : microsoft.graph.deviceConfiguration {
};

@cds.persistence.skip : true
entity microsoft.graph.deviceComplianceActionItem : microsoft.graph.entity {
  actionType : LargeString;
  gracePeriodHours : Integer;
  notificationMessageCCList : many LargeString;
  notificationTemplateId : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.deviceComplianceDeviceOverview : microsoft.graph.entity {
  configurationVersion : Integer;
  errorCount : Integer;
  failedCount : Integer;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastUpdateDateTime : DateTime;
  notApplicableCount : Integer;
  pendingCount : Integer;
  successCount : Integer;
};

@cds.persistence.skip : true
entity microsoft.graph.deviceComplianceDeviceStatus : microsoft.graph.entity {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  complianceGracePeriodExpirationDateTime : DateTime;
  deviceDisplayName : LargeString;
  deviceModel : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastReportedDateTime : DateTime;
  status : LargeString;
  userName : LargeString;
  userPrincipalName : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.deviceCompliancePolicyAssignment : microsoft.graph.entity {
  target : microsoft.graph.deviceAndAppManagementAssignmentTarget;
};

@cds.persistence.skip : true
entity microsoft.graph.settingStateDeviceSummary : microsoft.graph.entity {
  compliantDeviceCount : Integer;
  conflictDeviceCount : Integer;
  errorDeviceCount : Integer;
  instancePath : LargeString;
  nonCompliantDeviceCount : Integer;
  notApplicableDeviceCount : Integer;
  remediatedDeviceCount : Integer;
  settingName : LargeString;
  unknownDeviceCount : Integer;
};

@cds.persistence.skip : true
entity microsoft.graph.deviceComplianceScheduledActionForRule : microsoft.graph.entity {
  ruleName : LargeString;
  @cds.ambiguous : 'missing on condition?'
  scheduledActionConfigurations : Association to many microsoft.graph.deviceComplianceActionItem {  };
};

@cds.persistence.skip : true
entity microsoft.graph.deviceComplianceUserStatus : microsoft.graph.entity {
  devicesCount : Integer;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastReportedDateTime : DateTime;
  status : LargeString;
  userDisplayName : LargeString;
  userPrincipalName : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.deviceComplianceUserOverview : microsoft.graph.entity {
  configurationVersion : Integer;
  errorCount : Integer;
  failedCount : Integer;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastUpdateDateTime : DateTime;
  notApplicableCount : Integer;
  pendingCount : Integer;
  successCount : Integer;
};

@cds.persistence.skip : true
entity microsoft.graph.deviceComplianceSettingState : microsoft.graph.entity {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  complianceGracePeriodExpirationDateTime : DateTime;
  deviceId : LargeString;
  deviceModel : LargeString;
  deviceName : LargeString;
  setting : LargeString;
  settingName : LargeString;
  state : LargeString;
  userEmail : LargeString;
  userId : LargeString;
  userName : LargeString;
  userPrincipalName : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.deviceCompliancePolicyState : microsoft.graph.entity {
  displayName : LargeString;
  platformType : LargeString;
  settingCount : Integer;
  settingStates : many microsoft.graph.deviceCompliancePolicySettingState;
  state : LargeString;
  version : Integer;
};

@cds.persistence.skip : true
entity microsoft.graph.deviceConfigurationAssignment : microsoft.graph.entity {
  target : microsoft.graph.deviceAndAppManagementAssignmentTarget;
};

@cds.persistence.skip : true
entity microsoft.graph.deviceConfigurationDeviceStatus : microsoft.graph.entity {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  complianceGracePeriodExpirationDateTime : DateTime;
  deviceDisplayName : LargeString;
  deviceModel : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastReportedDateTime : DateTime;
  status : LargeString;
  userName : LargeString;
  userPrincipalName : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.deviceConfigurationDeviceOverview : microsoft.graph.entity {
  configurationVersion : Integer;
  errorCount : Integer;
  failedCount : Integer;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastUpdateDateTime : DateTime;
  notApplicableCount : Integer;
  pendingCount : Integer;
  successCount : Integer;
};

@cds.persistence.skip : true
entity microsoft.graph.deviceConfigurationUserStatus : microsoft.graph.entity {
  devicesCount : Integer;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastReportedDateTime : DateTime;
  status : LargeString;
  userDisplayName : LargeString;
  userPrincipalName : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.deviceConfigurationUserOverview : microsoft.graph.entity {
  configurationVersion : Integer;
  errorCount : Integer;
  failedCount : Integer;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastUpdateDateTime : DateTime;
  notApplicableCount : Integer;
  pendingCount : Integer;
  successCount : Integer;
};

@cds.persistence.skip : true
entity microsoft.graph.deviceConfigurationState : microsoft.graph.entity {
  displayName : LargeString;
  platformType : LargeString;
  settingCount : Integer;
  settingStates : many microsoft.graph.deviceConfigurationSettingState;
  state : LargeString;
  version : Integer;
};

@cds.persistence.skip : true
entity microsoft.graph.editionUpgradeConfiguration : microsoft.graph.deviceConfiguration {
  license : LargeString;
  licenseType : LargeString;
  productKey : LargeString;
  targetEdition : LargeString;
};

@cds.persistence.skip : true
abstract entity microsoft.graph.iosCertificateProfile : microsoft.graph.deviceConfiguration {
};

@cds.persistence.skip : true
entity microsoft.graph.iosCompliancePolicy : microsoft.graph.deviceCompliancePolicy {
  deviceThreatProtectionEnabled : Boolean;
  deviceThreatProtectionRequiredSecurityLevel : LargeString;
  managedEmailProfileRequired : Boolean;
  osMaximumVersion : LargeString;
  osMinimumVersion : LargeString;
  passcodeBlockSimple : Boolean;
  passcodeExpirationDays : Integer;
  passcodeMinimumCharacterSetCount : Integer;
  passcodeMinimumLength : Integer;
  passcodeMinutesOfInactivityBeforeLock : Integer;
  passcodePreviousPasscodeBlockCount : Integer;
  passcodeRequired : Boolean;
  passcodeRequiredType : LargeString;
  securityBlockJailbrokenDevices : Boolean;
};

@cds.persistence.skip : true
entity microsoft.graph.iosCustomConfiguration : microsoft.graph.deviceConfiguration {
  payload : LargeBinary;
  payloadFileName : LargeString;
  payloadName : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.iosDeviceFeaturesConfiguration : microsoft.graph.appleDeviceFeaturesConfigurationBase {
  assetTagTemplate : LargeString;
  homeScreenDockIcons : many microsoft.graph.iosHomeScreenItem;
  homeScreenPages : many microsoft.graph.iosHomeScreenPage;
  lockScreenFootnote : LargeString;
  notificationSettings : many microsoft.graph.iosNotificationSettings;
};

@cds.persistence.skip : true
entity microsoft.graph.iosGeneralDeviceConfiguration : microsoft.graph.deviceConfiguration {
  accountBlockModification : Boolean;
  activationLockAllowWhenSupervised : Boolean;
  airDropBlocked : Boolean;
  airDropForceUnmanagedDropTarget : Boolean;
  airPlayForcePairingPasswordForOutgoingRequests : Boolean;
  appleNewsBlocked : Boolean;
  appleWatchBlockPairing : Boolean;
  appleWatchForceWristDetection : Boolean;
  appsSingleAppModeList : many microsoft.graph.appListItem;
  appStoreBlockAutomaticDownloads : Boolean;
  appStoreBlocked : Boolean;
  appStoreBlockInAppPurchases : Boolean;
  appStoreBlockUIAppInstallation : Boolean;
  appStoreRequirePassword : Boolean;
  appsVisibilityList : many microsoft.graph.appListItem;
  appsVisibilityListType : LargeString;
  bluetoothBlockModification : Boolean;
  cameraBlocked : Boolean;
  cellularBlockDataRoaming : Boolean;
  cellularBlockGlobalBackgroundFetchWhileRoaming : Boolean;
  cellularBlockPerAppDataModification : Boolean;
  cellularBlockPersonalHotspot : Boolean;
  cellularBlockVoiceRoaming : Boolean;
  certificatesBlockUntrustedTlsCertificates : Boolean;
  classroomAppBlockRemoteScreenObservation : Boolean;
  classroomAppForceUnpromptedScreenObservation : Boolean;
  compliantAppListType : LargeString;
  compliantAppsList : many microsoft.graph.appListItem;
  configurationProfileBlockChanges : Boolean;
  definitionLookupBlocked : Boolean;
  deviceBlockEnableRestrictions : Boolean;
  deviceBlockEraseContentAndSettings : Boolean;
  deviceBlockNameModification : Boolean;
  diagnosticDataBlockSubmission : Boolean;
  diagnosticDataBlockSubmissionModification : Boolean;
  documentsBlockManagedDocumentsInUnmanagedApps : Boolean;
  documentsBlockUnmanagedDocumentsInManagedApps : Boolean;
  emailInDomainSuffixes : many LargeString;
  enterpriseAppBlockTrust : Boolean;
  enterpriseAppBlockTrustModification : Boolean;
  faceTimeBlocked : Boolean;
  findMyFriendsBlocked : Boolean;
  gameCenterBlocked : Boolean;
  gamingBlockGameCenterFriends : Boolean;
  gamingBlockMultiplayer : Boolean;
  hostPairingBlocked : Boolean;
  iBooksStoreBlocked : Boolean;
  iBooksStoreBlockErotica : Boolean;
  iCloudBlockActivityContinuation : Boolean;
  iCloudBlockBackup : Boolean;
  iCloudBlockDocumentSync : Boolean;
  iCloudBlockManagedAppsSync : Boolean;
  iCloudBlockPhotoLibrary : Boolean;
  iCloudBlockPhotoStreamSync : Boolean;
  iCloudBlockSharedPhotoStream : Boolean;
  iCloudRequireEncryptedBackup : Boolean;
  iTunesBlockExplicitContent : Boolean;
  iTunesBlockMusicService : Boolean;
  iTunesBlockRadio : Boolean;
  keyboardBlockAutoCorrect : Boolean;
  keyboardBlockDictation : Boolean;
  keyboardBlockPredictive : Boolean;
  keyboardBlockShortcuts : Boolean;
  keyboardBlockSpellCheck : Boolean;
  kioskModeAllowAssistiveSpeak : Boolean;
  kioskModeAllowAssistiveTouchSettings : Boolean;
  kioskModeAllowAutoLock : Boolean;
  kioskModeAllowColorInversionSettings : Boolean;
  kioskModeAllowRingerSwitch : Boolean;
  kioskModeAllowScreenRotation : Boolean;
  kioskModeAllowSleepButton : Boolean;
  kioskModeAllowTouchscreen : Boolean;
  kioskModeAllowVoiceOverSettings : Boolean;
  kioskModeAllowVolumeButtons : Boolean;
  kioskModeAllowZoomSettings : Boolean;
  kioskModeAppStoreUrl : LargeString;
  kioskModeBuiltInAppId : LargeString;
  kioskModeManagedAppId : LargeString;
  kioskModeRequireAssistiveTouch : Boolean;
  kioskModeRequireColorInversion : Boolean;
  kioskModeRequireMonoAudio : Boolean;
  kioskModeRequireVoiceOver : Boolean;
  kioskModeRequireZoom : Boolean;
  lockScreenBlockControlCenter : Boolean;
  lockScreenBlockNotificationView : Boolean;
  lockScreenBlockPassbook : Boolean;
  lockScreenBlockTodayView : Boolean;
  mediaContentRatingApps : LargeString;
  mediaContentRatingAustralia : microsoft.graph.mediaContentRatingAustralia;
  mediaContentRatingCanada : microsoft.graph.mediaContentRatingCanada;
  mediaContentRatingFrance : microsoft.graph.mediaContentRatingFrance;
  mediaContentRatingGermany : microsoft.graph.mediaContentRatingGermany;
  mediaContentRatingIreland : microsoft.graph.mediaContentRatingIreland;
  mediaContentRatingJapan : microsoft.graph.mediaContentRatingJapan;
  mediaContentRatingNewZealand : microsoft.graph.mediaContentRatingNewZealand;
  mediaContentRatingUnitedKingdom : microsoft.graph.mediaContentRatingUnitedKingdom;
  mediaContentRatingUnitedStates : microsoft.graph.mediaContentRatingUnitedStates;
  messagesBlocked : Boolean;
  networkUsageRules : many microsoft.graph.iosNetworkUsageRule;
  notificationsBlockSettingsModification : Boolean;
  passcodeBlockFingerprintModification : Boolean;
  passcodeBlockFingerprintUnlock : Boolean;
  passcodeBlockModification : Boolean;
  passcodeBlockSimple : Boolean;
  passcodeExpirationDays : Integer;
  passcodeMinimumCharacterSetCount : Integer;
  passcodeMinimumLength : Integer;
  passcodeMinutesOfInactivityBeforeLock : Integer;
  passcodeMinutesOfInactivityBeforeScreenTimeout : Integer;
  passcodePreviousPasscodeBlockCount : Integer;
  passcodeRequired : Boolean;
  passcodeRequiredType : LargeString;
  passcodeSignInFailureCountBeforeWipe : Integer;
  podcastsBlocked : Boolean;
  safariBlockAutofill : Boolean;
  safariBlocked : Boolean;
  safariBlockJavaScript : Boolean;
  safariBlockPopups : Boolean;
  safariCookieSettings : LargeString;
  safariManagedDomains : many LargeString;
  safariPasswordAutoFillDomains : many LargeString;
  safariRequireFraudWarning : Boolean;
  screenCaptureBlocked : Boolean;
  siriBlocked : Boolean;
  siriBlockedWhenLocked : Boolean;
  siriBlockUserGeneratedContent : Boolean;
  siriRequireProfanityFilter : Boolean;
  spotlightBlockInternetResults : Boolean;
  voiceDialingBlocked : Boolean;
  wallpaperBlockModification : Boolean;
  wiFiConnectOnlyToConfiguredNetworks : Boolean;
};

@cds.persistence.skip : true
entity microsoft.graph.iosUpdateConfiguration : microsoft.graph.deviceConfiguration {
  activeHoursEnd : Time;
  activeHoursStart : Time;
  scheduledInstallDays : LargeString;
  utcTimeOffsetInMinutes : Integer;
};

@cds.persistence.skip : true
entity microsoft.graph.macOSCompliancePolicy : microsoft.graph.deviceCompliancePolicy {
  deviceThreatProtectionEnabled : Boolean;
  deviceThreatProtectionRequiredSecurityLevel : LargeString;
  firewallBlockAllIncoming : Boolean;
  firewallEnabled : Boolean;
  firewallEnableStealthMode : Boolean;
  osMaximumVersion : LargeString;
  osMinimumVersion : LargeString;
  passwordBlockSimple : Boolean;
  passwordExpirationDays : Integer;
  passwordMinimumCharacterSetCount : Integer;
  passwordMinimumLength : Integer;
  passwordMinutesOfInactivityBeforeLock : Integer;
  passwordPreviousPasswordBlockCount : Integer;
  passwordRequired : Boolean;
  passwordRequiredType : LargeString;
  storageRequireEncryption : Boolean;
  systemIntegrityProtectionEnabled : Boolean;
};

@cds.persistence.skip : true
entity microsoft.graph.macOSCustomConfiguration : microsoft.graph.deviceConfiguration {
  payload : LargeBinary;
  payloadFileName : LargeString;
  payloadName : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.macOSDeviceFeaturesConfiguration : microsoft.graph.appleDeviceFeaturesConfigurationBase {
};

@cds.persistence.skip : true
entity microsoft.graph.macOSGeneralDeviceConfiguration : microsoft.graph.deviceConfiguration {
  compliantAppListType : LargeString;
  compliantAppsList : many microsoft.graph.appListItem;
  emailInDomainSuffixes : many LargeString;
  passwordBlockSimple : Boolean;
  passwordExpirationDays : Integer;
  passwordMinimumCharacterSetCount : Integer;
  passwordMinimumLength : Integer;
  passwordMinutesOfInactivityBeforeLock : Integer;
  passwordMinutesOfInactivityBeforeScreenTimeout : Integer;
  passwordPreviousPasswordBlockCount : Integer;
  passwordRequired : Boolean;
  passwordRequiredType : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.reportRoot : microsoft.graph.entity {
  @cds.ambiguous : 'missing on condition?'
  dailyPrintUsageByPrinter : Association to many microsoft.graph.printUsageByPrinter {  };
  @cds.ambiguous : 'missing on condition?'
  dailyPrintUsageByUser : Association to many microsoft.graph.printUsageByUser {  };
  @cds.ambiguous : 'missing on condition?'
  monthlyPrintUsageByPrinter : Association to many microsoft.graph.printUsageByPrinter {  };
  @cds.ambiguous : 'missing on condition?'
  monthlyPrintUsageByUser : Association to many microsoft.graph.printUsageByUser {  };
};

@cds.persistence.skip : true
abstract entity microsoft.graph.printUsage : microsoft.graph.entity {
  completedBlackAndWhiteJobCount : Integer64;
  completedColorJobCount : Integer64;
  incompleteJobCount : Integer64;
  usageDate : Date;
};

@cds.persistence.skip : true
entity microsoft.graph.printUsageByPrinter : microsoft.graph.printUsage {
  printerId : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.printUsageByUser : microsoft.graph.printUsage {
  userPrincipalName : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.sharedPCConfiguration : microsoft.graph.deviceConfiguration {
  accountManagerPolicy : microsoft.graph.sharedPCAccountManagerPolicy;
  allowedAccounts : LargeString;
  allowLocalStorage : Boolean;
  disableAccountManager : Boolean;
  disableEduPolicies : Boolean;
  disablePowerPolicies : Boolean;
  disableSignInOnResume : Boolean;
  enabled : Boolean;
  idleTimeBeforeSleepInSeconds : Integer;
  kioskAppDisplayName : LargeString;
  kioskAppUserModelId : LargeString;
  maintenanceStartTime : Time;
};

@cds.persistence.skip : true
entity microsoft.graph.windows10CompliancePolicy : microsoft.graph.deviceCompliancePolicy {
  bitLockerEnabled : Boolean;
  codeIntegrityEnabled : Boolean;
  earlyLaunchAntiMalwareDriverEnabled : Boolean;
  mobileOsMaximumVersion : LargeString;
  mobileOsMinimumVersion : LargeString;
  osMaximumVersion : LargeString;
  osMinimumVersion : LargeString;
  passwordBlockSimple : Boolean;
  passwordExpirationDays : Integer;
  passwordMinimumCharacterSetCount : Integer;
  passwordMinimumLength : Integer;
  passwordMinutesOfInactivityBeforeLock : Integer;
  passwordPreviousPasswordBlockCount : Integer;
  passwordRequired : Boolean;
  passwordRequiredToUnlockFromIdle : Boolean;
  passwordRequiredType : LargeString;
  requireHealthyDeviceReport : Boolean;
  secureBootEnabled : Boolean;
  storageRequireEncryption : Boolean;
};

@cds.persistence.skip : true
entity microsoft.graph.windows10CustomConfiguration : microsoft.graph.deviceConfiguration {
  omaSettings : many microsoft.graph.omaSetting;
};

@cds.persistence.skip : true
entity microsoft.graph.windows10EndpointProtectionConfiguration : microsoft.graph.deviceConfiguration {
  applicationGuardAllowPersistence : Boolean;
  applicationGuardAllowPrintToLocalPrinters : Boolean;
  applicationGuardAllowPrintToNetworkPrinters : Boolean;
  applicationGuardAllowPrintToPDF : Boolean;
  applicationGuardAllowPrintToXPS : Boolean;
  applicationGuardBlockClipboardSharing : LargeString;
  applicationGuardBlockFileTransfer : LargeString;
  applicationGuardBlockNonEnterpriseContent : Boolean;
  applicationGuardEnabled : Boolean;
  applicationGuardForceAuditing : Boolean;
  appLockerApplicationControl : LargeString;
  bitLockerDisableWarningForOtherDiskEncryption : Boolean;
  bitLockerEnableStorageCardEncryptionOnMobile : Boolean;
  bitLockerEncryptDevice : Boolean;
  bitLockerRemovableDrivePolicy : microsoft.graph.bitLockerRemovableDrivePolicy;
  defenderAdditionalGuardedFolders : many LargeString;
  defenderAttackSurfaceReductionExcludedPaths : many LargeString;
  defenderExploitProtectionXml : LargeBinary;
  defenderExploitProtectionXmlFileName : LargeString;
  defenderGuardedFoldersAllowedAppPaths : many LargeString;
  defenderSecurityCenterBlockExploitProtectionOverride : Boolean;
  firewallBlockStatefulFTP : Boolean;
  firewallCertificateRevocationListCheckMethod : LargeString;
  firewallIdleTimeoutForSecurityAssociationInSeconds : Integer;
  firewallIPSecExemptionsAllowDHCP : Boolean;
  firewallIPSecExemptionsAllowICMP : Boolean;
  firewallIPSecExemptionsAllowNeighborDiscovery : Boolean;
  firewallIPSecExemptionsAllowRouterDiscovery : Boolean;
  firewallMergeKeyingModuleSettings : Boolean;
  firewallPacketQueueingMethod : LargeString;
  firewallPreSharedKeyEncodingMethod : LargeString;
  firewallProfileDomain : microsoft.graph.windowsFirewallNetworkProfile;
  firewallProfilePrivate : microsoft.graph.windowsFirewallNetworkProfile;
  firewallProfilePublic : microsoft.graph.windowsFirewallNetworkProfile;
  smartScreenBlockOverrideForFiles : Boolean;
  smartScreenEnableInShell : Boolean;
};

@cds.persistence.skip : true
entity microsoft.graph.windows10EnterpriseModernAppManagementConfiguration : microsoft.graph.deviceConfiguration {
  uninstallBuiltInApps : Boolean;
};

@cds.persistence.skip : true
entity microsoft.graph.windows10GeneralConfiguration : microsoft.graph.deviceConfiguration {
  accountsBlockAddingNonMicrosoftAccountEmail : Boolean;
  antiTheftModeBlocked : Boolean;
  appsAllowTrustedAppsSideloading : LargeString;
  appsBlockWindowsStoreOriginatedApps : Boolean;
  bluetoothAllowedServices : many LargeString;
  bluetoothBlockAdvertising : Boolean;
  bluetoothBlockDiscoverableMode : Boolean;
  bluetoothBlocked : Boolean;
  bluetoothBlockPrePairing : Boolean;
  cameraBlocked : Boolean;
  cellularBlockDataWhenRoaming : Boolean;
  cellularBlockVpn : Boolean;
  cellularBlockVpnWhenRoaming : Boolean;
  certificatesBlockManualRootCertificateInstallation : Boolean;
  connectedDevicesServiceBlocked : Boolean;
  copyPasteBlocked : Boolean;
  cortanaBlocked : Boolean;
  defenderBlockEndUserAccess : Boolean;
  defenderCloudBlockLevel : LargeString;
  defenderDaysBeforeDeletingQuarantinedMalware : Integer;
  defenderDetectedMalwareActions : microsoft.graph.defenderDetectedMalwareActions;
  defenderFileExtensionsToExclude : many LargeString;
  defenderFilesAndFoldersToExclude : many LargeString;
  defenderMonitorFileActivity : LargeString;
  defenderProcessesToExclude : many LargeString;
  defenderPromptForSampleSubmission : LargeString;
  defenderRequireBehaviorMonitoring : Boolean;
  defenderRequireCloudProtection : Boolean;
  defenderRequireNetworkInspectionSystem : Boolean;
  defenderRequireRealTimeMonitoring : Boolean;
  defenderScanArchiveFiles : Boolean;
  defenderScanDownloads : Boolean;
  defenderScanIncomingMail : Boolean;
  defenderScanMappedNetworkDrivesDuringFullScan : Boolean;
  defenderScanMaxCpu : Integer;
  defenderScanNetworkFiles : Boolean;
  defenderScanRemovableDrivesDuringFullScan : Boolean;
  defenderScanScriptsLoadedInInternetExplorer : Boolean;
  defenderScanType : LargeString;
  defenderScheduledQuickScanTime : Time;
  defenderScheduledScanTime : Time;
  defenderSignatureUpdateIntervalInHours : Integer;
  defenderSystemScanSchedule : LargeString;
  developerUnlockSetting : LargeString;
  deviceManagementBlockFactoryResetOnMobile : Boolean;
  deviceManagementBlockManualUnenroll : Boolean;
  diagnosticsDataSubmissionMode : LargeString;
  edgeAllowStartPagesModification : Boolean;
  edgeBlockAccessToAboutFlags : Boolean;
  edgeBlockAddressBarDropdown : Boolean;
  edgeBlockAutofill : Boolean;
  edgeBlockCompatibilityList : Boolean;
  edgeBlockDeveloperTools : Boolean;
  edgeBlocked : Boolean;
  edgeBlockExtensions : Boolean;
  edgeBlockInPrivateBrowsing : Boolean;
  edgeBlockJavaScript : Boolean;
  edgeBlockLiveTileDataCollection : Boolean;
  edgeBlockPasswordManager : Boolean;
  edgeBlockPopups : Boolean;
  edgeBlockSearchSuggestions : Boolean;
  edgeBlockSendingDoNotTrackHeader : Boolean;
  edgeBlockSendingIntranetTrafficToInternetExplorer : Boolean;
  edgeClearBrowsingDataOnExit : Boolean;
  edgeCookiePolicy : LargeString;
  edgeDisableFirstRunPage : Boolean;
  edgeEnterpriseModeSiteListLocation : LargeString;
  edgeFirstRunUrl : LargeString;
  edgeHomepageUrls : many LargeString;
  edgeRequireSmartScreen : Boolean;
  edgeSearchEngine : microsoft.graph.edgeSearchEngineBase;
  edgeSendIntranetTrafficToInternetExplorer : Boolean;
  edgeSyncFavoritesWithInternetExplorer : Boolean;
  enterpriseCloudPrintDiscoveryEndPoint : LargeString;
  enterpriseCloudPrintDiscoveryMaxLimit : Integer;
  enterpriseCloudPrintMopriaDiscoveryResourceIdentifier : LargeString;
  enterpriseCloudPrintOAuthAuthority : LargeString;
  enterpriseCloudPrintOAuthClientIdentifier : LargeString;
  enterpriseCloudPrintResourceIdentifier : LargeString;
  experienceBlockDeviceDiscovery : Boolean;
  experienceBlockErrorDialogWhenNoSIM : Boolean;
  experienceBlockTaskSwitcher : Boolean;
  gameDvrBlocked : Boolean;
  internetSharingBlocked : Boolean;
  locationServicesBlocked : Boolean;
  lockScreenAllowTimeoutConfiguration : Boolean;
  lockScreenBlockActionCenterNotifications : Boolean;
  lockScreenBlockCortana : Boolean;
  lockScreenBlockToastNotifications : Boolean;
  lockScreenTimeoutInSeconds : Integer;
  logonBlockFastUserSwitching : Boolean;
  microsoftAccountBlocked : Boolean;
  microsoftAccountBlockSettingsSync : Boolean;
  networkProxyApplySettingsDeviceWide : Boolean;
  networkProxyAutomaticConfigurationUrl : LargeString;
  networkProxyDisableAutoDetect : Boolean;
  networkProxyServer : microsoft.graph.windows10NetworkProxyServer;
  nfcBlocked : Boolean;
  oneDriveDisableFileSync : Boolean;
  passwordBlockSimple : Boolean;
  passwordExpirationDays : Integer;
  passwordMinimumCharacterSetCount : Integer;
  passwordMinimumLength : Integer;
  passwordMinutesOfInactivityBeforeScreenTimeout : Integer;
  passwordPreviousPasswordBlockCount : Integer;
  passwordRequired : Boolean;
  passwordRequiredType : LargeString;
  passwordRequireWhenResumeFromIdleState : Boolean;
  passwordSignInFailureCountBeforeFactoryReset : Integer;
  personalizationDesktopImageUrl : LargeString;
  personalizationLockScreenImageUrl : LargeString;
  privacyAdvertisingId : LargeString;
  privacyAutoAcceptPairingAndConsentPrompts : Boolean;
  privacyBlockInputPersonalization : Boolean;
  resetProtectionModeBlocked : Boolean;
  safeSearchFilter : LargeString;
  screenCaptureBlocked : Boolean;
  searchBlockDiacritics : Boolean;
  searchDisableAutoLanguageDetection : Boolean;
  searchDisableIndexerBackoff : Boolean;
  searchDisableIndexingEncryptedItems : Boolean;
  searchDisableIndexingRemovableDrive : Boolean;
  searchEnableAutomaticIndexSizeManangement : Boolean;
  searchEnableRemoteQueries : Boolean;
  settingsBlockAccountsPage : Boolean;
  settingsBlockAddProvisioningPackage : Boolean;
  settingsBlockAppsPage : Boolean;
  settingsBlockChangeLanguage : Boolean;
  settingsBlockChangePowerSleep : Boolean;
  settingsBlockChangeRegion : Boolean;
  settingsBlockChangeSystemTime : Boolean;
  settingsBlockDevicesPage : Boolean;
  settingsBlockEaseOfAccessPage : Boolean;
  settingsBlockEditDeviceName : Boolean;
  settingsBlockGamingPage : Boolean;
  settingsBlockNetworkInternetPage : Boolean;
  settingsBlockPersonalizationPage : Boolean;
  settingsBlockPrivacyPage : Boolean;
  settingsBlockRemoveProvisioningPackage : Boolean;
  settingsBlockSettingsApp : Boolean;
  settingsBlockSystemPage : Boolean;
  settingsBlockTimeLanguagePage : Boolean;
  settingsBlockUpdateSecurityPage : Boolean;
  sharedUserAppDataAllowed : Boolean;
  smartScreenBlockPromptOverride : Boolean;
  smartScreenBlockPromptOverrideForFiles : Boolean;
  smartScreenEnableAppInstallControl : Boolean;
  startBlockUnpinningAppsFromTaskbar : Boolean;
  startMenuAppListVisibility : LargeString;
  startMenuHideChangeAccountSettings : Boolean;
  startMenuHideFrequentlyUsedApps : Boolean;
  startMenuHideHibernate : Boolean;
  startMenuHideLock : Boolean;
  startMenuHidePowerButton : Boolean;
  startMenuHideRecentJumpLists : Boolean;
  startMenuHideRecentlyAddedApps : Boolean;
  startMenuHideRestartOptions : Boolean;
  startMenuHideShutDown : Boolean;
  startMenuHideSignOut : Boolean;
  startMenuHideSleep : Boolean;
  startMenuHideSwitchAccount : Boolean;
  startMenuHideUserTile : Boolean;
  startMenuLayoutEdgeAssetsXml : LargeBinary;
  startMenuLayoutXml : LargeBinary;
  startMenuMode : LargeString;
  startMenuPinnedFolderDocuments : LargeString;
  startMenuPinnedFolderDownloads : LargeString;
  startMenuPinnedFolderFileExplorer : LargeString;
  startMenuPinnedFolderHomeGroup : LargeString;
  startMenuPinnedFolderMusic : LargeString;
  startMenuPinnedFolderNetwork : LargeString;
  startMenuPinnedFolderPersonalFolder : LargeString;
  startMenuPinnedFolderPictures : LargeString;
  startMenuPinnedFolderSettings : LargeString;
  startMenuPinnedFolderVideos : LargeString;
  storageBlockRemovableStorage : Boolean;
  storageRequireMobileDeviceEncryption : Boolean;
  storageRestrictAppDataToSystemVolume : Boolean;
  storageRestrictAppInstallToSystemVolume : Boolean;
  tenantLockdownRequireNetworkDuringOutOfBoxExperience : Boolean;
  usbBlocked : Boolean;
  voiceRecordingBlocked : Boolean;
  webRtcBlockLocalhostIpAddress : Boolean;
  wiFiBlockAutomaticConnectHotspots : Boolean;
  wiFiBlocked : Boolean;
  wiFiBlockManualConfiguration : Boolean;
  wiFiScanInterval : Integer;
  windowsSpotlightBlockConsumerSpecificFeatures : Boolean;
  windowsSpotlightBlocked : Boolean;
  windowsSpotlightBlockOnActionCenter : Boolean;
  windowsSpotlightBlockTailoredExperiences : Boolean;
  windowsSpotlightBlockThirdPartyNotifications : Boolean;
  windowsSpotlightBlockWelcomeExperience : Boolean;
  windowsSpotlightBlockWindowsTips : Boolean;
  windowsSpotlightConfigureOnLockScreen : LargeString;
  windowsStoreBlockAutoUpdate : Boolean;
  windowsStoreBlocked : Boolean;
  windowsStoreEnablePrivateStoreOnly : Boolean;
  wirelessDisplayBlockProjectionToThisDevice : Boolean;
  wirelessDisplayBlockUserInputFromReceiver : Boolean;
  wirelessDisplayRequirePinForPairing : Boolean;
};

@cds.persistence.skip : true
entity microsoft.graph.windows10MobileCompliancePolicy : microsoft.graph.deviceCompliancePolicy {
  bitLockerEnabled : Boolean;
  codeIntegrityEnabled : Boolean;
  earlyLaunchAntiMalwareDriverEnabled : Boolean;
  osMaximumVersion : LargeString;
  osMinimumVersion : LargeString;
  passwordBlockSimple : Boolean;
  passwordExpirationDays : Integer;
  passwordMinimumCharacterSetCount : Integer;
  passwordMinimumLength : Integer;
  passwordMinutesOfInactivityBeforeLock : Integer;
  passwordPreviousPasswordBlockCount : Integer;
  passwordRequired : Boolean;
  passwordRequiredType : LargeString;
  passwordRequireToUnlockFromIdle : Boolean;
  secureBootEnabled : Boolean;
  storageRequireEncryption : Boolean;
};

@cds.persistence.skip : true
entity microsoft.graph.windows10SecureAssessmentConfiguration : microsoft.graph.deviceConfiguration {
  allowPrinting : Boolean;
  allowScreenCapture : Boolean;
  allowTextSuggestion : Boolean;
  configurationAccount : LargeString;
  launchUri : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.windows10TeamGeneralConfiguration : microsoft.graph.deviceConfiguration {
  azureOperationalInsightsBlockTelemetry : Boolean;
  azureOperationalInsightsWorkspaceId : LargeString;
  azureOperationalInsightsWorkspaceKey : LargeString;
  connectAppBlockAutoLaunch : Boolean;
  maintenanceWindowBlocked : Boolean;
  maintenanceWindowDurationInHours : Integer;
  maintenanceWindowStartTime : Time;
  miracastBlocked : Boolean;
  miracastChannel : LargeString;
  miracastRequirePin : Boolean;
  settingsBlockMyMeetingsAndFiles : Boolean;
  settingsBlockSessionResume : Boolean;
  settingsBlockSigninSuggestions : Boolean;
  settingsDefaultVolume : Integer;
  settingsScreenTimeoutInMinutes : Integer;
  settingsSessionTimeoutInMinutes : Integer;
  settingsSleepTimeoutInMinutes : Integer;
  welcomeScreenBackgroundImageUrl : LargeString;
  welcomeScreenBlockAutomaticWakeUp : Boolean;
  welcomeScreenMeetingInformation : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.windows81CompliancePolicy : microsoft.graph.deviceCompliancePolicy {
  osMaximumVersion : LargeString;
  osMinimumVersion : LargeString;
  passwordBlockSimple : Boolean;
  passwordExpirationDays : Integer;
  passwordMinimumCharacterSetCount : Integer;
  passwordMinimumLength : Integer;
  passwordMinutesOfInactivityBeforeLock : Integer;
  passwordPreviousPasswordBlockCount : Integer;
  passwordRequired : Boolean;
  passwordRequiredType : LargeString;
  storageRequireEncryption : Boolean;
};

@cds.persistence.skip : true
entity microsoft.graph.windows81GeneralConfiguration : microsoft.graph.deviceConfiguration {
  accountsBlockAddingNonMicrosoftAccountEmail : Boolean;
  applyOnlyToWindows81 : Boolean;
  browserBlockAutofill : Boolean;
  browserBlockAutomaticDetectionOfIntranetSites : Boolean;
  browserBlockEnterpriseModeAccess : Boolean;
  browserBlockJavaScript : Boolean;
  browserBlockPlugins : Boolean;
  browserBlockPopups : Boolean;
  browserBlockSendingDoNotTrackHeader : Boolean;
  browserBlockSingleWordEntryOnIntranetSites : Boolean;
  browserEnterpriseModeSiteListLocation : LargeString;
  browserInternetSecurityLevel : LargeString;
  browserIntranetSecurityLevel : LargeString;
  browserLoggingReportLocation : LargeString;
  browserRequireFirewall : Boolean;
  browserRequireFraudWarning : Boolean;
  browserRequireHighSecurityForRestrictedSites : Boolean;
  browserRequireSmartScreen : Boolean;
  browserTrustedSitesSecurityLevel : LargeString;
  cellularBlockDataRoaming : Boolean;
  diagnosticsBlockDataSubmission : Boolean;
  passwordBlockPicturePasswordAndPin : Boolean;
  passwordExpirationDays : Integer;
  passwordMinimumCharacterSetCount : Integer;
  passwordMinimumLength : Integer;
  passwordMinutesOfInactivityBeforeScreenTimeout : Integer;
  passwordPreviousPasswordBlockCount : Integer;
  passwordRequiredType : LargeString;
  passwordSignInFailureCountBeforeFactoryReset : Integer;
  storageRequireDeviceEncryption : Boolean;
  updatesRequireAutomaticUpdates : Boolean;
  userAccountControlSettings : LargeString;
  workFoldersUrl : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.windowsDefenderAdvancedThreatProtectionConfiguration : microsoft.graph.deviceConfiguration {
  allowSampleSharing : Boolean;
  enableExpeditedTelemetryReporting : Boolean;
};

@cds.persistence.skip : true
entity microsoft.graph.windowsPhone81CompliancePolicy : microsoft.graph.deviceCompliancePolicy {
  osMaximumVersion : LargeString;
  osMinimumVersion : LargeString;
  passwordBlockSimple : Boolean;
  passwordExpirationDays : Integer;
  passwordMinimumCharacterSetCount : Integer;
  passwordMinimumLength : Integer;
  passwordMinutesOfInactivityBeforeLock : Integer;
  passwordPreviousPasswordBlockCount : Integer;
  passwordRequired : Boolean;
  passwordRequiredType : LargeString;
  storageRequireEncryption : Boolean;
};

@cds.persistence.skip : true
entity microsoft.graph.windowsPhone81CustomConfiguration : microsoft.graph.deviceConfiguration {
  omaSettings : many microsoft.graph.omaSetting;
};

@cds.persistence.skip : true
entity microsoft.graph.windowsPhone81GeneralConfiguration : microsoft.graph.deviceConfiguration {
  applyOnlyToWindowsPhone81 : Boolean;
  appsBlockCopyPaste : Boolean;
  bluetoothBlocked : Boolean;
  cameraBlocked : Boolean;
  cellularBlockWifiTethering : Boolean;
  compliantAppListType : LargeString;
  compliantAppsList : many microsoft.graph.appListItem;
  diagnosticDataBlockSubmission : Boolean;
  emailBlockAddingAccounts : Boolean;
  locationServicesBlocked : Boolean;
  microsoftAccountBlocked : Boolean;
  nfcBlocked : Boolean;
  passwordBlockSimple : Boolean;
  passwordExpirationDays : Integer;
  passwordMinimumCharacterSetCount : Integer;
  passwordMinimumLength : Integer;
  passwordMinutesOfInactivityBeforeScreenTimeout : Integer;
  passwordPreviousPasswordBlockCount : Integer;
  passwordRequired : Boolean;
  passwordRequiredType : LargeString;
  passwordSignInFailureCountBeforeFactoryReset : Integer;
  screenCaptureBlocked : Boolean;
  storageBlockRemovableStorage : Boolean;
  storageRequireEncryption : Boolean;
  webBrowserBlocked : Boolean;
  wifiBlockAutomaticConnectHotspots : Boolean;
  wifiBlocked : Boolean;
  wifiBlockHotspotReporting : Boolean;
  windowsStoreBlocked : Boolean;
};

@cds.persistence.skip : true
entity microsoft.graph.windowsUpdateForBusinessConfiguration : microsoft.graph.deviceConfiguration {
  automaticUpdateMode : LargeString;
  businessReadyUpdatesOnly : LargeString;
  deliveryOptimizationMode : LargeString;
  driversExcluded : Boolean;
  featureUpdatesDeferralPeriodInDays : Integer;
  featureUpdatesPaused : Boolean;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  featureUpdatesPauseExpiryDateTime : DateTime;
  installationSchedule : microsoft.graph.windowsUpdateInstallScheduleType;
  microsoftUpdateServiceAllowed : Boolean;
  prereleaseFeatures : LargeString;
  qualityUpdatesDeferralPeriodInDays : Integer;
  qualityUpdatesPaused : Boolean;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  qualityUpdatesPauseExpiryDateTime : DateTime;
};

@cds.persistence.skip : true
entity microsoft.graph.enrollmentConfigurationAssignment : microsoft.graph.entity {
  target : microsoft.graph.deviceAndAppManagementAssignmentTarget;
};

@cds.persistence.skip : true
entity microsoft.graph.deviceEnrollmentLimitConfiguration : microsoft.graph.deviceEnrollmentConfiguration {
  limit : Integer;
};

@cds.persistence.skip : true
entity microsoft.graph.deviceEnrollmentPlatformRestrictionsConfiguration : microsoft.graph.deviceEnrollmentConfiguration {
  androidRestriction : microsoft.graph.deviceEnrollmentPlatformRestriction;
  iosRestriction : microsoft.graph.deviceEnrollmentPlatformRestriction;
  macOSRestriction : microsoft.graph.deviceEnrollmentPlatformRestriction;
  windowsMobileRestriction : microsoft.graph.deviceEnrollmentPlatformRestriction;
  windowsRestriction : microsoft.graph.deviceEnrollmentPlatformRestriction;
};

@cds.persistence.skip : true
entity microsoft.graph.deviceEnrollmentWindowsHelloForBusinessConfiguration : microsoft.graph.deviceEnrollmentConfiguration {
  enhancedBiometricsState : LargeString;
  pinExpirationInDays : Integer;
  pinLowercaseCharactersUsage : LargeString;
  pinMaximumLength : Integer;
  pinMinimumLength : Integer;
  pinPreviousBlockCount : Integer;
  pinSpecialCharactersUsage : LargeString;
  pinUppercaseCharactersUsage : LargeString;
  remotePassportEnabled : Boolean;
  securityDeviceRequired : Boolean;
  state : LargeString;
  unlockWithBiometricsEnabled : Boolean;
};

@cds.persistence.skip : true
entity microsoft.graph.userExperienceAnalyticsDevicePerformance : microsoft.graph.entity {
  averageBlueScreens : Double;
  averageRestarts : Double;
  blueScreenCount : Integer;
  bootScore : Integer;
  coreBootTimeInMs : Integer;
  coreLoginTimeInMs : Integer;
  deviceCount : Integer64;
  deviceName : LargeString;
  diskType : LargeString;
  groupPolicyBootTimeInMs : Integer;
  groupPolicyLoginTimeInMs : Integer;
  healthStatus : LargeString;
  loginScore : Integer;
  manufacturer : LargeString;
  model : LargeString;
  modelStartupPerformanceScore : Double;
  operatingSystemVersion : LargeString;
  responsiveDesktopTimeInMs : Integer;
  restartCount : Integer;
  startupPerformanceScore : Double;
};

@cds.persistence.skip : true
entity microsoft.graph.importedWindowsAutopilotDeviceIdentityUpload : microsoft.graph.entity {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTimeUtc : DateTime;
  status : LargeString;
  @cds.ambiguous : 'missing on condition?'
  deviceIdentities : Association to many microsoft.graph.importedWindowsAutopilotDeviceIdentity {  };
};

@cds.persistence.skip : true
entity microsoft.graph.managedMobileApp : microsoft.graph.entity {
  mobileAppIdentifier : microsoft.graph.mobileAppIdentifier;
  version : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.managedAppPolicyDeploymentSummary : microsoft.graph.entity {
  configurationDeployedUserCount : Integer;
  configurationDeploymentSummaryPerApp : many microsoft.graph.managedAppPolicyDeploymentSummaryPerApp;
  displayName : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastRefreshTime : DateTime;
  version : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.androidManagedAppRegistration : microsoft.graph.managedAppRegistration {
};

@cds.persistence.skip : true
entity microsoft.graph.iosManagedAppRegistration : microsoft.graph.managedAppRegistration {
};

@cds.persistence.skip : true
entity microsoft.graph.managedAppOperation : microsoft.graph.entity {
  displayName : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastModifiedDateTime : DateTime;
  state : LargeString;
  version : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.managedAppStatusRaw : microsoft.graph.managedAppStatus {
  content : microsoft.graph.Json;
};

@cds.persistence.skip : true
entity microsoft.graph.targetedManagedAppPolicyAssignment : microsoft.graph.entity {
  target : microsoft.graph.deviceAndAppManagementAssignmentTarget;
};

@cds.persistence.skip : true
entity microsoft.graph.windowsInformationProtectionAppLockerFile : microsoft.graph.entity {
  displayName : LargeString;
  file : LargeBinary;
  fileHash : LargeString;
  version : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.localizedNotificationMessage : microsoft.graph.entity {
  isDefault : Boolean;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastModifiedDateTime : DateTime;
  locale : LargeString;
  messageTemplate : LargeString;
  subject : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.deviceAndAppManagementRoleDefinition : microsoft.graph.roleDefinition {
};

@cds.persistence.skip : true
entity microsoft.graph.deviceManagementExportJob : microsoft.graph.entity {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  expirationDateTime : DateTime;
  filter : LargeString;
  format : LargeString;
  localizationType : LargeString;
  reportName : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  requestDateTime : DateTime;
  ![select] : many LargeString;
  snapshotId : LargeString;
  status : LargeString;
  url : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.enrollmentTroubleshootingEvent : microsoft.graph.deviceManagementTroubleshootingEvent {
  deviceId : LargeString;
  enrollmentType : LargeString;
  failureCategory : LargeString;
  failureReason : LargeString;
  managedDeviceIdentifier : LargeString;
  operatingSystem : LargeString;
  osVersion : LargeString;
  userId : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.admin {
  @cds.ambiguous : 'missing on condition?'
  serviceAnnouncement : Association to one microsoft.graph.serviceAnnouncement {  };
};

@cds.persistence.skip : true
entity microsoft.graph.serviceAnnouncement : microsoft.graph.entity {
  @cds.ambiguous : 'missing on condition?'
  healthOverviews : Association to many microsoft.graph.serviceHealth {  };
  @cds.ambiguous : 'missing on condition?'
  issues : Association to many microsoft.graph.serviceHealthIssue {  };
  @cds.ambiguous : 'missing on condition?'
  messages : Association to many microsoft.graph.serviceUpdateMessage {  };
};

@cds.persistence.skip : true
entity microsoft.graph.serviceHealth : microsoft.graph.entity {
  service : LargeString;
  status : LargeString;
  @cds.ambiguous : 'missing on condition?'
  issues : Association to many microsoft.graph.serviceHealthIssue {  };
};

@cds.persistence.skip : true
abstract entity microsoft.graph.serviceAnnouncementBase : microsoft.graph.entity {
  details : many microsoft.graph.keyValuePair;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  endDateTime : DateTime;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastModifiedDateTime : DateTime;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  startDateTime : DateTime;
  title : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.serviceHealthIssue : microsoft.graph.serviceAnnouncementBase {
  classification : LargeString;
  feature : LargeString;
  featureGroup : LargeString;
  impactDescription : LargeString;
  isResolved : Boolean;
  origin : LargeString;
  posts : many microsoft.graph.serviceHealthIssuePost;
  service : LargeString;
  status : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.serviceUpdateMessage : microsoft.graph.serviceAnnouncementBase {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  actionRequiredByDateTime : DateTime;
  @odata.type : 'Edm.Stream'
  attachmentsArchive : LargeBinary;
  body : microsoft.graph.itemBody;
  category : LargeString;
  hasAttachments : Boolean;
  isMajorChange : Boolean;
  services : many LargeString;
  severity : LargeString;
  tags : many LargeString;
  viewPoint : microsoft.graph.serviceUpdateMessageViewpoint;
  @cds.ambiguous : 'missing on condition?'
  attachments : Association to many microsoft.graph.serviceAnnouncementAttachment {  };
};

@cds.persistence.skip : true
entity microsoft.graph.serviceAnnouncementAttachment : microsoft.graph.entity {
  @odata.type : 'Edm.Stream'
  content : LargeBinary;
  contentType : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastModifiedDateTime : DateTime;
  name : LargeString;
  size : Integer;
};

@cds.persistence.skip : true
entity microsoft.graph.searchEntity : microsoft.graph.entity {
};

@cds.persistence.skip : true
entity microsoft.graph.planner : microsoft.graph.entity {
  @cds.ambiguous : 'missing on condition?'
  buckets : Association to many microsoft.graph.plannerBucket {  };
  @cds.ambiguous : 'missing on condition?'
  plans : Association to many microsoft.graph.plannerPlan {  };
  @cds.ambiguous : 'missing on condition?'
  tasks : Association to many microsoft.graph.plannerTask {  };
};

@cds.persistence.skip : true
entity microsoft.graph.plannerBucket : microsoft.graph.entity {
  name : LargeString;
  orderHint : LargeString;
  planId : LargeString;
  @cds.ambiguous : 'missing on condition?'
  tasks : Association to many microsoft.graph.plannerTask {  };
};

@cds.persistence.skip : true
entity microsoft.graph.plannerPlan : microsoft.graph.entity {
  container : microsoft.graph.plannerPlanContainer;
  createdBy : microsoft.graph.identitySet;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  owner : LargeString;
  title : LargeString;
  @cds.ambiguous : 'missing on condition?'
  buckets : Association to many microsoft.graph.plannerBucket {  };
  @cds.ambiguous : 'missing on condition?'
  details : Association to one microsoft.graph.plannerPlanDetails {  };
  @cds.ambiguous : 'missing on condition?'
  tasks : Association to many microsoft.graph.plannerTask {  };
};

@cds.persistence.skip : true
entity microsoft.graph.plannerTask : microsoft.graph.entity {
  activeChecklistItemCount : Integer;
  appliedCategories : microsoft.graph.plannerAppliedCategories;
  assigneePriority : LargeString;
  assignments : microsoft.graph.plannerAssignments;
  bucketId : LargeString;
  checklistItemCount : Integer;
  completedBy : microsoft.graph.identitySet;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  completedDateTime : DateTime;
  conversationThreadId : LargeString;
  createdBy : microsoft.graph.identitySet;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  dueDateTime : DateTime;
  hasDescription : Boolean;
  orderHint : LargeString;
  percentComplete : Integer;
  planId : LargeString;
  previewType : LargeString;
  priority : Integer;
  referenceCount : Integer;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  startDateTime : DateTime;
  title : LargeString;
  @cds.ambiguous : 'missing on condition?'
  assignedToTaskBoardFormat : Association to one microsoft.graph.plannerAssignedToTaskBoardTaskFormat {  };
  @cds.ambiguous : 'missing on condition?'
  bucketTaskBoardFormat : Association to one microsoft.graph.plannerBucketTaskBoardTaskFormat {  };
  @cds.ambiguous : 'missing on condition?'
  details : Association to one microsoft.graph.plannerTaskDetails {  };
  @cds.ambiguous : 'missing on condition?'
  progressTaskBoardFormat : Association to one microsoft.graph.plannerProgressTaskBoardTaskFormat {  };
};

@cds.persistence.skip : true
entity microsoft.graph.plannerAssignedToTaskBoardTaskFormat : microsoft.graph.entity {
  orderHintsByAssignee : microsoft.graph.plannerOrderHintsByAssignee;
  unassignedOrderHint : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.plannerBucketTaskBoardTaskFormat : microsoft.graph.entity {
  orderHint : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.plannerPlanDetails : microsoft.graph.entity {
  categoryDescriptions : microsoft.graph.plannerCategoryDescriptions;
  sharedWith : microsoft.graph.plannerUserIds;
};

@cds.persistence.skip : true
entity microsoft.graph.plannerProgressTaskBoardTaskFormat : microsoft.graph.entity {
  orderHint : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.plannerTaskDetails : microsoft.graph.entity {
  checklist : microsoft.graph.plannerChecklistItems;
  description : LargeString;
  previewType : LargeString;
  references : microsoft.graph.plannerExternalReferences;
};

@cds.persistence.skip : true
entity microsoft.graph.sharedInsight : microsoft.graph.entity {
  lastShared : microsoft.graph.sharingDetail;
  resourceReference : microsoft.graph.resourceReference;
  resourceVisualization : microsoft.graph.resourceVisualization;
  sharingHistory : many microsoft.graph.sharingDetail;
  @cds.ambiguous : 'missing on condition?'
  lastSharedMethod : Association to one microsoft.graph.entity {  };
  @cds.ambiguous : 'missing on condition?'
  resource : Association to one microsoft.graph.entity {  };
};

@cds.persistence.skip : true
entity microsoft.graph.trending : microsoft.graph.entity {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastModifiedDateTime : DateTime;
  resourceReference : microsoft.graph.resourceReference;
  resourceVisualization : microsoft.graph.resourceVisualization;
  weight : Double;
  @cds.ambiguous : 'missing on condition?'
  resource : Association to one microsoft.graph.entity {  };
};

@cds.persistence.skip : true
entity microsoft.graph.usedInsight : microsoft.graph.entity {
  lastUsed : microsoft.graph.usageDetails;
  resourceReference : microsoft.graph.resourceReference;
  resourceVisualization : microsoft.graph.resourceVisualization;
  @cds.ambiguous : 'missing on condition?'
  resource : Association to one microsoft.graph.entity {  };
};

@cds.persistence.skip : true
abstract entity microsoft.graph.changeTrackedEntity : microsoft.graph.entity {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  lastModifiedBy : microsoft.graph.identitySet;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastModifiedDateTime : DateTime;
};

@cds.persistence.skip : true
entity microsoft.graph.shiftPreferences : microsoft.graph.changeTrackedEntity {
  availability : many microsoft.graph.shiftAvailability;
};

@cds.persistence.skip : true
abstract entity microsoft.graph.onenoteEntityBaseModel : microsoft.graph.entity {
  self : LargeString;
};

@cds.persistence.skip : true
abstract entity microsoft.graph.onenoteEntitySchemaObjectModel : microsoft.graph.onenoteEntityBaseModel {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
};

@cds.persistence.skip : true
abstract entity microsoft.graph.onenoteEntityHierarchyModel : microsoft.graph.onenoteEntitySchemaObjectModel {
  createdBy : microsoft.graph.identitySet;
  displayName : LargeString;
  lastModifiedBy : microsoft.graph.identitySet;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastModifiedDateTime : DateTime;
};

@cds.persistence.skip : true
entity microsoft.graph.notebook : microsoft.graph.onenoteEntityHierarchyModel {
  isDefault : Boolean;
  isShared : Boolean;
  links : microsoft.graph.notebookLinks;
  sectionGroupsUrl : LargeString;
  sectionsUrl : LargeString;
  userRole : LargeString;
  @cds.ambiguous : 'missing on condition?'
  sectionGroups : Association to many microsoft.graph.sectionGroup {  };
  @cds.ambiguous : 'missing on condition?'
  sections : Association to many microsoft.graph.onenoteSection {  };
};

@cds.persistence.skip : true
entity microsoft.graph.sectionGroup : microsoft.graph.onenoteEntityHierarchyModel {
  sectionGroupsUrl : LargeString;
  sectionsUrl : LargeString;
  @cds.ambiguous : 'missing on condition?'
  parentNotebook : Association to one microsoft.graph.notebook {  };
  @cds.ambiguous : 'missing on condition?'
  parentSectionGroup : Association to one microsoft.graph.sectionGroup {  };
  @cds.ambiguous : 'missing on condition?'
  sectionGroups : Association to many microsoft.graph.sectionGroup {  };
  @cds.ambiguous : 'missing on condition?'
  sections : Association to many microsoft.graph.onenoteSection {  };
};

@cds.persistence.skip : true
entity microsoft.graph.onenoteSection : microsoft.graph.onenoteEntityHierarchyModel {
  isDefault : Boolean;
  links : microsoft.graph.sectionLinks;
  pagesUrl : LargeString;
  @cds.ambiguous : 'missing on condition?'
  pages : Association to many microsoft.graph.onenotePage {  };
  @cds.ambiguous : 'missing on condition?'
  parentNotebook : Association to one microsoft.graph.notebook {  };
  @cds.ambiguous : 'missing on condition?'
  parentSectionGroup : Association to one microsoft.graph.sectionGroup {  };
};

@cds.persistence.skip : true
entity microsoft.graph.operation : microsoft.graph.entity {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastActionDateTime : DateTime;
  status : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.onenoteOperation : microsoft.graph.operation {
  error : microsoft.graph.onenoteOperationError;
  percentComplete : LargeString;
  resourceId : LargeString;
  resourceLocation : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.onenotePage : microsoft.graph.onenoteEntitySchemaObjectModel {
  @odata.type : 'Edm.Stream'
  content : LargeBinary;
  contentUrl : LargeString;
  createdByAppId : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastModifiedDateTime : DateTime;
  level : Integer;
  links : microsoft.graph.pageLinks;
  order : Integer;
  title : LargeString;
  userTags : many LargeString;
  @cds.ambiguous : 'missing on condition?'
  parentNotebook : Association to one microsoft.graph.notebook {  };
  @cds.ambiguous : 'missing on condition?'
  parentSection : Association to one microsoft.graph.onenoteSection {  };
};

@cds.persistence.skip : true
entity microsoft.graph.onenoteResource : microsoft.graph.onenoteEntityBaseModel {
  @odata.type : 'Edm.Stream'
  content : LargeBinary;
  contentUrl : LargeString;
};

@cds.persistence.skip : true
abstract entity microsoft.graph.unifiedRoleManagementPolicyRule : microsoft.graph.entity {
  target : microsoft.graph.unifiedRoleManagementPolicyRuleTarget;
};

@cds.persistence.skip : true
entity microsoft.graph.unifiedRoleManagementPolicyApprovalRule : microsoft.graph.unifiedRoleManagementPolicyRule {
  setting : microsoft.graph.approvalSettings;
};

@cds.persistence.skip : true
entity microsoft.graph.unifiedRoleManagementPolicyAuthenticationContextRule : microsoft.graph.unifiedRoleManagementPolicyRule {
  claimValue : LargeString;
  isEnabled : Boolean;
};

@cds.persistence.skip : true
entity microsoft.graph.unifiedRoleManagementPolicyEnablementRule : microsoft.graph.unifiedRoleManagementPolicyRule {
  enabledRules : many LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.unifiedRoleManagementPolicyExpirationRule : microsoft.graph.unifiedRoleManagementPolicyRule {
  isExpirationRequired : Boolean;
};

@cds.persistence.skip : true
entity microsoft.graph.unifiedRoleManagementPolicyNotificationRule : microsoft.graph.unifiedRoleManagementPolicyRule {
  isDefaultRecipientsEnabled : Boolean;
  notificationLevel : LargeString;
  notificationRecipients : many LargeString;
  notificationType : LargeString;
  recipientType : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.print {
  settings : microsoft.graph.printSettings;
  @cds.ambiguous : 'missing on condition?'
  connectors : Association to many microsoft.graph.printConnector {  };
  @cds.ambiguous : 'missing on condition?'
  operations : Association to many microsoft.graph.printOperation {  };
  @cds.ambiguous : 'missing on condition?'
  printers : Association to many microsoft.graph.printer {  };
  @cds.ambiguous : 'missing on condition?'
  services : Association to many microsoft.graph.printService {  };
  @cds.ambiguous : 'missing on condition?'
  shares : Association to many microsoft.graph.printerShare {  };
  @cds.ambiguous : 'missing on condition?'
  taskDefinitions : Association to many microsoft.graph.printTaskDefinition {  };
};

@cds.persistence.skip : true
entity microsoft.graph.printConnector : microsoft.graph.entity {
  appVersion : LargeString;
  displayName : LargeString;
  fullyQualifiedDomainName : LargeString;
  location : microsoft.graph.printerLocation;
  operatingSystem : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  registeredDateTime : DateTime;
};

@cds.persistence.skip : true
abstract entity microsoft.graph.printOperation : microsoft.graph.entity {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  status : microsoft.graph.printOperationStatus;
};

@cds.persistence.skip : true
abstract entity microsoft.graph.printerBase : microsoft.graph.entity {
  capabilities : microsoft.graph.printerCapabilities;
  defaults : microsoft.graph.printerDefaults;
  displayName : LargeString;
  isAcceptingJobs : Boolean;
  location : microsoft.graph.printerLocation;
  manufacturer : LargeString;
  model : LargeString;
  status : microsoft.graph.printerStatus;
  @cds.ambiguous : 'missing on condition?'
  jobs : Association to many microsoft.graph.printJob {  };
};

@cds.persistence.skip : true
entity microsoft.graph.printer : microsoft.graph.printerBase {
  hasPhysicalDevice : Boolean;
  isShared : Boolean;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastSeenDateTime : DateTime;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  registeredDateTime : DateTime;
  @cds.ambiguous : 'missing on condition?'
  connectors : Association to many microsoft.graph.printConnector {  };
  @cds.ambiguous : 'missing on condition?'
  shares : Association to many microsoft.graph.printerShare {  };
  @cds.ambiguous : 'missing on condition?'
  taskTriggers : Association to many microsoft.graph.printTaskTrigger {  };
};

@cds.persistence.skip : true
entity microsoft.graph.printService : microsoft.graph.entity {
  @cds.ambiguous : 'missing on condition?'
  endpoints : Association to many microsoft.graph.printServiceEndpoint {  };
};

@cds.persistence.skip : true
entity microsoft.graph.printerShare : microsoft.graph.printerBase {
  allowAllUsers : Boolean;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  @cds.ambiguous : 'missing on condition?'
  allowedGroups : Association to many microsoft.graph.groups {  };
  @cds.ambiguous : 'missing on condition?'
  allowedUsers : Association to many microsoft.graph.users {  };
  @cds.ambiguous : 'missing on condition?'
  printer : Association to one microsoft.graph.printer {  };
};

@cds.persistence.skip : true
entity microsoft.graph.printTaskDefinition : microsoft.graph.entity {
  createdBy : microsoft.graph.appIdentity;
  displayName : LargeString;
  @cds.ambiguous : 'missing on condition?'
  tasks : Association to many microsoft.graph.printTask {  };
};

@cds.persistence.skip : true
entity microsoft.graph.printDocument : microsoft.graph.entity {
  contentType : LargeString;
  displayName : LargeString;
  size : Integer64;
};

@cds.persistence.skip : true
entity microsoft.graph.printTaskTrigger : microsoft.graph.entity {
  event : LargeString;
  @cds.ambiguous : 'missing on condition?'
  definition : Association to one microsoft.graph.printTaskDefinition {  };
};

@cds.persistence.skip : true
entity microsoft.graph.printJob : microsoft.graph.entity {
  configuration : microsoft.graph.printJobConfiguration;
  createdBy : microsoft.graph.userIdentity;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  isFetchable : Boolean;
  redirectedFrom : LargeString;
  redirectedTo : LargeString;
  status : microsoft.graph.printJobStatus;
  @cds.ambiguous : 'missing on condition?'
  documents : Association to many microsoft.graph.printDocument {  };
  @cds.ambiguous : 'missing on condition?'
  tasks : Association to many microsoft.graph.printTask {  };
} actions {
  action cancel();
};

@cds.persistence.skip : true
entity microsoft.graph.printerCreateOperation : microsoft.graph.printOperation {
  certificate : LargeString;
  @cds.ambiguous : 'missing on condition?'
  printer : Association to one microsoft.graph.printer {  };
};

@cds.persistence.skip : true
entity microsoft.graph.printTask : microsoft.graph.entity {
  parentUrl : LargeString;
  status : microsoft.graph.printTaskStatus;
  @cds.ambiguous : 'missing on condition?'
  definition : Association to one microsoft.graph.printTaskDefinition {  };
  @cds.ambiguous : 'missing on condition?'
  trigger : Association to one microsoft.graph.printTaskTrigger {  };
};

@cds.persistence.skip : true
entity microsoft.graph.printServiceEndpoint : microsoft.graph.entity {
  displayName : LargeString;
  uri : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.activityHistoryItem : microsoft.graph.entity {
  activeDurationSeconds : Integer;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  expirationDateTime : DateTime;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastActiveDateTime : DateTime;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastModifiedDateTime : DateTime;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  startedDateTime : DateTime;
  status : LargeString;
  userTimezone : LargeString;
  @cds.ambiguous : 'missing on condition?'
  activity : Association to one microsoft.graph.userActivity {  };
};

@cds.persistence.skip : true
entity microsoft.graph.dataPolicyOperations : microsoft.graph.entity {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  completedDateTime : DateTime;
  progress : Double;
  status : LargeString;
  storageLocation : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  submittedDateTime : DateTime;
  userId : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.attendanceRecord : microsoft.graph.entity {
  attendanceIntervals : many microsoft.graph.attendanceInterval;
  emailAddress : LargeString;
  identity : microsoft.graph.identity;
  role : LargeString;
  totalAttendanceInSeconds : Integer;
};

@cds.persistence.skip : true
entity microsoft.graph.audioRoutingGroup : microsoft.graph.entity {
  receivers : many LargeString;
  routingMode : LargeString;
  sources : many LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.commsOperation : microsoft.graph.entity {
  clientContext : LargeString;
  resultInfo : microsoft.graph.resultInfo;
  status : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.participant : microsoft.graph.entity {
  info : microsoft.graph.participantInfo;
  isInLobby : Boolean;
  isMuted : Boolean;
  mediaStreams : many microsoft.graph.mediaStream;
  metadata : LargeString;
  recordingInfo : microsoft.graph.recordingInfo;
};

@cds.persistence.skip : true
entity microsoft.graph.cancelMediaProcessingOperation : microsoft.graph.commsOperation {
};

@cds.persistence.skip : true
entity microsoft.graph.inviteParticipantsOperation : microsoft.graph.commsOperation {
  participants : many microsoft.graph.invitationParticipantInfo;
};

@cds.persistence.skip : true
entity microsoft.graph.meetingAttendanceReport : microsoft.graph.entity {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  meetingEndDateTime : DateTime;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  meetingStartDateTime : DateTime;
  totalParticipantCount : Integer;
  @cds.ambiguous : 'missing on condition?'
  attendanceRecords : Association to many microsoft.graph.attendanceRecord {  };
};

@cds.persistence.skip : true
entity microsoft.graph.muteParticipantOperation : microsoft.graph.commsOperation {
};

@cds.persistence.skip : true
entity microsoft.graph.participantJoiningNotification : microsoft.graph.entity {
  @cds.ambiguous : 'missing on condition?'
  call : Association to one microsoft.graph.call {  };
};

@cds.persistence.skip : true
entity microsoft.graph.participantLeftNotification : microsoft.graph.entity {
  participantId : LargeString;
  @cds.ambiguous : 'missing on condition?'
  call : Association to one microsoft.graph.call {  };
};

@cds.persistence.skip : true
entity microsoft.graph.playPromptOperation : microsoft.graph.commsOperation {
};

@cds.persistence.skip : true
entity microsoft.graph.recordOperation : microsoft.graph.commsOperation {
  recordingAccessToken : LargeString;
  recordingLocation : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.startHoldMusicOperation : microsoft.graph.commsOperation {
};

@cds.persistence.skip : true
entity microsoft.graph.stopHoldMusicOperation : microsoft.graph.commsOperation {
};

@cds.persistence.skip : true
entity microsoft.graph.subscribeToToneOperation : microsoft.graph.commsOperation {
};

@cds.persistence.skip : true
entity microsoft.graph.unmuteParticipantOperation : microsoft.graph.commsOperation {
};

@cds.persistence.skip : true
entity microsoft.graph.updateRecordingStatusOperation : microsoft.graph.commsOperation {
};

@cds.persistence.skip : true
abstract entity microsoft.graph.authenticationMethod : microsoft.graph.entity {
};

@cds.persistence.skip : true
entity microsoft.graph.emailAuthenticationMethod : microsoft.graph.authenticationMethod {
  emailAddress : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.fido2AuthenticationMethod : microsoft.graph.authenticationMethod {
  aaGuid : LargeString;
  attestationCertificates : many LargeString;
  attestationLevel : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  displayName : LargeString;
  model : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.microsoftAuthenticatorAuthenticationMethod : microsoft.graph.authenticationMethod {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  deviceTag : LargeString;
  displayName : LargeString;
  phoneAppVersion : LargeString;
  @cds.ambiguous : 'missing on condition?'
  device : Association to one microsoft.graph.devices {  };
};

@cds.persistence.skip : true
entity microsoft.graph.passwordAuthenticationMethod : microsoft.graph.authenticationMethod {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  password : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.phoneAuthenticationMethod : microsoft.graph.authenticationMethod {
  phoneNumber : LargeString;
  phoneType : LargeString;
  smsSignInState : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.softwareOathAuthenticationMethod : microsoft.graph.authenticationMethod {
  secretKey : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.temporaryAccessPassAuthenticationMethod : microsoft.graph.authenticationMethod {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  isUsable : Boolean;
  isUsableOnce : Boolean;
  lifetimeInMinutes : Integer;
  methodUsabilityReason : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  startDateTime : DateTime;
  temporaryAccessPass : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.windowsHelloForBusinessAuthenticationMethod : microsoft.graph.authenticationMethod {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  displayName : LargeString;
  keyStrength : LargeString;
  @cds.ambiguous : 'missing on condition?'
  device : Association to one microsoft.graph.devices {  };
};

@cds.persistence.skip : true
entity microsoft.graph.aadUserConversationMember : microsoft.graph.conversationMember {
  email : LargeString;
  tenantId : LargeString;
  userId : LargeString;
  @cds.ambiguous : 'missing on condition?'
  user : Association to one microsoft.graph.users {  };
};

@cds.persistence.skip : true
entity microsoft.graph.appCatalogs : microsoft.graph.entity {
  @cds.ambiguous : 'missing on condition?'
  teamsApps : Association to many microsoft.graph.teamsApp {  };
};

@cds.persistence.skip : true
entity microsoft.graph.teamsApp : microsoft.graph.entity {
  displayName : LargeString;
  distributionMethod : LargeString;
  externalId : LargeString;
  @cds.ambiguous : 'missing on condition?'
  appDefinitions : Association to many microsoft.graph.teamsAppDefinition {  };
};

@cds.persistence.skip : true
entity microsoft.graph.teamInfo : microsoft.graph.entity {
  displayName : LargeString;
  tenantId : LargeString;
  @cds.ambiguous : 'missing on condition?'
  team : Association to one microsoft.graph.teams {  };
};

@cds.persistence.skip : true
entity microsoft.graph.associatedTeamInfo : microsoft.graph.teamInfo {
};

@cds.persistence.skip : true
entity microsoft.graph.chatMessage : microsoft.graph.entity {
  attachments : many microsoft.graph.chatMessageAttachment;
  body : microsoft.graph.itemBody;
  channelIdentity : microsoft.graph.channelIdentity;
  chatId : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  deletedDateTime : DateTime;
  etag : LargeString;
  eventDetail : microsoft.graph.eventMessageDetail;
  ![from] : microsoft.graph.chatMessageFromIdentitySet;
  importance : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastEditedDateTime : DateTime;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastModifiedDateTime : DateTime;
  locale : LargeString;
  mentions : many microsoft.graph.chatMessageMention;
  messageType : LargeString;
  policyViolation : microsoft.graph.chatMessagePolicyViolation;
  reactions : many microsoft.graph.chatMessageReaction;
  replyToId : LargeString;
  subject : LargeString;
  summary : LargeString;
  webUrl : LargeString;
  @cds.ambiguous : 'missing on condition?'
  hostedContents : Association to many microsoft.graph.chatMessageHostedContent {  };
  @cds.ambiguous : 'missing on condition?'
  replies : Association to many microsoft.graph.chatMessage {  };
};

@cds.persistence.skip : true
entity microsoft.graph.sharedWithChannelTeamInfo : microsoft.graph.teamInfo {
  isHostTeam : Boolean;
  @cds.ambiguous : 'missing on condition?'
  allowedMembers : Association to many microsoft.graph.conversationMember {  };
};

@cds.persistence.skip : true
entity microsoft.graph.teamsTab : microsoft.graph.entity {
  configuration : microsoft.graph.teamsTabConfiguration;
  displayName : LargeString;
  webUrl : LargeString;
  @cds.ambiguous : 'missing on condition?'
  teamsApp : Association to one microsoft.graph.teamsApp {  };
};

@cds.persistence.skip : true
entity microsoft.graph.teamworkHostedContent : microsoft.graph.entity {
  contentBytes : LargeBinary;
  contentType : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.chatMessageHostedContent : microsoft.graph.teamworkHostedContent {
};

@cds.persistence.skip : true
entity microsoft.graph.teamsAppDefinition : microsoft.graph.entity {
  createdBy : microsoft.graph.identitySet;
  description : LargeString;
  displayName : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastModifiedDateTime : DateTime;
  publishingState : LargeString;
  shortDescription : LargeString;
  teamsAppId : LargeString;
  version : LargeString;
  @cds.ambiguous : 'missing on condition?'
  bot : Association to one microsoft.graph.teamworkBot {  };
};

@cds.persistence.skip : true
entity microsoft.graph.teamworkBot : microsoft.graph.entity {
};

@cds.persistence.skip : true
entity microsoft.graph.teamwork : microsoft.graph.entity {
  @cds.ambiguous : 'missing on condition?'
  workforceIntegrations : Association to many microsoft.graph.workforceIntegration {  };
};

@cds.persistence.skip : true
entity microsoft.graph.workforceIntegration : microsoft.graph.changeTrackedEntity {
  apiVersion : Integer;
  displayName : LargeString;
  encryption : microsoft.graph.workforceIntegrationEncryption;
  isActive : Boolean;
  supportedEntities : LargeString;
  url : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.userScopeTeamsAppInstallation : microsoft.graph.teamsAppInstallation {
  @cds.ambiguous : 'missing on condition?'
  chat : Association to one microsoft.graph.chats {  };
};

@cds.persistence.skip : true
abstract entity microsoft.graph.scheduleChangeRequest : microsoft.graph.changeTrackedEntity {
  assignedTo : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  managerActionDateTime : DateTime;
  managerActionMessage : LargeString;
  managerUserId : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  senderDateTime : DateTime;
  senderMessage : LargeString;
  senderUserId : LargeString;
  state : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.offerShiftRequest : microsoft.graph.scheduleChangeRequest {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  recipientActionDateTime : DateTime;
  recipientActionMessage : LargeString;
  recipientUserId : LargeString;
  senderShiftId : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.openShift : microsoft.graph.changeTrackedEntity {
  draftOpenShift : microsoft.graph.openShiftItem;
  schedulingGroupId : LargeString;
  sharedOpenShift : microsoft.graph.openShiftItem;
};

@cds.persistence.skip : true
entity microsoft.graph.openShiftChangeRequest : microsoft.graph.scheduleChangeRequest {
  openShiftId : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.schedulingGroup : microsoft.graph.changeTrackedEntity {
  displayName : LargeString;
  isActive : Boolean;
  userIds : many LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.shift : microsoft.graph.changeTrackedEntity {
  draftShift : microsoft.graph.shiftItem;
  schedulingGroupId : LargeString;
  sharedShift : microsoft.graph.shiftItem;
  userId : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.swapShiftsChangeRequest : microsoft.graph.offerShiftRequest {
  recipientShiftId : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.timeOffReason : microsoft.graph.changeTrackedEntity {
  displayName : LargeString;
  iconType : LargeString;
  isActive : Boolean;
};

@cds.persistence.skip : true
entity microsoft.graph.timeOffRequest : microsoft.graph.scheduleChangeRequest {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  endDateTime : DateTime;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  startDateTime : DateTime;
  timeOffReasonId : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.timeOff : microsoft.graph.changeTrackedEntity {
  draftTimeOff : microsoft.graph.timeOffItem;
  sharedTimeOff : microsoft.graph.timeOffItem;
  userId : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.emailFileAssessmentRequest : microsoft.graph.threatAssessmentRequest {
  contentData : LargeString;
  destinationRoutingReason : LargeString;
  recipientEmail : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.fileAssessmentRequest : microsoft.graph.threatAssessmentRequest {
  contentData : LargeString;
  fileName : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.mailAssessmentRequest : microsoft.graph.threatAssessmentRequest {
  destinationRoutingReason : LargeString;
  messageUri : LargeString;
  recipientEmail : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.threatAssessmentResult : microsoft.graph.entity {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  message : LargeString;
  resultType : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.urlAssessmentRequest : microsoft.graph.threatAssessmentRequest {
  url : LargeString;
};

@cds.persistence.skip : true
abstract entity microsoft.graph.attachmentBase : microsoft.graph.entity {
  contentType : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastModifiedDateTime : DateTime;
  name : LargeString;
  size : Integer;
};

@cds.persistence.skip : true
entity microsoft.graph.attachmentSession : microsoft.graph.entity {
  @odata.type : 'Edm.Stream'
  content : LargeBinary;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  expirationDateTime : DateTime;
  nextExpectedRanges : many LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.checklistItem : microsoft.graph.entity {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  checkedDateTime : DateTime;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  displayName : LargeString;
  isChecked : Boolean;
};

@cds.persistence.skip : true
entity microsoft.graph.linkedResource : microsoft.graph.entity {
  applicationName : LargeString;
  displayName : LargeString;
  externalId : LargeString;
  webUrl : LargeString;
};

@cds.persistence.skip : true
entity microsoft.graph.taskFileAttachment : microsoft.graph.attachmentBase {
  contentBytes : LargeBinary;
};

@cds.persistence.skip : true
entity microsoft.graph.todoTaskList : microsoft.graph.entity {
  displayName : LargeString;
  isOwner : Boolean;
  isShared : Boolean;
  wellknownListName : LargeString;
  @cds.ambiguous : 'missing on condition?'
  extensions : Association to many microsoft.graph.extension {  };
  @cds.ambiguous : 'missing on condition?'
  tasks : Association to many microsoft.graph.todoTask {  };
};

@cds.persistence.skip : true
entity microsoft.graph.todoTask : microsoft.graph.entity {
  body : microsoft.graph.itemBody;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  bodyLastModifiedDateTime : DateTime;
  categories : many LargeString;
  completedDateTime : microsoft.graph.dateTimeTimeZone;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  dueDateTime : microsoft.graph.dateTimeTimeZone;
  hasAttachments : Boolean;
  importance : LargeString;
  isReminderOn : Boolean;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastModifiedDateTime : DateTime;
  recurrence : microsoft.graph.patternedRecurrence;
  reminderDateTime : microsoft.graph.dateTimeTimeZone;
  startDateTime : microsoft.graph.dateTimeTimeZone;
  status : LargeString;
  title : LargeString;
  @cds.ambiguous : 'missing on condition?'
  attachments : Association to many microsoft.graph.attachmentBase {  };
  @cds.ambiguous : 'missing on condition?'
  attachmentSessions : Association to many microsoft.graph.attachmentSession {  };
  @cds.ambiguous : 'missing on condition?'
  checklistItems : Association to many microsoft.graph.checklistItem {  };
  @cds.ambiguous : 'missing on condition?'
  extensions : Association to many microsoft.graph.extension {  };
  @cds.ambiguous : 'missing on condition?'
  linkedResources : Association to many microsoft.graph.linkedResource {  };
};

type microsoft.graph.appIdentity {
  appId : LargeString;
  displayName : LargeString;
  servicePrincipalId : LargeString;
  servicePrincipalName : LargeString;
};

type microsoft.graph.appliedConditionalAccessPolicy {
  displayName : LargeString;
  enforcedGrantControls : many LargeString;
  enforcedSessionControls : many LargeString;
  id : LargeString;
};

type microsoft.graph.auditActivityInitiator {
  app : microsoft.graph.appIdentity;
  user : microsoft.graph.userIdentity;
};

type microsoft.graph.identity {
  displayName : LargeString;
  id : LargeString;
};

type microsoft.graph.userIdentity : microsoft.graph.identity {
  ipAddress : LargeString;
  userPrincipalName : LargeString;
};

type microsoft.graph.detailsInfo {
};

type microsoft.graph.deviceDetail {
  browser : LargeString;
  deviceId : LargeString;
  displayName : LargeString;
  isCompliant : Boolean;
  isManaged : Boolean;
  operatingSystem : LargeString;
  trustType : LargeString;
};

type microsoft.graph.geoCoordinates {
  altitude : Double;
  latitude : Double;
  longitude : Double;
};

type microsoft.graph.initiator : microsoft.graph.identity {
};

type microsoft.graph.keyValue {
  ![key] : LargeString;
  value : LargeString;
};

type microsoft.graph.modifiedProperty {
  displayName : LargeString;
  newValue : LargeString;
  oldValue : LargeString;
};

type microsoft.graph.provisionedIdentity : microsoft.graph.identity {
  details : microsoft.graph.detailsInfo;
  identityType : LargeString;
};

type microsoft.graph.provisioningErrorInfo {
  additionalDetails : LargeString;
  errorCode : LargeString;
  reason : LargeString;
  recommendedAction : LargeString;
};

type microsoft.graph.provisioningServicePrincipal : microsoft.graph.identity {
};

type microsoft.graph.provisioningStatusInfo {
  errorInformation : microsoft.graph.provisioningErrorInfo;
};

type microsoft.graph.provisioningStep {
  description : LargeString;
  details : microsoft.graph.detailsInfo;
  name : LargeString;
};

type microsoft.graph.provisioningSystem : microsoft.graph.identity {
  details : microsoft.graph.detailsInfo;
};

type microsoft.graph.signInLocation {
  city : LargeString;
  countryOrRegion : LargeString;
  geoCoordinates : microsoft.graph.geoCoordinates;
  state : LargeString;
};

type microsoft.graph.signInStatus {
  additionalDetails : LargeString;
  errorCode : Integer;
  failureReason : LargeString;
};

type microsoft.graph.targetResource {
  displayName : LargeString;
  id : LargeString;
  modifiedProperties : many microsoft.graph.modifiedProperty;
  type : LargeString;
  userPrincipalName : LargeString;
};

type microsoft.graph.emailAddress {
  address : LargeString;
  name : LargeString;
};

type microsoft.graph.invitedUserMessageInfo {
  ccRecipients : many microsoft.graph.recipient;
  customizedMessageBody : LargeString;
  messageLanguage : LargeString;
};

type microsoft.graph.recipient {
  emailAddress : microsoft.graph.emailAddress;
};

type microsoft.graph.assignedLicense {
  disabledPlans : many UUID;
  skuId : UUID;
};

type microsoft.graph.assignedPlan {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  assignedDateTime : DateTime;
  capabilityStatus : LargeString;
  service : LargeString;
  servicePlanId : UUID;
};

type microsoft.graph.employeeOrgData {
  costCenter : LargeString;
  division : LargeString;
};

type microsoft.graph.objectIdentity {
  issuer : LargeString;
  issuerAssignedId : LargeString;
  signInType : LargeString;
};

type microsoft.graph.licenseAssignmentState {
  assignedByGroup : LargeString;
  disabledPlans : many UUID;
  error : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastUpdatedDateTime : DateTime;
  skuId : UUID;
  state : LargeString;
};

type microsoft.graph.onPremisesExtensionAttributes {
  extensionAttribute1 : LargeString;
  extensionAttribute10 : LargeString;
  extensionAttribute11 : LargeString;
  extensionAttribute12 : LargeString;
  extensionAttribute13 : LargeString;
  extensionAttribute14 : LargeString;
  extensionAttribute15 : LargeString;
  extensionAttribute2 : LargeString;
  extensionAttribute3 : LargeString;
  extensionAttribute4 : LargeString;
  extensionAttribute5 : LargeString;
  extensionAttribute6 : LargeString;
  extensionAttribute7 : LargeString;
  extensionAttribute8 : LargeString;
  extensionAttribute9 : LargeString;
};

type microsoft.graph.onPremisesProvisioningError {
  category : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  occurredDateTime : DateTime;
  propertyCausingError : LargeString;
  value : LargeString;
};

type microsoft.graph.passwordProfile {
  forceChangePasswordNextSignIn : Boolean;
  forceChangePasswordNextSignInWithMfa : Boolean;
  password : LargeString;
};

type microsoft.graph.provisionedPlan {
  capabilityStatus : LargeString;
  provisioningStatus : LargeString;
  service : LargeString;
};

type microsoft.graph.mailboxSettings {
  archiveFolder : LargeString;
  automaticRepliesSetting : microsoft.graph.automaticRepliesSetting;
  dateFormat : LargeString;
  language : microsoft.graph.localeInfo;
  timeFormat : LargeString;
  timeZone : LargeString;
  workingHours : microsoft.graph.workingHours;
};

type microsoft.graph.applicationServicePrincipal {
};

type microsoft.graph.addIn {
  id : UUID;
  properties : many microsoft.graph.keyValue;
  type : LargeString;
};

type microsoft.graph.apiApplication {
  acceptMappedClaims : Boolean;
  knownClientApplications : many UUID;
  oauth2PermissionScopes : many microsoft.graph.permissionScope;
  preAuthorizedApplications : many microsoft.graph.preAuthorizedApplication;
  requestedAccessTokenVersion : Integer;
};

type microsoft.graph.appRole {
  allowedMemberTypes : many LargeString;
  description : LargeString;
  displayName : LargeString;
  id : UUID;
  isEnabled : Boolean;
  origin : LargeString;
  value : LargeString;
};

type microsoft.graph.certification {
  certificationDetailsUrl : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  certificationExpirationDateTime : DateTime;
  isCertifiedByMicrosoft : Boolean;
  isPublisherAttested : Boolean;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastCertificationDateTime : DateTime;
};

type microsoft.graph.informationalUrl {
  logoUrl : LargeString;
  marketingUrl : LargeString;
  privacyStatementUrl : LargeString;
  supportUrl : LargeString;
  termsOfServiceUrl : LargeString;
};

type microsoft.graph.keyCredential {
  customKeyIdentifier : LargeBinary;
  displayName : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  endDateTime : DateTime;
  ![key] : LargeBinary;
  keyId : UUID;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  startDateTime : DateTime;
  type : LargeString;
  usage : LargeString;
};

type microsoft.graph.optionalClaims {
  accessToken : many microsoft.graph.optionalClaim;
  idToken : many microsoft.graph.optionalClaim;
  saml2Token : many microsoft.graph.optionalClaim;
};

type microsoft.graph.parentalControlSettings {
  countriesBlockedForMinors : many LargeString;
  legalAgeGroupRule : LargeString;
};

type microsoft.graph.passwordCredential {
  customKeyIdentifier : LargeBinary;
  displayName : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  endDateTime : DateTime;
  hint : LargeString;
  keyId : UUID;
  secretText : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  startDateTime : DateTime;
};

type microsoft.graph.publicClientApplication {
  redirectUris : many LargeString;
};

type microsoft.graph.requiredResourceAccess {
  resourceAccess : many microsoft.graph.resourceAccess;
  resourceAppId : LargeString;
};

type microsoft.graph.spaApplication {
  redirectUris : many LargeString;
};

type microsoft.graph.verifiedPublisher {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  addedDateTime : DateTime;
  displayName : LargeString;
  verifiedPublisherId : LargeString;
};

type microsoft.graph.webApplication {
  homePageUrl : LargeString;
  implicitGrantSettings : microsoft.graph.implicitGrantSettings;
  logoutUrl : LargeString;
  redirectUris : many LargeString;
};

type microsoft.graph.permissionScope {
  adminConsentDescription : LargeString;
  adminConsentDisplayName : LargeString;
  id : UUID;
  isEnabled : Boolean;
  origin : LargeString;
  type : LargeString;
  userConsentDescription : LargeString;
  userConsentDisplayName : LargeString;
  value : LargeString;
};

type microsoft.graph.resourceSpecificPermission {
  description : LargeString;
  displayName : LargeString;
  id : UUID;
  isEnabled : Boolean;
  value : LargeString;
};

type microsoft.graph.samlSingleSignOnSettings {
  relayState : LargeString;
};

type microsoft.graph.authenticationMethodsRegistrationCampaign {
  excludeTargets : many microsoft.graph.excludeTarget;
  includeTargets : many microsoft.graph.authenticationMethodsRegistrationCampaignIncludeTarget;
  snoozeDurationInDays : Integer;
};

type microsoft.graph.excludeTarget {
  id : LargeString;
};

type microsoft.graph.authenticationMethodsRegistrationCampaignIncludeTarget {
  id : LargeString;
  targetedAuthenticationMethod : LargeString;
};

type microsoft.graph.fido2KeyRestrictions {
  aaGuids : many LargeString;
  isEnforced : Boolean;
};

type microsoft.graph.registrationEnforcement {
  authenticationMethodsRegistrationCampaign : microsoft.graph.authenticationMethodsRegistrationCampaign;
};

type microsoft.graph.availabilityItem {
  endDateTime : microsoft.graph.dateTimeTimeZone;
  serviceId : LargeString;
  startDateTime : microsoft.graph.dateTimeTimeZone;
};

type microsoft.graph.dateTimeTimeZone {
  dateTime : LargeString;
  timeZone : LargeString;
};

type microsoft.graph.bookingCustomerInformationBase {
};

type microsoft.graph.bookingCustomerInformation : microsoft.graph.bookingCustomerInformationBase {
  customerId : LargeString;
  customQuestionAnswers : many microsoft.graph.bookingQuestionAnswer;
  emailAddress : LargeString;
  location : microsoft.graph.location;
  name : LargeString;
  notes : LargeString;
  phone : LargeString;
  timeZone : LargeString;
};

type microsoft.graph.bookingQuestionAnswer {
  answer : LargeString;
  answerOptions : many LargeString;
  isRequired : Boolean;
  question : LargeString;
  questionId : LargeString;
  selectedOptions : many LargeString;
};

type microsoft.graph.location {
  address : microsoft.graph.physicalAddress;
  coordinates : microsoft.graph.outlookGeoCoordinates;
  displayName : LargeString;
  locationEmailAddress : LargeString;
  locationUri : LargeString;
  uniqueId : LargeString;
};

type microsoft.graph.bookingQuestionAssignment {
  isRequired : Boolean;
  questionId : LargeString;
};

type microsoft.graph.bookingReminder {
  message : LargeString;
};

type microsoft.graph.bookingSchedulingPolicy {
  allowStaffSelection : Boolean;
  sendConfirmationsToOwner : Boolean;
};

type microsoft.graph.bookingWorkHours {
  timeSlots : many microsoft.graph.bookingWorkTimeSlot;
};

type microsoft.graph.bookingWorkTimeSlot {
  endTime : Time;
  startTime : Time;
};

type microsoft.graph.physicalAddress {
  city : LargeString;
  countryOrRegion : LargeString;
  postalCode : LargeString;
  state : LargeString;
  street : LargeString;
};

type microsoft.graph.outlookGeoCoordinates {
  accuracy : Double;
  altitude : Double;
  altitudeAccuracy : Double;
  latitude : Double;
  longitude : Double;
};

type microsoft.graph.phone {
  language : LargeString;
  number : LargeString;
  region : LargeString;
};

type microsoft.graph.staffAvailabilityItem {
  availabilityItems : many microsoft.graph.availabilityItem;
  staffId : LargeString;
};

type microsoft.graph.timeSlot {
  end : microsoft.graph.dateTimeTimeZone;
  start : microsoft.graph.dateTimeTimeZone;
};

type microsoft.graph.dataSubject {
  email : LargeString;
  firstName : LargeString;
  lastName : LargeString;
  residency : LargeString;
};

type microsoft.graph.identitySet {
  application : microsoft.graph.identity;
  device : microsoft.graph.identity;
  user : microsoft.graph.identity;
};

type microsoft.graph.itemBody {
  content : LargeString;
};

type microsoft.graph.keyValuePair {
  name : LargeString;
  value : LargeString;
};

type microsoft.graph.publicError {
  code : LargeString;
  details : many microsoft.graph.publicErrorDetail;
  innerError : microsoft.graph.publicInnerError;
  message : LargeString;
  target : LargeString;
};

type microsoft.graph.publicErrorDetail {
  code : LargeString;
  message : LargeString;
  target : LargeString;
};

type microsoft.graph.publicInnerError {
  code : LargeString;
  details : many microsoft.graph.publicErrorDetail;
  message : LargeString;
  target : LargeString;
};

type microsoft.graph.subjectRightsRequestDetail {
  excludedItemCount : Integer64;
  insightCounts : many microsoft.graph.keyValuePair;
  itemCount : Integer64;
  itemNeedReview : Integer64;
  productItemCounts : many microsoft.graph.keyValuePair;
  signedOffItemCount : Integer64;
  totalItemSize : Integer64;
};

type microsoft.graph.subjectRightsRequestHistory {
  changedBy : microsoft.graph.identitySet;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  eventDateTime : DateTime;
  type : LargeString;
};

type microsoft.graph.subjectRightsRequestStageDetail {
  error : microsoft.graph.publicError;
};

type microsoft.graph.teamFunSettings {
  allowCustomMemes : Boolean;
  allowGiphy : Boolean;
  allowStickersAndMemes : Boolean;
};

type microsoft.graph.teamGuestSettings {
  allowCreateUpdateChannels : Boolean;
  allowDeleteChannels : Boolean;
};

type microsoft.graph.teamMemberSettings {
  allowAddRemoveApps : Boolean;
  allowCreatePrivateChannels : Boolean;
  allowCreateUpdateChannels : Boolean;
  allowCreateUpdateRemoveConnectors : Boolean;
  allowCreateUpdateRemoveTabs : Boolean;
  allowDeleteChannels : Boolean;
};

type microsoft.graph.teamMessagingSettings {
  allowChannelMentions : Boolean;
  allowOwnerDeleteMessages : Boolean;
  allowTeamMentions : Boolean;
  allowUserDeleteMessages : Boolean;
  allowUserEditMessages : Boolean;
};

type microsoft.graph.teamSummary {
  guestsCount : Integer;
  membersCount : Integer;
  ownersCount : Integer;
};

type microsoft.graph.resultInfo {
  code : Integer;
  message : LargeString;
  subcode : Integer;
};

type microsoft.graph.assignedLabel {
  displayName : LargeString;
  labelId : LargeString;
};

type microsoft.graph.licenseProcessingState {
  state : LargeString;
};

type microsoft.graph.root {
};

type microsoft.graph.sharepointIds {
  listId : LargeString;
  listItemId : LargeString;
  listItemUniqueId : LargeString;
  siteId : LargeString;
  siteUrl : LargeString;
  tenantId : LargeString;
  webId : LargeString;
};

type microsoft.graph.siteCollection {
  dataLocationCode : LargeString;
  hostname : LargeString;
  root : microsoft.graph.root;
};

type microsoft.graph.apiAuthenticationConfigurationBase {
};

type microsoft.graph.assignmentOrder {
  order : many LargeString;
};

type microsoft.graph.basicAuthentication : microsoft.graph.apiAuthenticationConfigurationBase {
  password : LargeString;
  username : LargeString;
};

type microsoft.graph.clientCertificateAuthentication : microsoft.graph.apiAuthenticationConfigurationBase {
  certificateList : many microsoft.graph.pkcs12CertificateInformation;
};

type microsoft.graph.pkcs12CertificateInformation {
  isActive : Boolean;
  notAfter : Integer64;
  notBefore : Integer64;
  thumbprint : LargeString;
};

type microsoft.graph.pkcs12Certificate : microsoft.graph.apiAuthenticationConfigurationBase {
  password : LargeString;
  pkcs12Value : LargeString;
};

type microsoft.graph.selfServiceSignUpAuthenticationFlowConfiguration {
  isEnabled : Boolean;
};

type microsoft.graph.userAttributeValuesItem {
  isDefault : Boolean;
  name : LargeString;
  value : LargeString;
};

type microsoft.graph.userFlowApiConnectorConfiguration {
};

type microsoft.graph.alternativeSecurityId {
  identityProvider : LargeString;
  ![key] : LargeBinary;
  type : Integer;
};

type microsoft.graph.preAuthorizedApplication {
  appId : LargeString;
  delegatedPermissionIds : many LargeString;
};

type microsoft.graph.certificateAuthority {
  certificate : LargeBinary;
  certificateRevocationListUrl : LargeString;
  deltaCertificateRevocationListUrl : LargeString;
  isRootAuthority : Boolean;
  issuer : LargeString;
  issuerSki : LargeString;
};

type microsoft.graph.ComplexExtensionValue {
};

type microsoft.graph.crossTenantAccessPolicyB2BSetting {
  applications : microsoft.graph.crossTenantAccessPolicyTargetConfiguration;
  usersAndGroups : microsoft.graph.crossTenantAccessPolicyTargetConfiguration;
};

type microsoft.graph.crossTenantAccessPolicyTargetConfiguration {
  targets : many microsoft.graph.crossTenantAccessPolicyTarget;
};

type microsoft.graph.crossTenantAccessPolicyInboundTrust {
  isCompliantDeviceAccepted : Boolean;
  isHybridAzureADJoinedDeviceAccepted : Boolean;
  isMfaAccepted : Boolean;
};

type microsoft.graph.crossTenantAccessPolicyTarget {
  target : LargeString;
};

type microsoft.graph.defaultUserRolePermissions {
  allowedToCreateApps : Boolean;
  allowedToCreateSecurityGroups : Boolean;
  allowedToReadOtherUsers : Boolean;
  permissionGrantPoliciesAssigned : many LargeString;
};

type microsoft.graph.domainState {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastActionDateTime : DateTime;
  operation : LargeString;
  status : LargeString;
};

type microsoft.graph.implicitGrantSettings {
  enableAccessTokenIssuance : Boolean;
  enableIdTokenIssuance : Boolean;
};

type microsoft.graph.instanceResourceAccess {
  permissions : many microsoft.graph.resourcePermission;
  resourceAppId : LargeString;
};

type microsoft.graph.resourcePermission {
  type : LargeString;
  value : LargeString;
};

type microsoft.graph.licenseUnitsDetail {
  enabled : Integer;
  suspended : Integer;
  warning : Integer;
};

type microsoft.graph.optionalClaim {
  additionalProperties : many LargeString;
  essential : Boolean;
  name : LargeString;
  source : LargeString;
};

type microsoft.graph.physicalOfficeAddress {
  city : LargeString;
  countryOrRegion : LargeString;
  officeLocation : LargeString;
  postalCode : LargeString;
  state : LargeString;
  street : LargeString;
};

type microsoft.graph.privacyProfile {
  contactEmail : LargeString;
  statementUrl : LargeString;
};

type microsoft.graph.resourceAccess {
  id : UUID;
  type : LargeString;
};

type microsoft.graph.selfSignedCertificate {
  customKeyIdentifier : LargeBinary;
  displayName : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  endDateTime : DateTime;
  ![key] : LargeBinary;
  keyId : UUID;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  startDateTime : DateTime;
  thumbprint : LargeString;
  type : LargeString;
  usage : LargeString;
};

type microsoft.graph.servicePlanInfo {
  appliesTo : LargeString;
  provisioningStatus : LargeString;
  servicePlanId : UUID;
  servicePlanName : LargeString;
};

type microsoft.graph.settingTemplateValue {
  defaultValue : LargeString;
  description : LargeString;
  name : LargeString;
  type : LargeString;
};

type microsoft.graph.settingValue {
  name : LargeString;
  value : LargeString;
};

type microsoft.graph.signingCertificateUpdateStatus {
  certificateUpdateResult : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastRunDateTime : DateTime;
};

type microsoft.graph.unifiedRolePermission {
  allowedResourceActions : many LargeString;
  condition : LargeString;
  excludedResourceActions : many LargeString;
};

type microsoft.graph.verifiedDomain {
  capabilities : LargeString;
  isDefault : Boolean;
  isInitial : Boolean;
  name : LargeString;
  type : LargeString;
};

type microsoft.graph.educationAssignmentRecipient {
};

type microsoft.graph.educationAssignmentClassRecipient : microsoft.graph.educationAssignmentRecipient {
};

type microsoft.graph.educationAssignmentGrade {
  gradedBy : microsoft.graph.identitySet;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  gradedDateTime : DateTime;
};

type microsoft.graph.educationAssignmentGradeType {
};

type microsoft.graph.educationAssignmentGroupRecipient : microsoft.graph.educationAssignmentRecipient {
};

type microsoft.graph.educationAssignmentIndividualRecipient : microsoft.graph.educationAssignmentRecipient {
  recipients : many LargeString;
};

type microsoft.graph.educationAssignmentPointsGrade : microsoft.graph.educationAssignmentGrade {
  @odata.type : 'Edm.Single'
  points : Double;
};

type microsoft.graph.educationAssignmentPointsGradeType : microsoft.graph.educationAssignmentGradeType {
  @odata.type : 'Edm.Single'
  maxPoints : Double;
};

type microsoft.graph.educationResource {
  createdBy : microsoft.graph.identitySet;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  displayName : LargeString;
  lastModifiedBy : microsoft.graph.identitySet;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastModifiedDateTime : DateTime;
};

type microsoft.graph.educationExcelResource : microsoft.graph.educationResource {
  fileUrl : LargeString;
};

type microsoft.graph.educationExternalResource : microsoft.graph.educationResource {
  webUrl : LargeString;
};

type microsoft.graph.educationFeedback {
  feedbackBy : microsoft.graph.identitySet;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  feedbackDateTime : DateTime;
  text : microsoft.graph.educationItemBody;
};

type microsoft.graph.educationItemBody {
  content : LargeString;
};

type microsoft.graph.educationFileResource : microsoft.graph.educationResource {
  fileUrl : LargeString;
};

type microsoft.graph.educationLinkResource : microsoft.graph.educationResource {
  link : LargeString;
};

type microsoft.graph.educationMediaResource : microsoft.graph.educationResource {
  fileUrl : LargeString;
};

type microsoft.graph.educationPowerPointResource : microsoft.graph.educationResource {
  fileUrl : LargeString;
};

type microsoft.graph.educationSubmissionRecipient {
};

type microsoft.graph.educationSubmissionIndividualRecipient : microsoft.graph.educationSubmissionRecipient {
  userId : LargeString;
};

type microsoft.graph.educationTeamsAppResource : microsoft.graph.educationResource {
  appIconWebUrl : LargeString;
  appId : LargeString;
  teamsEmbeddedContentUrl : LargeString;
  webUrl : LargeString;
};

type microsoft.graph.educationWordResource : microsoft.graph.educationResource {
  fileUrl : LargeString;
};

type microsoft.graph.rubricCriterion {
  description : microsoft.graph.educationItemBody;
};

type microsoft.graph.rubricLevel {
  description : microsoft.graph.educationItemBody;
  displayName : LargeString;
  grading : microsoft.graph.educationAssignmentGradeType;
  levelId : LargeString;
};

type microsoft.graph.rubricQuality {
  criteria : many microsoft.graph.rubricCriterion;
  description : microsoft.graph.educationItemBody;
  displayName : LargeString;
  qualityId : LargeString;
  @odata.type : 'Edm.Single'
  weight : Double;
};

type microsoft.graph.rubricQualityFeedbackModel {
  feedback : microsoft.graph.educationItemBody;
  qualityId : LargeString;
};

type microsoft.graph.rubricQualitySelectedColumnModel {
  columnId : LargeString;
  qualityId : LargeString;
};

type microsoft.graph.educationCourse {
  courseNumber : LargeString;
  description : LargeString;
  displayName : LargeString;
  externalId : LargeString;
  subject : LargeString;
};

type microsoft.graph.educationTerm {
  displayName : LargeString;
  endDate : Date;
  externalId : LargeString;
  startDate : Date;
};

type microsoft.graph.relatedContact {
  accessConsent : Boolean;
  displayName : LargeString;
  emailAddress : LargeString;
  mobilePhone : LargeString;
};

type microsoft.graph.educationOnPremisesInfo {
  immutableId : LargeString;
};

type microsoft.graph.educationStudent {
  birthDate : Date;
  externalId : LargeString;
  grade : LargeString;
  graduationYear : LargeString;
  studentNumber : LargeString;
};

type microsoft.graph.educationTeacher {
  externalId : LargeString;
  teacherNumber : LargeString;
};

type microsoft.graph.Json {
};

type microsoft.graph.workbookFilterCriteria {
  color : LargeString;
  criterion1 : LargeString;
  criterion2 : LargeString;
  dynamicCriteria : LargeString;
  filterOn : LargeString;
  icon : microsoft.graph.workbookIcon;
  operator : LargeString;
  values : microsoft.graph.Json;
};

type microsoft.graph.workbookIcon {
  index : Integer;
  set : LargeString;
};

type microsoft.graph.workbookFilterDatetime {
  date : LargeString;
  specificity : LargeString;
};

type microsoft.graph.workbookOperationError {
  code : LargeString;
  innerError : microsoft.graph.workbookOperationError;
  message : LargeString;
};

type microsoft.graph.workbookRangeReference {
  address : LargeString;
};

type microsoft.graph.workbookSessionInfo {
  id : LargeString;
  persistChanges : Boolean;
};

type microsoft.graph.workbookSortField {
  ascending : Boolean;
  color : LargeString;
  dataOption : LargeString;
  icon : microsoft.graph.workbookIcon;
  ![key] : Integer;
  sortOn : LargeString;
};

type microsoft.graph.workbookWorksheetProtectionOptions {
  allowAutoFilter : Boolean;
  allowDeleteColumns : Boolean;
  allowDeleteRows : Boolean;
  allowFormatCells : Boolean;
  allowFormatColumns : Boolean;
  allowFormatRows : Boolean;
  allowInsertColumns : Boolean;
  allowInsertHyperlinks : Boolean;
  allowInsertRows : Boolean;
  allowPivotTables : Boolean;
  allowSort : Boolean;
};

type microsoft.graph.quota {
  deleted : Integer64;
  remaining : Integer64;
  state : LargeString;
  storagePlanInformation : microsoft.graph.storagePlanInformation;
  total : Integer64;
  used : Integer64;
};

type microsoft.graph.systemFacet {
};

type microsoft.graph.audio {
  album : LargeString;
  albumArtist : LargeString;
  artist : LargeString;
  bitrate : Integer64;
  composers : LargeString;
  copyright : LargeString;
  disc : Integer;
  discCount : Integer;
  duration : Integer64;
  genre : LargeString;
  hasDrm : Boolean;
  isVariableBitrate : Boolean;
  title : LargeString;
  track : Integer;
  trackCount : Integer;
  year : Integer;
};

type microsoft.graph.bundle {
  album : microsoft.graph.album;
  childCount : Integer;
};

type microsoft.graph.deleted {
  state : LargeString;
};

type microsoft.graph.file {
  hashes : microsoft.graph.hashes;
  mimeType : LargeString;
  processingMetadata : Boolean;
};

type microsoft.graph.fileSystemInfo {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastAccessedDateTime : DateTime;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastModifiedDateTime : DateTime;
};

type microsoft.graph.folder {
  childCount : Integer;
  view : microsoft.graph.folderView;
};

type microsoft.graph.image {
  height : Integer;
  width : Integer;
};

type microsoft.graph.malware {
  description : LargeString;
};

type microsoft.graph.package {
  type : LargeString;
};

type microsoft.graph.pendingOperations {
  pendingContentUpdate : microsoft.graph.pendingContentUpdate;
};

type microsoft.graph.photo {
  cameraMake : LargeString;
  cameraModel : LargeString;
  exposureDenominator : Double;
  exposureNumerator : Double;
  fNumber : Double;
  focalLength : Double;
  iso : Integer;
  orientation : Integer;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  takenDateTime : DateTime;
};

type microsoft.graph.publicationFacet {
  level : LargeString;
  versionId : LargeString;
};

type microsoft.graph.remoteItem {
  createdBy : microsoft.graph.identitySet;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  file : microsoft.graph.file;
  fileSystemInfo : microsoft.graph.fileSystemInfo;
  folder : microsoft.graph.folder;
  id : LargeString;
  image : microsoft.graph.image;
  lastModifiedBy : microsoft.graph.identitySet;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastModifiedDateTime : DateTime;
  name : LargeString;
  package : microsoft.graph.package;
  parentReference : microsoft.graph.itemReference;
  shared : microsoft.graph.shared;
  sharepointIds : microsoft.graph.sharepointIds;
  size : Integer64;
  specialFolder : microsoft.graph.specialFolder;
  video : microsoft.graph.video;
  webDavUrl : LargeString;
  webUrl : LargeString;
};

type microsoft.graph.searchResult {
  onClickTelemetryUrl : LargeString;
};

type microsoft.graph.shared {
  owner : microsoft.graph.identitySet;
  scope : LargeString;
  sharedBy : microsoft.graph.identitySet;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  sharedDateTime : DateTime;
};

type microsoft.graph.specialFolder {
  name : LargeString;
};

type microsoft.graph.video {
  audioBitsPerSample : Integer;
  audioChannels : Integer;
  audioFormat : LargeString;
  audioSamplesPerSecond : Integer;
  bitrate : Integer;
  duration : Integer64;
  fourCC : LargeString;
  frameRate : Double;
  height : Integer;
  width : Integer;
};

type microsoft.graph.listInfo {
  contentTypesEnabled : Boolean;
  hidden : Boolean;
  template : LargeString;
};

type microsoft.graph.attendeeAvailability {
  attendee : microsoft.graph.attendeeBase;
};

type microsoft.graph.attendeeBase : microsoft.graph.recipient {
};

type microsoft.graph.locationConstraint {
  isRequired : Boolean;
  locations : many microsoft.graph.locationConstraintItem;
  suggestLocation : Boolean;
};

type microsoft.graph.locationConstraintItem : microsoft.graph.location {
  resolveAvailability : Boolean;
};

type microsoft.graph.meetingTimeSuggestion {
  attendeeAvailability : many microsoft.graph.attendeeAvailability;
  confidence : Double;
  locations : many microsoft.graph.location;
  meetingTimeSlot : microsoft.graph.timeSlot;
  order : Integer;
  suggestionReason : LargeString;
};

type microsoft.graph.meetingTimeSuggestionsResult {
  emptySuggestionsReason : LargeString;
  meetingTimeSuggestions : many microsoft.graph.meetingTimeSuggestion;
};

type microsoft.graph.timeConstraint {
  timeSlots : many microsoft.graph.timeSlot;
};

type microsoft.graph.attachmentItem {
  contentId : LargeString;
  contentType : LargeString;
  isInline : Boolean;
  name : LargeString;
  size : Integer64;
};

type microsoft.graph.attendee : microsoft.graph.attendeeBase {
  proposedNewTime : microsoft.graph.timeSlot;
  status : microsoft.graph.responseStatus;
};

type microsoft.graph.responseStatus {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  time : DateTime;
};

type microsoft.graph.automaticRepliesMailTips {
  message : LargeString;
  messageLanguage : microsoft.graph.localeInfo;
  scheduledEndTime : microsoft.graph.dateTimeTimeZone;
  scheduledStartTime : microsoft.graph.dateTimeTimeZone;
};

type microsoft.graph.localeInfo {
  displayName : LargeString;
  locale : LargeString;
};

type microsoft.graph.automaticRepliesSetting {
  externalReplyMessage : LargeString;
  internalReplyMessage : LargeString;
  scheduledEndDateTime : microsoft.graph.dateTimeTimeZone;
  scheduledStartDateTime : microsoft.graph.dateTimeTimeZone;
};

type microsoft.graph.calendarSharingMessageAction {
};

type microsoft.graph.convertIdResult {
  errorDetails : microsoft.graph.genericError;
  sourceId : LargeString;
  targetId : LargeString;
};

type microsoft.graph.genericError {
  code : LargeString;
  message : LargeString;
};

type microsoft.graph.timeZoneBase {
  name : LargeString;
};

type microsoft.graph.customTimeZone : microsoft.graph.timeZoneBase {
  bias : Integer;
  daylightOffset : microsoft.graph.daylightTimeZoneOffset;
  standardOffset : microsoft.graph.standardTimeZoneOffset;
};

type microsoft.graph.standardTimeZoneOffset {
  dayOccurrence : Integer;
  month : Integer;
  time : Time;
  year : Integer;
};

type microsoft.graph.daylightTimeZoneOffset : microsoft.graph.standardTimeZoneOffset {
  daylightBias : Integer;
};

type microsoft.graph.followupFlag {
  completedDateTime : microsoft.graph.dateTimeTimeZone;
  dueDateTime : microsoft.graph.dateTimeTimeZone;
  startDateTime : microsoft.graph.dateTimeTimeZone;
};

type microsoft.graph.freeBusyError {
  message : LargeString;
  responseCode : LargeString;
};

type microsoft.graph.internetMessageHeader {
  name : LargeString;
  value : LargeString;
};

type microsoft.graph.workingHours {
  endTime : Time;
  startTime : Time;
  timeZone : microsoft.graph.timeZoneBase;
};

type microsoft.graph.mailTips {
  automaticReplies : microsoft.graph.automaticRepliesMailTips;
  customMailTip : LargeString;
  deliveryRestricted : Boolean;
  emailAddress : microsoft.graph.emailAddress;
  error : microsoft.graph.mailTipsError;
  externalMemberCount : Integer;
  isModerated : Boolean;
  mailboxFull : Boolean;
  maxMessageSize : Integer;
  recipientSuggestions : many microsoft.graph.recipient;
  totalMemberCount : Integer;
};

type microsoft.graph.mailTipsError {
  code : LargeString;
  message : LargeString;
};

type microsoft.graph.messageRuleActions {
  assignCategories : many LargeString;
  copyToFolder : LargeString;
  delete : Boolean;
  forwardAsAttachmentTo : many microsoft.graph.recipient;
  forwardTo : many microsoft.graph.recipient;
  markAsRead : Boolean;
  moveToFolder : LargeString;
  permanentDelete : Boolean;
  redirectTo : many microsoft.graph.recipient;
  stopProcessingRules : Boolean;
};

type microsoft.graph.messageRulePredicates {
  bodyContains : many LargeString;
  bodyOrSubjectContains : many LargeString;
  categories : many LargeString;
  fromAddresses : many microsoft.graph.recipient;
  hasAttachments : Boolean;
  headerContains : many LargeString;
  isApprovalRequest : Boolean;
  isAutomaticForward : Boolean;
  isAutomaticReply : Boolean;
  isEncrypted : Boolean;
  isMeetingRequest : Boolean;
  isMeetingResponse : Boolean;
  isNonDeliveryReport : Boolean;
  isPermissionControlled : Boolean;
  isReadReceipt : Boolean;
  isSigned : Boolean;
  isVoicemail : Boolean;
  notSentToMe : Boolean;
  recipientContains : many LargeString;
  senderContains : many LargeString;
  sentCcMe : Boolean;
  sentOnlyToMe : Boolean;
  sentToAddresses : many microsoft.graph.recipient;
  sentToMe : Boolean;
  sentToOrCcMe : Boolean;
  subjectContains : many LargeString;
  withinSizeRange : microsoft.graph.sizeRange;
};

type microsoft.graph.sizeRange {
  maximumSize : Integer;
  minimumSize : Integer;
};

type microsoft.graph.onlineMeetingInfo {
  conferenceId : LargeString;
  joinUrl : LargeString;
  phones : many microsoft.graph.phone;
  quickDial : LargeString;
  tollFreeNumbers : many LargeString;
  tollNumber : LargeString;
};

type microsoft.graph.patternedRecurrence {
  pattern : microsoft.graph.recurrencePattern;
  range : microsoft.graph.recurrenceRange;
};

type microsoft.graph.recurrencePattern {
  dayOfMonth : Integer;
  interval : Integer;
  month : Integer;
};

type microsoft.graph.recurrenceRange {
  endDate : Date;
  numberOfOccurrences : Integer;
  recurrenceTimeZone : LargeString;
  startDate : Date;
};

type microsoft.graph.personType {
  class : LargeString;
  subclass : LargeString;
};

type microsoft.graph.reminder {
  changeKey : LargeString;
  eventEndTime : microsoft.graph.dateTimeTimeZone;
  eventId : LargeString;
  eventLocation : microsoft.graph.location;
  eventStartTime : microsoft.graph.dateTimeTimeZone;
  eventSubject : LargeString;
  eventWebLink : LargeString;
  reminderFireTime : microsoft.graph.dateTimeTimeZone;
};

type microsoft.graph.scheduleInformation {
  availabilityView : LargeString;
  error : microsoft.graph.freeBusyError;
  scheduleId : LargeString;
  scheduleItems : many microsoft.graph.scheduleItem;
  workingHours : microsoft.graph.workingHours;
};

type microsoft.graph.scheduleItem {
  end : microsoft.graph.dateTimeTimeZone;
  isPrivate : Boolean;
  location : LargeString;
  start : microsoft.graph.dateTimeTimeZone;
  subject : LargeString;
};

type microsoft.graph.scoredEmailAddress {
  address : LargeString;
  itemId : LargeString;
  relevanceScore : Double;
};

type microsoft.graph.timeZoneInformation {
  alias : LargeString;
  displayName : LargeString;
};

type microsoft.graph.uploadSession {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  expirationDateTime : DateTime;
  nextExpectedRanges : many LargeString;
  uploadUrl : LargeString;
};

type microsoft.graph.website {
  address : LargeString;
  displayName : LargeString;
};

type microsoft.graph.accessAction {
};

type microsoft.graph.album {
  coverImageItemId : LargeString;
};

type microsoft.graph.booleanColumn {
};

type microsoft.graph.calculatedColumn {
  format : LargeString;
  formula : LargeString;
  outputType : LargeString;
};

type microsoft.graph.choiceColumn {
  allowTextEntry : Boolean;
  choices : many LargeString;
  displayAs : LargeString;
};

type microsoft.graph.columnValidation {
  defaultLanguage : LargeString;
  descriptions : many microsoft.graph.displayNameLocalization;
  formula : LargeString;
};

type microsoft.graph.displayNameLocalization {
  displayName : LargeString;
  languageTag : LargeString;
};

type microsoft.graph.contentApprovalStatusColumn {
};

type microsoft.graph.contentTypeInfo {
  id : LargeString;
  name : LargeString;
};

type microsoft.graph.contentTypeOrder {
  default : Boolean;
  position : Integer;
};

type microsoft.graph.currencyColumn {
  locale : LargeString;
};

type microsoft.graph.dateTimeColumn {
  displayAs : LargeString;
  format : LargeString;
};

type microsoft.graph.defaultColumnValue {
  formula : LargeString;
  value : LargeString;
};

type microsoft.graph.documentSet {
  allowedContentTypes : many microsoft.graph.contentTypeInfo;
  defaultContents : many microsoft.graph.documentSetContent;
  propagateWelcomePageChanges : Boolean;
  shouldPrefixNameToFile : Boolean;
  welcomePageUrl : LargeString;
};

type microsoft.graph.documentSetContent {
  contentType : microsoft.graph.contentTypeInfo;
  fileName : LargeString;
  folderName : LargeString;
};

type microsoft.graph.documentSetVersionItem {
  itemId : LargeString;
  title : LargeString;
  versionId : LargeString;
};

type microsoft.graph.driveItemUploadableProperties {
  description : LargeString;
  fileSize : Integer64;
  fileSystemInfo : microsoft.graph.fileSystemInfo;
  name : LargeString;
};

type microsoft.graph.driveRecipient {
  alias : LargeString;
  email : LargeString;
  objectId : LargeString;
};

type microsoft.graph.hashes {
  crc32Hash : LargeString;
  quickXorHash : LargeString;
  sha1Hash : LargeString;
  sha256Hash : LargeString;
};

type microsoft.graph.folderView {
  sortBy : LargeString;
  sortOrder : LargeString;
  viewType : LargeString;
};

type microsoft.graph.geolocationColumn {
};

type microsoft.graph.hyperlinkOrPictureColumn {
  isPicture : Boolean;
};

type microsoft.graph.incompleteData {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  missingDataBeforeDateTime : DateTime;
  wasThrottled : Boolean;
};

type microsoft.graph.itemActionStat {
  actionCount : Integer;
  actorCount : Integer;
};

type microsoft.graph.itemPreviewInfo {
  getUrl : LargeString;
  postParameters : LargeString;
  postUrl : LargeString;
};

type microsoft.graph.itemReference {
  driveId : LargeString;
  driveType : LargeString;
  id : LargeString;
  name : LargeString;
  path : LargeString;
  shareId : LargeString;
  sharepointIds : microsoft.graph.sharepointIds;
  siteId : LargeString;
};

type microsoft.graph.lookupColumn {
  allowMultipleValues : Boolean;
  allowUnlimitedLength : Boolean;
  columnName : LargeString;
  listId : LargeString;
  primaryLookupColumnId : LargeString;
};

type microsoft.graph.numberColumn {
  decimalPlaces : LargeString;
  displayAs : LargeString;
  maximum : Double;
  minimum : Double;
};

type microsoft.graph.pendingContentUpdate {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  queuedDateTime : DateTime;
};

type microsoft.graph.personOrGroupColumn {
  allowMultipleSelection : Boolean;
  chooseFromType : LargeString;
  displayAs : LargeString;
};

type microsoft.graph.storagePlanInformation {
  upgradeAvailable : Boolean;
};

type microsoft.graph.sharePointIdentity : microsoft.graph.identity {
  loginName : LargeString;
};

type microsoft.graph.sharePointIdentitySet : microsoft.graph.identitySet {
  group : microsoft.graph.identity;
  siteGroup : microsoft.graph.sharePointIdentity;
  siteUser : microsoft.graph.sharePointIdentity;
};

type microsoft.graph.sharingInvitation {
  email : LargeString;
  invitedBy : microsoft.graph.identitySet;
  redeemedBy : LargeString;
  signInRequired : Boolean;
};

type microsoft.graph.sharingLink {
  application : microsoft.graph.identity;
  preventsDownload : Boolean;
  scope : LargeString;
  type : LargeString;
  webHtml : LargeString;
  webUrl : LargeString;
};

type microsoft.graph.termColumn {
  allowMultipleValues : Boolean;
  showFullyQualifiedName : Boolean;
};

type microsoft.graph.textColumn {
  allowMultipleLines : Boolean;
  appendChangesToExistingText : Boolean;
  linesForEditing : Integer;
  maxLength : Integer;
  textType : LargeString;
};

type microsoft.graph.thumbnail {
  @odata.type : 'Edm.Stream'
  content : LargeBinary;
  height : Integer;
  sourceItemId : LargeString;
  url : LargeString;
  width : Integer;
};

type microsoft.graph.thumbnailColumn {
};

type microsoft.graph.extensionSchemaProperty {
  name : LargeString;
  type : LargeString;
};

type microsoft.graph.accessReviewApplyAction {
};

type microsoft.graph.accessReviewHistoryScheduleSettings {
  recurrence : microsoft.graph.patternedRecurrence;
  reportRange : LargeString;
};

type microsoft.graph.accessReviewScope {
};

type microsoft.graph.accessReviewQueryScope : microsoft.graph.accessReviewScope {
  query : LargeString;
  queryRoot : LargeString;
  queryType : LargeString;
};

type microsoft.graph.accessReviewInactiveUsersQueryScope : microsoft.graph.accessReviewQueryScope {
};

type microsoft.graph.accessReviewInstanceDecisionItemResource {
  displayName : LargeString;
  id : LargeString;
  type : LargeString;
};

type microsoft.graph.accessReviewInstanceDecisionItemAccessPackageAssignmentPolicyResource : microsoft.graph.accessReviewInstanceDecisionItemResource {
  accessPackageDisplayName : LargeString;
  accessPackageId : LargeString;
};

type microsoft.graph.accessReviewInstanceDecisionItemAzureRoleResource : microsoft.graph.accessReviewInstanceDecisionItemResource {
  scope : microsoft.graph.accessReviewInstanceDecisionItemResource;
};

type microsoft.graph.accessReviewInstanceDecisionItemServicePrincipalResource : microsoft.graph.accessReviewInstanceDecisionItemResource {
  appId : LargeString;
};

type microsoft.graph.accessReviewNotificationRecipientItem {
  notificationRecipientScope : microsoft.graph.accessReviewNotificationRecipientScope;
  notificationTemplateType : LargeString;
};

type microsoft.graph.accessReviewNotificationRecipientScope {
};

type microsoft.graph.accessReviewNotificationRecipientQueryScope : microsoft.graph.accessReviewNotificationRecipientScope {
  query : LargeString;
  queryRoot : LargeString;
  queryType : LargeString;
};

type microsoft.graph.accessReviewReviewerScope {
  query : LargeString;
  queryRoot : LargeString;
  queryType : LargeString;
};

type microsoft.graph.accessReviewScheduleSettings {
  applyActions : many microsoft.graph.accessReviewApplyAction;
  autoApplyDecisionsEnabled : Boolean;
  decisionHistoriesForReviewersEnabled : Boolean;
  defaultDecision : LargeString;
  defaultDecisionEnabled : Boolean;
  instanceDurationInDays : Integer;
  justificationRequiredOnApproval : Boolean;
  mailNotificationsEnabled : Boolean;
  recommendationsEnabled : Boolean;
  recurrence : microsoft.graph.patternedRecurrence;
  reminderNotificationsEnabled : Boolean;
};

type microsoft.graph.accessReviewStageSettings {
  decisionsThatWillMoveToNextStage : many LargeString;
  dependsOn : many LargeString;
  durationInDays : Integer;
  fallbackReviewers : many microsoft.graph.accessReviewReviewerScope;
  recommendationsEnabled : Boolean;
  reviewers : many microsoft.graph.accessReviewReviewerScope;
  stageId : LargeString;
};

type microsoft.graph.appConsentRequestScope {
  displayName : LargeString;
};

type microsoft.graph.disableAndDeleteUserApplyAction : microsoft.graph.accessReviewApplyAction {
};

type microsoft.graph.principalResourceMembershipsScope : microsoft.graph.accessReviewScope {
  principalScopes : many microsoft.graph.accessReviewScope;
  resourceScopes : many microsoft.graph.accessReviewScope;
};

type microsoft.graph.removeAccessApplyAction : microsoft.graph.accessReviewApplyAction {
};

type microsoft.graph.servicePrincipalIdentity : microsoft.graph.identity {
  appId : LargeString;
};

type microsoft.graph.agreementFileData {
  data : LargeBinary;
};

type microsoft.graph.termsExpiration {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  startDateTime : DateTime;
};

type microsoft.graph.conditionalAccessSessionControl {
  isEnabled : Boolean;
};

type microsoft.graph.applicationEnforcedRestrictionsSessionControl : microsoft.graph.conditionalAccessSessionControl {
};

type microsoft.graph.cloudAppSecuritySessionControl : microsoft.graph.conditionalAccessSessionControl {
};

type microsoft.graph.conditionalAccessApplications {
  excludeApplications : many LargeString;
  includeApplications : many LargeString;
  includeAuthenticationContextClassReferences : many LargeString;
  includeUserActions : many LargeString;
};

type microsoft.graph.conditionalAccessClientApplications {
  excludeServicePrincipals : many LargeString;
  includeServicePrincipals : many LargeString;
};

type microsoft.graph.conditionalAccessConditionSet {
  applications : microsoft.graph.conditionalAccessApplications;
  clientApplications : microsoft.graph.conditionalAccessClientApplications;
  devices : microsoft.graph.conditionalAccessDevices;
  locations : microsoft.graph.conditionalAccessLocations;
  platforms : microsoft.graph.conditionalAccessPlatforms;
  users : microsoft.graph.conditionalAccessUsers;
};

type microsoft.graph.conditionalAccessDevices {
  deviceFilter : microsoft.graph.conditionalAccessFilter;
};

type microsoft.graph.conditionalAccessLocations {
  excludeLocations : many LargeString;
  includeLocations : many LargeString;
};

type microsoft.graph.conditionalAccessPlatforms {
};

type microsoft.graph.conditionalAccessUsers {
  excludeGroups : many LargeString;
  excludeRoles : many LargeString;
  excludeUsers : many LargeString;
  includeGroups : many LargeString;
  includeRoles : many LargeString;
  includeUsers : many LargeString;
};

type microsoft.graph.conditionalAccessFilter {
  rule : LargeString;
};

type microsoft.graph.conditionalAccessGrantControls {
  customAuthenticationFactors : many LargeString;
  operator : LargeString;
  termsOfUse : many LargeString;
};

type microsoft.graph.conditionalAccessSessionControls {
  applicationEnforcedRestrictions : microsoft.graph.applicationEnforcedRestrictionsSessionControl;
  cloudAppSecurity : microsoft.graph.cloudAppSecuritySessionControl;
  disableResilienceDefaults : Boolean;
  persistentBrowser : microsoft.graph.persistentBrowserSessionControl;
  signInFrequency : microsoft.graph.signInFrequencySessionControl;
};

type microsoft.graph.persistentBrowserSessionControl : microsoft.graph.conditionalAccessSessionControl {
};

type microsoft.graph.signInFrequencySessionControl : microsoft.graph.conditionalAccessSessionControl {
  value : Integer;
};

type microsoft.graph.ipRange {
};

type microsoft.graph.iPv4CidrRange : microsoft.graph.ipRange {
  cidrAddress : LargeString;
};

type microsoft.graph.iPv6CidrRange : microsoft.graph.ipRange {
  cidrAddress : LargeString;
};

type microsoft.graph.riskUserActivity {
  riskEventTypes : many LargeString;
};

type microsoft.graph.accessPackageApprovalStage {
  escalationApprovers : many microsoft.graph.subjectSet;
  fallbackEscalationApprovers : many microsoft.graph.subjectSet;
  fallbackPrimaryApprovers : many microsoft.graph.subjectSet;
  isApproverJustificationRequired : Boolean;
  isEscalationEnabled : Boolean;
  primaryApprovers : many microsoft.graph.subjectSet;
};

type microsoft.graph.subjectSet {
};

type microsoft.graph.accessPackageAssignmentApprovalSettings {
  isApprovalRequiredForAdd : Boolean;
  isApprovalRequiredForUpdate : Boolean;
  stages : many microsoft.graph.accessPackageApprovalStage;
};

type microsoft.graph.accessPackageAssignmentRequestorSettings {
  allowCustomAssignmentSchedule : Boolean;
  enableOnBehalfRequestorsToAddAccess : Boolean;
  enableOnBehalfRequestorsToRemoveAccess : Boolean;
  enableOnBehalfRequestorsToUpdateAccess : Boolean;
  enableTargetsToSelfAddAccess : Boolean;
  enableTargetsToSelfRemoveAccess : Boolean;
  enableTargetsToSelfUpdateAccess : Boolean;
  onBehalfRequestors : many microsoft.graph.subjectSet;
};

type microsoft.graph.accessPackageAssignmentRequestRequirements {
  allowCustomAssignmentSchedule : Boolean;
  isApprovalRequiredForAdd : Boolean;
  isApprovalRequiredForUpdate : Boolean;
  policyDescription : LargeString;
  policyDisplayName : LargeString;
  policyId : LargeString;
  schedule : microsoft.graph.entitlementManagementSchedule;
};

type microsoft.graph.entitlementManagementSchedule {
  expiration : microsoft.graph.expirationPattern;
  recurrence : microsoft.graph.patternedRecurrence;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  startDateTime : DateTime;
};

type microsoft.graph.accessPackageAssignmentReviewSettings {
  fallbackReviewers : many microsoft.graph.subjectSet;
  isEnabled : Boolean;
  isRecommendationEnabled : Boolean;
  isReviewerJustificationRequired : Boolean;
  isSelfReview : Boolean;
  primaryReviewers : many microsoft.graph.subjectSet;
  schedule : microsoft.graph.entitlementManagementSchedule;
};

type microsoft.graph.accessPackageAutomaticRequestSettings {
  removeAccessWhenTargetLeavesAllowedTargets : Boolean;
  requestAccessForAllowedTargets : Boolean;
};

type microsoft.graph.attributeRuleMembers : microsoft.graph.subjectSet {
  description : LargeString;
  membershipRule : LargeString;
};

type microsoft.graph.connectedOrganizationMembers : microsoft.graph.subjectSet {
  connectedOrganizationId : LargeString;
  description : LargeString;
};

type microsoft.graph.connectionInfo {
  url : LargeString;
};

type microsoft.graph.expirationPattern {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  endDateTime : DateTime;
};

type microsoft.graph.externalSponsors : microsoft.graph.subjectSet {
};

type microsoft.graph.groupMembers : microsoft.graph.subjectSet {
  description : LargeString;
  groupId : LargeString;
};

type microsoft.graph.internalSponsors : microsoft.graph.subjectSet {
};

type microsoft.graph.requestorManager : microsoft.graph.subjectSet {
  managerLevel : Integer;
};

type microsoft.graph.singleServicePrincipal : microsoft.graph.subjectSet {
  description : LargeString;
  servicePrincipalId : LargeString;
};

type microsoft.graph.singleUser : microsoft.graph.subjectSet {
  description : LargeString;
  userId : LargeString;
};

type microsoft.graph.targetApplicationOwners : microsoft.graph.subjectSet {
};

type microsoft.graph.targetManager : microsoft.graph.subjectSet {
  managerLevel : Integer;
};

type microsoft.graph.identitySource {
};

type microsoft.graph.azureActiveDirectoryTenant : microsoft.graph.identitySource {
  displayName : LargeString;
  tenantId : LargeString;
};

type microsoft.graph.domainIdentitySource : microsoft.graph.identitySource {
  displayName : LargeString;
  domainName : LargeString;
};

type microsoft.graph.externalDomainFederation : microsoft.graph.identitySource {
  displayName : LargeString;
  domainName : LargeString;
  issuerUri : LargeString;
};

type microsoft.graph.deviceAndAppManagementAssignmentTarget {
};

type microsoft.graph.allDevicesAssignmentTarget : microsoft.graph.deviceAndAppManagementAssignmentTarget {
};

type microsoft.graph.allLicensedUsersAssignmentTarget : microsoft.graph.deviceAndAppManagementAssignmentTarget {
};

type microsoft.graph.androidMinimumOperatingSystem {
  v10_0 : Boolean;
  v11_0 : Boolean;
  v4_0 : Boolean;
  v4_0_3 : Boolean;
  v4_1 : Boolean;
  v4_2 : Boolean;
  v4_3 : Boolean;
  v4_4 : Boolean;
  v5_0 : Boolean;
  v5_1 : Boolean;
};

type microsoft.graph.appConfigurationSettingItem {
  appConfigKey : LargeString;
  appConfigKeyValue : LargeString;
};

type microsoft.graph.configurationManagerCollectionAssignmentTarget : microsoft.graph.deviceAndAppManagementAssignmentTarget {
  collectionId : LargeString;
};

type microsoft.graph.groupAssignmentTarget : microsoft.graph.deviceAndAppManagementAssignmentTarget {
  groupId : LargeString;
};

type microsoft.graph.exclusionGroupAssignmentTarget : microsoft.graph.groupAssignmentTarget {
};

type microsoft.graph.fileEncryptionInfo {
  encryptionKey : LargeBinary;
  fileDigest : LargeBinary;
  fileDigestAlgorithm : LargeString;
  initializationVector : LargeBinary;
  mac : LargeBinary;
  macKey : LargeBinary;
  profileIdentifier : LargeString;
};

type microsoft.graph.iosDeviceType {
  iPad : Boolean;
  iPhoneAndIPod : Boolean;
};

type microsoft.graph.mobileAppAssignmentSettings {
};

type microsoft.graph.iosLobAppAssignmentSettings : microsoft.graph.mobileAppAssignmentSettings {
  vpnConfigurationId : LargeString;
};

type microsoft.graph.iosMinimumOperatingSystem {
  v10_0 : Boolean;
  v11_0 : Boolean;
  v12_0 : Boolean;
  v13_0 : Boolean;
  v14_0 : Boolean;
  v8_0 : Boolean;
  v9_0 : Boolean;
};

type microsoft.graph.iosStoreAppAssignmentSettings : microsoft.graph.mobileAppAssignmentSettings {
  vpnConfigurationId : LargeString;
};

type microsoft.graph.iosVppAppAssignmentSettings : microsoft.graph.mobileAppAssignmentSettings {
  useDeviceLicensing : Boolean;
  vpnConfigurationId : LargeString;
};

type microsoft.graph.microsoftStoreForBusinessAppAssignmentSettings : microsoft.graph.mobileAppAssignmentSettings {
  useDeviceContext : Boolean;
};

type microsoft.graph.mimeContent {
  type : LargeString;
  value : LargeBinary;
};

type microsoft.graph.mobileAppInstallTimeSettings {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  deadlineDateTime : DateTime;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  startDateTime : DateTime;
  useLocalTime : Boolean;
};

type microsoft.graph.vppLicensingType {
  supportsDeviceLicensing : Boolean;
  supportsUserLicensing : Boolean;
};

type microsoft.graph.win32LobAppAssignmentSettings : microsoft.graph.mobileAppAssignmentSettings {
  installTimeSettings : microsoft.graph.mobileAppInstallTimeSettings;
  restartSettings : microsoft.graph.win32LobAppRestartSettings;
};

type microsoft.graph.win32LobAppRestartSettings {
  countdownDisplayBeforeRestartInMinutes : Integer;
  gracePeriodInMinutes : Integer;
  restartNotificationSnoozeDurationInMinutes : Integer;
};

type microsoft.graph.win32LobAppRule {
};

type microsoft.graph.win32LobAppFileSystemRule : microsoft.graph.win32LobAppRule {
  check32BitOn64System : Boolean;
  comparisonValue : LargeString;
  fileOrFolderName : LargeString;
  path : LargeString;
};

type microsoft.graph.win32LobAppInstallExperience {
};

type microsoft.graph.win32LobAppMsiInformation {
  productCode : LargeString;
  productName : LargeString;
  productVersion : LargeString;
  publisher : LargeString;
  requiresReboot : Boolean;
  upgradeCode : LargeString;
};

type microsoft.graph.win32LobAppPowerShellScriptRule : microsoft.graph.win32LobAppRule {
  comparisonValue : LargeString;
  displayName : LargeString;
  enforceSignatureCheck : Boolean;
  runAs32Bit : Boolean;
  scriptContent : LargeString;
};

type microsoft.graph.win32LobAppProductCodeRule : microsoft.graph.win32LobAppRule {
  productCode : LargeString;
  productVersion : LargeString;
};

type microsoft.graph.win32LobAppRegistryRule : microsoft.graph.win32LobAppRule {
  check32BitOn64System : Boolean;
  comparisonValue : LargeString;
  keyPath : LargeString;
  valueName : LargeString;
};

type microsoft.graph.win32LobAppReturnCode {
  returnCode : Integer;
};

type microsoft.graph.windowsMinimumOperatingSystem {
  v10_0 : Boolean;
  v8_0 : Boolean;
  v8_1 : Boolean;
};

type microsoft.graph.deviceManagementSettings {
  deviceComplianceCheckinThresholdDays : Integer;
  isScheduledActionEnabled : Boolean;
  secureByDefault : Boolean;
};

type microsoft.graph.intuneBrand {
  contactITEmailAddress : LargeString;
  contactITName : LargeString;
  contactITNotes : LargeString;
  contactITPhoneNumber : LargeString;
  darkBackgroundLogo : microsoft.graph.mimeContent;
  displayName : LargeString;
  lightBackgroundLogo : microsoft.graph.mimeContent;
  onlineSupportSiteName : LargeString;
  onlineSupportSiteUrl : LargeString;
  privacyUrl : LargeString;
  showDisplayNameNextToLogo : Boolean;
  showLogo : Boolean;
  showNameNextToLogo : Boolean;
  themeColor : microsoft.graph.rgbColor;
};

type microsoft.graph.appListItem {
  appId : LargeString;
  appStoreUrl : LargeString;
  name : LargeString;
  publisher : LargeString;
};

type microsoft.graph.bitLockerRemovableDrivePolicy {
  blockCrossOrganizationWriteAccess : Boolean;
  requireEncryptionForWriteAccess : Boolean;
};

type microsoft.graph.defenderDetectedMalwareActions {
};

type microsoft.graph.deviceCompliancePolicySettingState {
  currentValue : LargeString;
  errorCode : Integer64;
  errorDescription : LargeString;
  instanceDisplayName : LargeString;
  setting : LargeString;
  settingName : LargeString;
  sources : many microsoft.graph.settingSource;
  userEmail : LargeString;
  userId : LargeString;
  userName : LargeString;
  userPrincipalName : LargeString;
};

type microsoft.graph.settingSource {
  displayName : LargeString;
  id : LargeString;
};

type microsoft.graph.deviceConfigurationSettingState {
  currentValue : LargeString;
  errorCode : Integer64;
  errorDescription : LargeString;
  instanceDisplayName : LargeString;
  setting : LargeString;
  settingName : LargeString;
  sources : many microsoft.graph.settingSource;
  userEmail : LargeString;
  userId : LargeString;
  userName : LargeString;
  userPrincipalName : LargeString;
};

type microsoft.graph.edgeSearchEngineBase {
};

type microsoft.graph.edgeSearchEngine : microsoft.graph.edgeSearchEngineBase {
};

type microsoft.graph.edgeSearchEngineCustom : microsoft.graph.edgeSearchEngineBase {
  edgeSearchEngineOpenSearchXmlUrl : LargeString;
};

type microsoft.graph.iosHomeScreenItem {
  displayName : LargeString;
};

type microsoft.graph.iosHomeScreenApp : microsoft.graph.iosHomeScreenItem {
  bundleID : LargeString;
};

type microsoft.graph.iosHomeScreenFolder : microsoft.graph.iosHomeScreenItem {
  pages : many microsoft.graph.iosHomeScreenFolderPage;
};

type microsoft.graph.iosHomeScreenFolderPage {
  apps : many microsoft.graph.iosHomeScreenApp;
  displayName : LargeString;
};

type microsoft.graph.iosHomeScreenPage {
  displayName : LargeString;
  icons : many microsoft.graph.iosHomeScreenItem;
};

type microsoft.graph.iosNetworkUsageRule {
  cellularDataBlocked : Boolean;
  cellularDataBlockWhenRoaming : Boolean;
  managedApps : many microsoft.graph.appListItem;
};

type microsoft.graph.iosNotificationSettings {
  appName : LargeString;
  badgesEnabled : Boolean;
  bundleID : LargeString;
  enabled : Boolean;
  publisher : LargeString;
  showInNotificationCenter : Boolean;
  showOnLockScreen : Boolean;
  soundsEnabled : Boolean;
};

type microsoft.graph.mediaContentRatingAustralia {
};

type microsoft.graph.mediaContentRatingCanada {
};

type microsoft.graph.mediaContentRatingFrance {
};

type microsoft.graph.mediaContentRatingGermany {
};

type microsoft.graph.mediaContentRatingIreland {
};

type microsoft.graph.mediaContentRatingJapan {
};

type microsoft.graph.mediaContentRatingNewZealand {
};

type microsoft.graph.mediaContentRatingUnitedKingdom {
};

type microsoft.graph.mediaContentRatingUnitedStates {
};

type microsoft.graph.omaSetting {
  description : LargeString;
  displayName : LargeString;
  omaUri : LargeString;
};

type microsoft.graph.omaSettingBase64 : microsoft.graph.omaSetting {
  fileName : LargeString;
  value : LargeString;
};

type microsoft.graph.omaSettingBoolean : microsoft.graph.omaSetting {
  value : Boolean;
};

type microsoft.graph.omaSettingDateTime : microsoft.graph.omaSetting {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  value : DateTime;
};

type microsoft.graph.omaSettingFloatingPoint : microsoft.graph.omaSetting {
  @odata.type : 'Edm.Single'
  value : Double;
};

type microsoft.graph.omaSettingInteger : microsoft.graph.omaSetting {
  value : Integer;
};

type microsoft.graph.omaSettingString : microsoft.graph.omaSetting {
  value : LargeString;
};

type microsoft.graph.omaSettingStringXml : microsoft.graph.omaSetting {
  fileName : LargeString;
  value : LargeBinary;
};

type microsoft.graph.report {
  @odata.type : 'Edm.Stream'
  content : LargeBinary;
};

type microsoft.graph.sharedPCAccountManagerPolicy {
  cacheAccountsAboveDiskFreePercentage : Integer;
  inactiveThresholdDays : Integer;
  removeAccountsBelowDiskFreePercentage : Integer;
};

type microsoft.graph.windows10NetworkProxyServer {
  address : LargeString;
  exceptions : many LargeString;
  useForLocalAddresses : Boolean;
};

type microsoft.graph.windowsFirewallNetworkProfile {
  authorizedApplicationRulesFromGroupPolicyMerged : Boolean;
  connectionSecurityRulesFromGroupPolicyMerged : Boolean;
  globalPortRulesFromGroupPolicyMerged : Boolean;
  inboundConnectionsBlocked : Boolean;
  inboundNotificationsBlocked : Boolean;
  incomingTrafficBlocked : Boolean;
  outboundConnectionsBlocked : Boolean;
  policyRulesFromGroupPolicyMerged : Boolean;
  securedPacketExemptionAllowed : Boolean;
  stealthModeBlocked : Boolean;
  unicastResponsesToMulticastBroadcastsBlocked : Boolean;
};

type microsoft.graph.windowsUpdateInstallScheduleType {
};

type microsoft.graph.windowsUpdateActiveHoursInstall : microsoft.graph.windowsUpdateInstallScheduleType {
  activeHoursEnd : Time;
  activeHoursStart : Time;
};

type microsoft.graph.windowsUpdateScheduledInstall : microsoft.graph.windowsUpdateInstallScheduleType {
  scheduledInstallTime : Time;
};

type microsoft.graph.configurationManagerClientEnabledFeatures {
  compliancePolicy : Boolean;
  deviceConfiguration : Boolean;
  inventory : Boolean;
  modernApps : Boolean;
  resourceAccess : Boolean;
  windowsUpdateForBusiness : Boolean;
};

type microsoft.graph.deviceActionResult {
  actionName : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastUpdatedDateTime : DateTime;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  startDateTime : DateTime;
};

type microsoft.graph.deviceHealthAttestationState {
  attestationIdentityKey : LargeString;
  bitLockerStatus : LargeString;
  bootAppSecurityVersion : LargeString;
  bootDebugging : LargeString;
  bootManagerSecurityVersion : LargeString;
  bootManagerVersion : LargeString;
  bootRevisionListInfo : LargeString;
  codeIntegrity : LargeString;
  codeIntegrityCheckVersion : LargeString;
  codeIntegrityPolicy : LargeString;
  contentNamespaceUrl : LargeString;
  contentVersion : LargeString;
  dataExcutionPolicy : LargeString;
  deviceHealthAttestationStatus : LargeString;
  earlyLaunchAntiMalwareDriverProtection : LargeString;
  healthAttestationSupportedStatus : LargeString;
  healthStatusMismatchInfo : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  issuedDateTime : DateTime;
  lastUpdateDateTime : LargeString;
  operatingSystemKernelDebugging : LargeString;
  operatingSystemRevListInfo : LargeString;
  pcr0 : LargeString;
  pcrHashAlgorithm : LargeString;
  resetCount : Integer64;
  restartCount : Integer64;
  safeMode : LargeString;
  secureBoot : LargeString;
  secureBootConfigurationPolicyFingerPrint : LargeString;
  testSigning : LargeString;
  tpmVersion : LargeString;
  virtualSecureMode : LargeString;
  windowsPE : LargeString;
};

type microsoft.graph.complianceManagementPartnerAssignment {
  target : microsoft.graph.deviceAndAppManagementAssignmentTarget;
};

type microsoft.graph.deviceEnrollmentPlatformRestriction {
  osMaximumVersion : LargeString;
  osMinimumVersion : LargeString;
  personalDeviceEnrollmentBlocked : Boolean;
  platformBlocked : Boolean;
};

type microsoft.graph.rgbColor {
  b : Integer;
  g : Integer;
  r : Integer;
};

type microsoft.graph.deleteUserFromSharedAppleDeviceActionResult : microsoft.graph.deviceActionResult {
  userPrincipalName : LargeString;
};

type microsoft.graph.deviceExchangeAccessStateSummary {
  allowedDeviceCount : Integer;
  blockedDeviceCount : Integer;
  quarantinedDeviceCount : Integer;
  unavailableDeviceCount : Integer;
  unknownDeviceCount : Integer;
};

type microsoft.graph.deviceGeoLocation {
  altitude : Double;
  heading : Double;
  horizontalAccuracy : Double;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastCollectedDateTime : DateTime;
  latitude : Double;
  longitude : Double;
  speed : Double;
  verticalAccuracy : Double;
};

type microsoft.graph.deviceOperatingSystemSummary {
  androidCount : Integer;
  iosCount : Integer;
  macOSCount : Integer;
  unknownCount : Integer;
  windowsCount : Integer;
  windowsMobileCount : Integer;
};

type microsoft.graph.locateDeviceActionResult : microsoft.graph.deviceActionResult {
  deviceLocation : microsoft.graph.deviceGeoLocation;
};

type microsoft.graph.remoteLockActionResult : microsoft.graph.deviceActionResult {
  unlockPin : LargeString;
};

type microsoft.graph.resetPasscodeActionResult : microsoft.graph.deviceActionResult {
  passcode : LargeString;
};

type microsoft.graph.updateWindowsDeviceAccountActionParameter {
  calendarSyncEnabled : Boolean;
  deviceAccount : microsoft.graph.windowsDeviceAccount;
  deviceAccountEmail : LargeString;
  exchangeServer : LargeString;
  passwordRotationEnabled : Boolean;
  sessionInitiationProtocalAddress : LargeString;
};

type microsoft.graph.windowsDeviceAccount {
  password : LargeString;
};

type microsoft.graph.windowsDefenderScanActionResult : microsoft.graph.deviceActionResult {
  scanType : LargeString;
};

type microsoft.graph.windowsDeviceADAccount : microsoft.graph.windowsDeviceAccount {
  domainName : LargeString;
  userName : LargeString;
};

type microsoft.graph.windowsDeviceAzureADAccount : microsoft.graph.windowsDeviceAccount {
  userPrincipalName : LargeString;
};

type microsoft.graph.importedWindowsAutopilotDeviceIdentityState {
  deviceErrorCode : Integer;
  deviceErrorName : LargeString;
  deviceRegistrationId : LargeString;
};

type microsoft.graph.mobileAppIdentifier {
};

type microsoft.graph.androidMobileAppIdentifier : microsoft.graph.mobileAppIdentifier {
  packageId : LargeString;
};

type microsoft.graph.iosMobileAppIdentifier : microsoft.graph.mobileAppIdentifier {
  bundleId : LargeString;
};

type microsoft.graph.iPv4Range : microsoft.graph.ipRange {
  lowerAddress : LargeString;
  upperAddress : LargeString;
};

type microsoft.graph.iPv6Range : microsoft.graph.ipRange {
  lowerAddress : LargeString;
  upperAddress : LargeString;
};

type microsoft.graph.managedAppDiagnosticStatus {
  mitigationInstruction : LargeString;
  state : LargeString;
  validationName : LargeString;
};

type microsoft.graph.managedAppPolicyDeploymentSummaryPerApp {
  configurationAppliedUserCount : Integer;
  mobileAppIdentifier : microsoft.graph.mobileAppIdentifier;
};

type microsoft.graph.proxiedDomain {
  ipAddressOrFQDN : LargeString;
  proxy : LargeString;
};

type microsoft.graph.windowsInformationProtectionApp {
  denied : Boolean;
  description : LargeString;
  displayName : LargeString;
  productName : LargeString;
  publisherName : LargeString;
};

type microsoft.graph.windowsInformationProtectionDataRecoveryCertificate {
  certificate : LargeBinary;
  description : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  expirationDateTime : DateTime;
  subjectName : LargeString;
};

type microsoft.graph.windowsInformationProtectionDesktopApp : microsoft.graph.windowsInformationProtectionApp {
  binaryName : LargeString;
  binaryVersionHigh : LargeString;
  binaryVersionLow : LargeString;
};

type microsoft.graph.windowsInformationProtectionIPRangeCollection {
  displayName : LargeString;
  ranges : many microsoft.graph.ipRange;
};

type microsoft.graph.windowsInformationProtectionProxiedDomainCollection {
  displayName : LargeString;
  proxiedDomains : many microsoft.graph.proxiedDomain;
};

type microsoft.graph.windowsInformationProtectionResourceCollection {
  displayName : LargeString;
  resources : many LargeString;
};

type microsoft.graph.windowsInformationProtectionStoreApp : microsoft.graph.windowsInformationProtectionApp {
};

type microsoft.graph.resourceAction {
  allowedResourceActions : many LargeString;
  notAllowedResourceActions : many LargeString;
};

type microsoft.graph.rolePermission {
  resourceActions : many microsoft.graph.resourceAction;
};

type microsoft.graph.serviceHealthIssuePost {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  description : microsoft.graph.itemBody;
};

type microsoft.graph.serviceUpdateMessageViewpoint {
  isArchived : Boolean;
  isFavorited : Boolean;
  isRead : Boolean;
};

type microsoft.graph.aggregationOption {
  bucketDefinition : microsoft.graph.bucketAggregationDefinition;
  field : LargeString;
  size : Integer;
};

type microsoft.graph.bucketAggregationDefinition {
  isDescending : Boolean;
  minimumCount : Integer;
  prefixFilter : LargeString;
  ranges : many microsoft.graph.bucketAggregationRange;
};

type microsoft.graph.alterationResponse {
  originalQueryString : LargeString;
  queryAlteration : microsoft.graph.searchAlteration;
};

type microsoft.graph.searchAlteration {
  alteredHighlightedQueryString : LargeString;
  alteredQueryString : LargeString;
  alteredQueryTokens : many microsoft.graph.alteredQueryToken;
};

type microsoft.graph.alteredQueryToken {
  length : Integer;
  offset : Integer;
  suggestion : LargeString;
};

type microsoft.graph.bucketAggregationRange {
  ![from] : LargeString;
  to : LargeString;
};

type microsoft.graph.resultTemplate {
  body : microsoft.graph.Json;
  displayName : LargeString;
};

type microsoft.graph.Dictionary {
};

type microsoft.graph.resultTemplateDictionary : microsoft.graph.Dictionary {
};

type microsoft.graph.resultTemplateOption {
  enableResultTemplate : Boolean;
};

type microsoft.graph.searchAggregation {
  buckets : many microsoft.graph.searchBucket;
  field : LargeString;
};

type microsoft.graph.searchBucket {
  aggregationFilterToken : LargeString;
  count : Integer;
  ![key] : LargeString;
};

type microsoft.graph.searchAlterationOptions {
  enableModification : Boolean;
  enableSuggestion : Boolean;
};

type microsoft.graph.searchHit {
  contentSource : LargeString;
  hitId : LargeString;
  rank : Integer;
  resultTemplateId : LargeString;
  summary : LargeString;
};

type microsoft.graph.searchHitsContainer {
  aggregations : many microsoft.graph.searchAggregation;
  hits : many microsoft.graph.searchHit;
  moreResultsAvailable : Boolean;
  total : Integer;
};

type microsoft.graph.searchQuery {
  queryString : LargeString;
};

type microsoft.graph.searchRequest {
  aggregationFilters : many LargeString;
  aggregations : many microsoft.graph.aggregationOption;
  contentSources : many LargeString;
  enableTopResults : Boolean;
  fields : many LargeString;
  ![from] : Integer;
  query : microsoft.graph.searchQuery;
  queryAlterationOptions : microsoft.graph.searchAlterationOptions;
  resultTemplateOptions : microsoft.graph.resultTemplateOption;
  size : Integer;
  sortProperties : many microsoft.graph.sortProperty;
};

type microsoft.graph.sortProperty {
  isDescending : Boolean;
  name : LargeString;
};

type microsoft.graph.searchResponse {
  hitsContainers : many microsoft.graph.searchHitsContainer;
  queryAlterationResponse : microsoft.graph.alterationResponse;
  resultTemplates : microsoft.graph.resultTemplateDictionary;
  searchTerms : many LargeString;
};

type microsoft.graph.plannerAppliedCategories {
};

type microsoft.graph.plannerAssignment {
  assignedBy : microsoft.graph.identitySet;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  assignedDateTime : DateTime;
  orderHint : LargeString;
};

type microsoft.graph.plannerAssignments {
};

type microsoft.graph.plannerCategoryDescriptions {
  category1 : LargeString;
  category10 : LargeString;
  category11 : LargeString;
  category12 : LargeString;
  category13 : LargeString;
  category14 : LargeString;
  category15 : LargeString;
  category16 : LargeString;
  category17 : LargeString;
  category18 : LargeString;
  category19 : LargeString;
  category2 : LargeString;
  category20 : LargeString;
  category21 : LargeString;
  category22 : LargeString;
  category23 : LargeString;
  category24 : LargeString;
  category25 : LargeString;
  category3 : LargeString;
  category4 : LargeString;
  category5 : LargeString;
  category6 : LargeString;
  category7 : LargeString;
  category8 : LargeString;
  category9 : LargeString;
};

type microsoft.graph.plannerChecklistItem {
  isChecked : Boolean;
  lastModifiedBy : microsoft.graph.identitySet;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastModifiedDateTime : DateTime;
  orderHint : LargeString;
  title : LargeString;
};

type microsoft.graph.plannerChecklistItems {
};

type microsoft.graph.plannerExternalReference {
  alias : LargeString;
  lastModifiedBy : microsoft.graph.identitySet;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastModifiedDateTime : DateTime;
  previewPriority : LargeString;
  type : LargeString;
};

type microsoft.graph.plannerExternalReferences {
};

type microsoft.graph.plannerOrderHintsByAssignee {
};

type microsoft.graph.plannerPlanContainer {
  containerId : LargeString;
  url : LargeString;
};

type microsoft.graph.plannerUserIds {
};

type microsoft.graph.insightIdentity {
  address : LargeString;
  displayName : LargeString;
  id : LargeString;
};

type microsoft.graph.resourceReference {
  id : LargeString;
  type : LargeString;
  webUrl : LargeString;
};

type microsoft.graph.resourceVisualization {
  containerDisplayName : LargeString;
  containerType : LargeString;
  containerWebUrl : LargeString;
  mediaType : LargeString;
  previewImageUrl : LargeString;
  previewText : LargeString;
  title : LargeString;
  type : LargeString;
};

type microsoft.graph.sharingDetail {
  sharedBy : microsoft.graph.insightIdentity;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  sharedDateTime : DateTime;
  sharingReference : microsoft.graph.resourceReference;
  sharingSubject : LargeString;
  sharingType : LargeString;
};

type microsoft.graph.usageDetails {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastAccessedDateTime : DateTime;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastModifiedDateTime : DateTime;
};

type microsoft.graph.CopyNotebookModel {
  createdBy : LargeString;
  createdByIdentity : microsoft.graph.identitySet;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdTime : DateTime;
  id : LargeString;
  isDefault : Boolean;
  isShared : Boolean;
  lastModifiedBy : LargeString;
  lastModifiedByIdentity : microsoft.graph.identitySet;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastModifiedTime : DateTime;
  links : microsoft.graph.notebookLinks;
  name : LargeString;
  sectionGroupsUrl : LargeString;
  sectionsUrl : LargeString;
  self : LargeString;
};

type microsoft.graph.notebookLinks {
  oneNoteClientUrl : microsoft.graph.externalLink;
  oneNoteWebUrl : microsoft.graph.externalLink;
};

type microsoft.graph.diagnostic {
  message : LargeString;
  url : LargeString;
};

type microsoft.graph.externalLink {
  href : LargeString;
};

type microsoft.graph.onenoteOperationError {
  code : LargeString;
  message : LargeString;
};

type microsoft.graph.onenotePagePreview {
  links : microsoft.graph.onenotePagePreviewLinks;
  previewText : LargeString;
};

type microsoft.graph.onenotePagePreviewLinks {
  previewImageUrl : microsoft.graph.externalLink;
};

type microsoft.graph.onenotePatchContentCommand {
  content : LargeString;
  target : LargeString;
};

type microsoft.graph.pageLinks {
  oneNoteClientUrl : microsoft.graph.externalLink;
  oneNoteWebUrl : microsoft.graph.externalLink;
};

type microsoft.graph.recentNotebook {
  displayName : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastAccessedTime : DateTime;
  links : microsoft.graph.recentNotebookLinks;
};

type microsoft.graph.recentNotebookLinks {
  oneNoteClientUrl : microsoft.graph.externalLink;
  oneNoteWebUrl : microsoft.graph.externalLink;
};

type microsoft.graph.sectionLinks {
  oneNoteClientUrl : microsoft.graph.externalLink;
  oneNoteWebUrl : microsoft.graph.externalLink;
};

type microsoft.graph.approvalSettings {
  approvalMode : LargeString;
  approvalStages : many microsoft.graph.unifiedApprovalStage;
  isApprovalRequired : Boolean;
  isApprovalRequiredForExtension : Boolean;
  isRequestorJustificationRequired : Boolean;
};

type microsoft.graph.unifiedApprovalStage {
  approvalStageTimeOutInDays : Integer;
  escalationApprovers : many microsoft.graph.subjectSet;
  escalationTimeInMinutes : Integer;
  isApproverJustificationRequired : Boolean;
  isEscalationEnabled : Boolean;
  primaryApprovers : many microsoft.graph.subjectSet;
};

type microsoft.graph.requestSchedule {
  expiration : microsoft.graph.expirationPattern;
  recurrence : microsoft.graph.patternedRecurrence;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  startDateTime : DateTime;
};

type microsoft.graph.ticketInfo {
  ticketNumber : LargeString;
  ticketSystem : LargeString;
};

type microsoft.graph.unifiedRoleManagementPolicyRuleTarget {
  caller : LargeString;
  enforcedSettings : many LargeString;
  inheritableSettings : many LargeString;
  level : LargeString;
};

type microsoft.graph.archivedPrintJob {
  acquiredByPrinter : Boolean;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  acquiredDateTime : DateTime;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  completionDateTime : DateTime;
  copiesPrinted : Integer;
  createdBy : microsoft.graph.userIdentity;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  id : LargeString;
  printerId : LargeString;
};

type microsoft.graph.integerRange {
  end : Integer64;
  start : Integer64;
};

type microsoft.graph.printCertificateSigningRequest {
  content : LargeString;
  transportKey : LargeString;
};

type microsoft.graph.printDocumentUploadProperties {
  contentType : LargeString;
  documentName : LargeString;
  size : Integer64;
};

type microsoft.graph.printerCapabilities {
  bottomMargins : many Integer;
  collation : Boolean;
  contentTypes : many LargeString;
  copiesPerJob : microsoft.graph.integerRange;
  dpis : many Integer;
  inputBins : many LargeString;
  isColorPrintingSupported : Boolean;
  isPageRangeSupported : Boolean;
  leftMargins : many Integer;
  mediaColors : many LargeString;
  mediaSizes : many LargeString;
  mediaTypes : many LargeString;
  outputBins : many LargeString;
  pagesPerSheet : many Integer;
  rightMargins : many Integer;
  supportsFitPdfToPage : Boolean;
  topMargins : many Integer;
};

type microsoft.graph.printerDefaults {
  contentType : LargeString;
  copiesPerJob : Integer;
  dpi : Integer;
  fitPdfToPage : Boolean;
  inputBin : LargeString;
  mediaColor : LargeString;
  mediaSize : LargeString;
  mediaType : LargeString;
  outputBin : LargeString;
  pagesPerSheet : Integer;
};

type microsoft.graph.printerLocation {
  altitudeInMeters : Integer;
  building : LargeString;
  city : LargeString;
  countryOrRegion : LargeString;
  floor : LargeString;
  floorDescription : LargeString;
  latitude : Double;
  longitude : Double;
  organization : many LargeString;
  postalCode : LargeString;
  roomDescription : LargeString;
  roomName : LargeString;
  site : LargeString;
  stateOrProvince : LargeString;
  streetAddress : LargeString;
  subdivision : many LargeString;
  subunit : many LargeString;
};

type microsoft.graph.printerStatus {
  description : LargeString;
};

type microsoft.graph.printJobConfiguration {
  collate : Boolean;
  copies : Integer;
  dpi : Integer;
  fitPdfToPage : Boolean;
  inputBin : LargeString;
  margin : microsoft.graph.printMargin;
  mediaSize : LargeString;
  mediaType : LargeString;
  outputBin : LargeString;
  pageRanges : many microsoft.graph.integerRange;
  pagesPerSheet : Integer;
};

type microsoft.graph.printMargin {
  bottom : Integer;
  left : Integer;
  right : Integer;
  top : Integer;
};

type microsoft.graph.printJobStatus {
  description : LargeString;
  isAcquiredByPrinter : Boolean;
};

type microsoft.graph.printOperationStatus {
  description : LargeString;
};

type microsoft.graph.printSettings {
  documentConversionEnabled : Boolean;
};

type microsoft.graph.printTaskStatus {
  description : LargeString;
};

type microsoft.graph.imageInfo {
  addImageQuery : Boolean;
  alternateText : LargeString;
  alternativeText : LargeString;
  iconUrl : LargeString;
};

type microsoft.graph.visualInfo {
  attribution : microsoft.graph.imageInfo;
  backgroundColor : LargeString;
  content : microsoft.graph.Json;
  description : LargeString;
  displayText : LargeString;
};

type microsoft.graph.alertDetection {
  detectionType : LargeString;
  method : LargeString;
  name : LargeString;
};

type microsoft.graph.alertHistoryState {
  appId : LargeString;
  assignedTo : LargeString;
  comments : many LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  updatedDateTime : DateTime;
  user : LargeString;
};

type microsoft.graph.alertTrigger {
  name : LargeString;
  type : LargeString;
  value : LargeString;
};

type microsoft.graph.averageComparativeScore {
  averageScore : Double;
  basis : LargeString;
};

type microsoft.graph.certificationControl {
  name : LargeString;
  url : LargeString;
};

type microsoft.graph.cloudAppSecurityState {
  destinationServiceIp : LargeString;
  destinationServiceName : LargeString;
  riskScore : LargeString;
};

type microsoft.graph.complianceInformation {
  certificationControls : many microsoft.graph.certificationControl;
  certificationName : LargeString;
};

type microsoft.graph.controlScore {
  controlCategory : LargeString;
  controlName : LargeString;
  description : LargeString;
  score : Double;
};

type microsoft.graph.fileHash {
  hashValue : LargeString;
};

type microsoft.graph.fileSecurityState {
  fileHash : microsoft.graph.fileHash;
  name : LargeString;
  path : LargeString;
  riskScore : LargeString;
};

type microsoft.graph.hostSecurityState {
  fqdn : LargeString;
  isAzureAdJoined : Boolean;
  isAzureAdRegistered : Boolean;
  isHybridAzureDomainJoined : Boolean;
  netBiosName : LargeString;
  os : LargeString;
  privateIpAddress : LargeString;
  publicIpAddress : LargeString;
  riskScore : LargeString;
};

type microsoft.graph.investigationSecurityState {
  name : LargeString;
  status : LargeString;
};

type microsoft.graph.malwareState {
  category : LargeString;
  family : LargeString;
  name : LargeString;
  severity : LargeString;
  wasRunning : Boolean;
};

type microsoft.graph.messageSecurityState {
  connectingIP : LargeString;
  deliveryAction : LargeString;
  deliveryLocation : LargeString;
  directionality : LargeString;
  internetMessageId : LargeString;
  messageFingerprint : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  messageReceivedDateTime : DateTime;
  messageSubject : LargeString;
  networkMessageId : LargeString;
};

type microsoft.graph.networkConnection {
  applicationName : LargeString;
  destinationAddress : LargeString;
  destinationDomain : LargeString;
  destinationLocation : LargeString;
  destinationPort : LargeString;
  destinationUrl : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  domainRegisteredDateTime : DateTime;
  localDnsName : LargeString;
  natDestinationAddress : LargeString;
  natDestinationPort : LargeString;
  natSourceAddress : LargeString;
  natSourcePort : LargeString;
  riskScore : LargeString;
  sourceAddress : LargeString;
  sourceLocation : LargeString;
  sourcePort : LargeString;
  urlParameters : LargeString;
};

type microsoft.graph.process {
  accountName : LargeString;
  commandLine : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  fileHash : microsoft.graph.fileHash;
  isElevated : Boolean;
  name : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  parentProcessCreatedDateTime : DateTime;
  parentProcessId : Integer;
  parentProcessName : LargeString;
  path : LargeString;
  processId : Integer;
};

type microsoft.graph.registryKeyState {
  ![key] : LargeString;
  oldKey : LargeString;
  oldValueData : LargeString;
  oldValueName : LargeString;
  processId : Integer;
  valueData : LargeString;
  valueName : LargeString;
};

type microsoft.graph.secureScoreControlStateUpdate {
  assignedTo : LargeString;
  comment : LargeString;
  state : LargeString;
  updatedBy : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  updatedDateTime : DateTime;
};

type microsoft.graph.securityResource {
  resource : LargeString;
};

type microsoft.graph.securityVendorInformation {
  provider : LargeString;
  providerVersion : LargeString;
  subProvider : LargeString;
  vendor : LargeString;
};

type microsoft.graph.uriClickSecurityState {
  clickAction : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  clickDateTime : DateTime;
  id : LargeString;
  sourceId : LargeString;
  uriDomain : LargeString;
  verdict : LargeString;
};

type microsoft.graph.userSecurityState {
  aadUserId : LargeString;
  accountName : LargeString;
  domainName : LargeString;
  isVpn : Boolean;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  logonDateTime : DateTime;
  logonId : LargeString;
  logonIp : LargeString;
  logonLocation : LargeString;
  onPremisesSecurityIdentifier : LargeString;
  riskScore : LargeString;
  userPrincipalName : LargeString;
};

type microsoft.graph.vulnerabilityState {
  cve : LargeString;
  severity : LargeString;
  wasRunning : Boolean;
};

type microsoft.graph.participantJoiningResponse {
};

type microsoft.graph.acceptJoinResponse : microsoft.graph.participantJoiningResponse {
};

type microsoft.graph.mediaConfig {
};

type microsoft.graph.appHostedMediaConfig : microsoft.graph.mediaConfig {
  blob : LargeString;
};

type microsoft.graph.attendanceInterval {
  durationInSeconds : Integer;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  joinDateTime : DateTime;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  leaveDateTime : DateTime;
};

type microsoft.graph.audioConferencing {
  conferenceId : LargeString;
  dialinUrl : LargeString;
  tollFreeNumber : LargeString;
  tollFreeNumbers : many LargeString;
  tollNumber : LargeString;
  tollNumbers : many LargeString;
};

type microsoft.graph.broadcastMeetingSettings {
  isAttendeeReportEnabled : Boolean;
  isQuestionAndAnswerEnabled : Boolean;
  isRecordingEnabled : Boolean;
  isVideoOnDemandEnabled : Boolean;
};

type microsoft.graph.callMediaState {
};

type microsoft.graph.callOptions {
  hideBotAfterEscalation : Boolean;
};

type microsoft.graph.callRoute {
  final : microsoft.graph.identitySet;
  original : microsoft.graph.identitySet;
};

type microsoft.graph.callTranscriptionInfo {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  lastModifiedDateTime : DateTime;
};

type microsoft.graph.chatInfo {
  messageId : LargeString;
  replyChainMessageId : LargeString;
  threadId : LargeString;
};

type microsoft.graph.commsNotification {
  resourceUrl : LargeString;
};

type microsoft.graph.commsNotifications {
  value : many microsoft.graph.commsNotification;
};

type microsoft.graph.incomingCallOptions : microsoft.graph.callOptions {
};

type microsoft.graph.incomingContext {
  observedParticipantId : LargeString;
  onBehalfOf : microsoft.graph.identitySet;
  sourceParticipantId : LargeString;
  transferor : microsoft.graph.identitySet;
};

type microsoft.graph.invitationParticipantInfo {
  hidden : Boolean;
  identity : microsoft.graph.identitySet;
  participantId : LargeString;
  removeFromDefaultAudioRoutingGroup : Boolean;
  replacesCallId : LargeString;
};

type microsoft.graph.inviteNewBotResponse : microsoft.graph.participantJoiningResponse {
  inviteUri : LargeString;
};

type microsoft.graph.lobbyBypassSettings {
  isDialInBypassEnabled : Boolean;
};

type microsoft.graph.mediaInfo {
  resourceId : LargeString;
  uri : LargeString;
};

type microsoft.graph.prompt {
};

type microsoft.graph.mediaPrompt : microsoft.graph.prompt {
  mediaInfo : microsoft.graph.mediaInfo;
};

type microsoft.graph.mediaStream {
  label : LargeString;
  serverMuted : Boolean;
  sourceId : LargeString;
};

type microsoft.graph.meetingInfo {
};

type microsoft.graph.meetingParticipantInfo {
  identity : microsoft.graph.identitySet;
  upn : LargeString;
};

type microsoft.graph.meetingParticipants {
  attendees : many microsoft.graph.meetingParticipantInfo;
  organizer : microsoft.graph.meetingParticipantInfo;
};

type microsoft.graph.organizerMeetingInfo : microsoft.graph.meetingInfo {
  organizer : microsoft.graph.identitySet;
};

type microsoft.graph.outgoingCallOptions : microsoft.graph.callOptions {
};

type microsoft.graph.participantInfo {
  countryCode : LargeString;
  identity : microsoft.graph.identitySet;
  languageId : LargeString;
  participantId : LargeString;
  region : LargeString;
};

type microsoft.graph.recordingInfo {
  initiator : microsoft.graph.identitySet;
};

type microsoft.graph.rejectJoinResponse : microsoft.graph.participantJoiningResponse {
};

type microsoft.graph.serviceHostedMediaConfig : microsoft.graph.mediaConfig {
  preFetchMedia : many microsoft.graph.mediaInfo;
};

type microsoft.graph.teleconferenceDeviceMediaQuality {
  averageInboundPacketLossRateInPercentage : Double;
  averageOutboundPacketLossRateInPercentage : Double;
  channelIndex : Integer;
  inboundPackets : Integer64;
  localIPAddress : LargeString;
  localPort : Integer;
  maximumInboundPacketLossRateInPercentage : Double;
  maximumOutboundPacketLossRateInPercentage : Double;
  networkLinkSpeedInBytes : Integer64;
  outboundPackets : Integer64;
  remoteIPAddress : LargeString;
  remotePort : Integer;
};

type microsoft.graph.teleconferenceDeviceAudioQuality : microsoft.graph.teleconferenceDeviceMediaQuality {
};

type microsoft.graph.teleconferenceDeviceQuality {
  callChainId : UUID;
  cloudServiceDeploymentEnvironment : LargeString;
  cloudServiceDeploymentId : LargeString;
  cloudServiceInstanceName : LargeString;
  cloudServiceName : LargeString;
  deviceDescription : LargeString;
  deviceName : LargeString;
  mediaLegId : UUID;
  mediaQualityList : many microsoft.graph.teleconferenceDeviceMediaQuality;
  participantId : UUID;
};

type microsoft.graph.teleconferenceDeviceVideoQuality : microsoft.graph.teleconferenceDeviceMediaQuality {
  averageInboundBitRate : Double;
  averageInboundFrameRate : Double;
  averageOutboundBitRate : Double;
  averageOutboundFrameRate : Double;
};

type microsoft.graph.teleconferenceDeviceScreenSharingQuality : microsoft.graph.teleconferenceDeviceVideoQuality {
};

type microsoft.graph.tokenMeetingInfo : microsoft.graph.meetingInfo {
  token : LargeString;
};

type microsoft.graph.toneInfo {
  sequenceId : Integer64;
};

type microsoft.graph.passwordResetResponse {
  newPassword : LargeString;
};

type microsoft.graph.changeNotification {
  clientState : LargeString;
  encryptedContent : microsoft.graph.changeNotificationEncryptedContent;
  id : LargeString;
  resource : LargeString;
  resourceData : microsoft.graph.resourceData;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  subscriptionExpirationDateTime : DateTime;
  subscriptionId : UUID;
  tenantId : UUID;
};

type microsoft.graph.changeNotificationEncryptedContent {
  data : LargeString;
  dataKey : LargeString;
  dataSignature : LargeString;
  encryptionCertificateId : LargeString;
  encryptionCertificateThumbprint : LargeString;
};

type microsoft.graph.resourceData {
};

type microsoft.graph.changeNotificationCollection {
  validationTokens : many LargeString;
  value : many microsoft.graph.changeNotification;
};

type microsoft.graph.actionResultPart {
  error : microsoft.graph.publicError;
};

type microsoft.graph.aadUserConversationMemberResult : microsoft.graph.actionResultPart {
  userId : LargeString;
};

type microsoft.graph.teamworkNotificationRecipient {
};

type microsoft.graph.aadUserNotificationRecipient : microsoft.graph.teamworkNotificationRecipient {
  userId : LargeString;
};

type microsoft.graph.eventMessageDetail {
};

type microsoft.graph.callEndedEventMessageDetail : microsoft.graph.eventMessageDetail {
  callId : LargeString;
  callParticipants : many microsoft.graph.callParticipantInfo;
  initiator : microsoft.graph.identitySet;
};

type microsoft.graph.callParticipantInfo {
  participant : microsoft.graph.identitySet;
};

type microsoft.graph.callRecordingEventMessageDetail : microsoft.graph.eventMessageDetail {
  callId : LargeString;
  callRecordingDisplayName : LargeString;
  callRecordingUrl : LargeString;
  initiator : microsoft.graph.identitySet;
  meetingOrganizer : microsoft.graph.identitySet;
};

type microsoft.graph.callStartedEventMessageDetail : microsoft.graph.eventMessageDetail {
  callId : LargeString;
  initiator : microsoft.graph.identitySet;
};

type microsoft.graph.callTranscriptEventMessageDetail : microsoft.graph.eventMessageDetail {
  callId : LargeString;
  callTranscriptICalUid : LargeString;
  meetingOrganizer : microsoft.graph.identitySet;
};

type microsoft.graph.channelAddedEventMessageDetail : microsoft.graph.eventMessageDetail {
  channelDisplayName : LargeString;
  channelId : LargeString;
  initiator : microsoft.graph.identitySet;
};

type microsoft.graph.channelDeletedEventMessageDetail : microsoft.graph.eventMessageDetail {
  channelDisplayName : LargeString;
  channelId : LargeString;
  initiator : microsoft.graph.identitySet;
};

type microsoft.graph.channelDescriptionUpdatedEventMessageDetail : microsoft.graph.eventMessageDetail {
  channelDescription : LargeString;
  channelId : LargeString;
  initiator : microsoft.graph.identitySet;
};

type microsoft.graph.channelIdentity {
  channelId : LargeString;
  teamId : LargeString;
};

type microsoft.graph.channelRenamedEventMessageDetail : microsoft.graph.eventMessageDetail {
  channelDisplayName : LargeString;
  channelId : LargeString;
  initiator : microsoft.graph.identitySet;
};

type microsoft.graph.channelSetAsFavoriteByDefaultEventMessageDetail : microsoft.graph.eventMessageDetail {
  channelId : LargeString;
  initiator : microsoft.graph.identitySet;
};

type microsoft.graph.channelUnsetAsFavoriteByDefaultEventMessageDetail : microsoft.graph.eventMessageDetail {
  channelId : LargeString;
  initiator : microsoft.graph.identitySet;
};

type microsoft.graph.chatMessageAttachment {
  content : LargeString;
  contentType : LargeString;
  contentUrl : LargeString;
  id : LargeString;
  name : LargeString;
  thumbnailUrl : LargeString;
};

type microsoft.graph.chatMessageFromIdentitySet : microsoft.graph.identitySet {
};

type microsoft.graph.chatMessageMention {
  id : Integer;
  mentioned : microsoft.graph.chatMessageMentionedIdentitySet;
  mentionText : LargeString;
};

type microsoft.graph.chatMessageMentionedIdentitySet : microsoft.graph.identitySet {
  conversation : microsoft.graph.teamworkConversationIdentity;
};

type microsoft.graph.teamworkConversationIdentity : microsoft.graph.identity {
};

type microsoft.graph.chatMessagePolicyViolation {
  justificationText : LargeString;
  policyTip : microsoft.graph.chatMessagePolicyViolationPolicyTip;
};

type microsoft.graph.chatMessagePolicyViolationPolicyTip {
  complianceUrl : LargeString;
  generalText : LargeString;
  matchedConditionDescriptions : many LargeString;
};

type microsoft.graph.chatMessageReaction {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  createdDateTime : DateTime;
  reactionType : LargeString;
  user : microsoft.graph.chatMessageReactionIdentitySet;
};

type microsoft.graph.chatMessageReactionIdentitySet : microsoft.graph.identitySet {
};

type microsoft.graph.chatRenamedEventMessageDetail : microsoft.graph.eventMessageDetail {
  chatDisplayName : LargeString;
  chatId : LargeString;
  initiator : microsoft.graph.identitySet;
};

type microsoft.graph.conversationMemberRoleUpdatedEventMessageDetail : microsoft.graph.eventMessageDetail {
  conversationMemberRoles : many LargeString;
  conversationMemberUser : microsoft.graph.teamworkUserIdentity;
  initiator : microsoft.graph.identitySet;
};

type microsoft.graph.teamworkUserIdentity : microsoft.graph.identity {
};

type microsoft.graph.meetingPolicyUpdatedEventMessageDetail : microsoft.graph.eventMessageDetail {
  initiator : microsoft.graph.identitySet;
  meetingChatEnabled : Boolean;
  meetingChatId : LargeString;
};

type microsoft.graph.membersAddedEventMessageDetail : microsoft.graph.eventMessageDetail {
  initiator : microsoft.graph.identitySet;
  members : many microsoft.graph.teamworkUserIdentity;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  visibleHistoryStartDateTime : DateTime;
};

type microsoft.graph.membersDeletedEventMessageDetail : microsoft.graph.eventMessageDetail {
  initiator : microsoft.graph.identitySet;
  members : many microsoft.graph.teamworkUserIdentity;
};

type microsoft.graph.membersJoinedEventMessageDetail : microsoft.graph.eventMessageDetail {
  initiator : microsoft.graph.identitySet;
  members : many microsoft.graph.teamworkUserIdentity;
};

type microsoft.graph.membersLeftEventMessageDetail : microsoft.graph.eventMessageDetail {
  initiator : microsoft.graph.identitySet;
  members : many microsoft.graph.teamworkUserIdentity;
};

type microsoft.graph.operationError {
  code : LargeString;
  message : LargeString;
};

type microsoft.graph.provisionChannelEmailResult {
  email : LargeString;
};

type microsoft.graph.tabUpdatedEventMessageDetail : microsoft.graph.eventMessageDetail {
  initiator : microsoft.graph.identitySet;
  tabId : LargeString;
};

type microsoft.graph.teamArchivedEventMessageDetail : microsoft.graph.eventMessageDetail {
  initiator : microsoft.graph.identitySet;
  teamId : LargeString;
};

type microsoft.graph.teamClassSettings {
  notifyGuardiansAboutAssignments : Boolean;
};

type microsoft.graph.teamCreatedEventMessageDetail : microsoft.graph.eventMessageDetail {
  initiator : microsoft.graph.identitySet;
  teamDescription : LargeString;
  teamDisplayName : LargeString;
  teamId : LargeString;
};

type microsoft.graph.teamDescriptionUpdatedEventMessageDetail : microsoft.graph.eventMessageDetail {
  initiator : microsoft.graph.identitySet;
  teamDescription : LargeString;
  teamId : LargeString;
};

type microsoft.graph.teamJoiningDisabledEventMessageDetail : microsoft.graph.eventMessageDetail {
  initiator : microsoft.graph.identitySet;
  teamId : LargeString;
};

type microsoft.graph.teamJoiningEnabledEventMessageDetail : microsoft.graph.eventMessageDetail {
  initiator : microsoft.graph.identitySet;
  teamId : LargeString;
};

type microsoft.graph.teamRenamedEventMessageDetail : microsoft.graph.eventMessageDetail {
  initiator : microsoft.graph.identitySet;
  teamDisplayName : LargeString;
  teamId : LargeString;
};

type microsoft.graph.teamsAppInstalledEventMessageDetail : microsoft.graph.eventMessageDetail {
  initiator : microsoft.graph.identitySet;
  teamsAppDisplayName : LargeString;
  teamsAppId : LargeString;
};

type microsoft.graph.teamsAppRemovedEventMessageDetail : microsoft.graph.eventMessageDetail {
  initiator : microsoft.graph.identitySet;
  teamsAppDisplayName : LargeString;
  teamsAppId : LargeString;
};

type microsoft.graph.teamsAppUpgradedEventMessageDetail : microsoft.graph.eventMessageDetail {
  initiator : microsoft.graph.identitySet;
  teamsAppDisplayName : LargeString;
  teamsAppId : LargeString;
};

type microsoft.graph.teamsTabConfiguration {
  contentUrl : LargeString;
  entityId : LargeString;
  removeUrl : LargeString;
  websiteUrl : LargeString;
};

type microsoft.graph.teamUnarchivedEventMessageDetail : microsoft.graph.eventMessageDetail {
  initiator : microsoft.graph.identitySet;
  teamId : LargeString;
};

type microsoft.graph.teamworkActivityTopic {
  value : LargeString;
  webUrl : LargeString;
};

type microsoft.graph.teamworkApplicationIdentity : microsoft.graph.identity {
};

type microsoft.graph.teamworkOnlineMeetingInfo {
  calendarEventId : LargeString;
  joinWebUrl : LargeString;
  organizer : microsoft.graph.teamworkUserIdentity;
};

type microsoft.graph.teamworkTagIdentity : microsoft.graph.identity {
};

type microsoft.graph.scheduleEntity {
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  endDateTime : DateTime;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  startDateTime : DateTime;
};

type microsoft.graph.shiftItem : microsoft.graph.scheduleEntity {
  activities : many microsoft.graph.shiftActivity;
  displayName : LargeString;
  notes : LargeString;
};

type microsoft.graph.openShiftItem : microsoft.graph.shiftItem {
  openSlotCount : Integer;
};

type microsoft.graph.shiftActivity {
  code : LargeString;
  displayName : LargeString;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  endDateTime : DateTime;
  isPaid : Boolean;
  @odata.precision : 0
  @odata.type : 'Edm.DateTimeOffset'
  startDateTime : DateTime;
};

type microsoft.graph.shiftAvailability {
  recurrence : microsoft.graph.patternedRecurrence;
  timeSlots : many microsoft.graph.timeRange;
  timeZone : LargeString;
};

type microsoft.graph.timeRange {
  endTime : Time;
  startTime : Time;
};

type microsoft.graph.timeOffItem : microsoft.graph.scheduleEntity {
  timeOffReasonId : LargeString;
};

type microsoft.graph.workforceIntegrationEncryption {
  secret : LargeString;
};

type microsoft.graph.attachmentInfo {
  contentType : LargeString;
  name : LargeString;
  size : Integer64;
};

@cds.external : true
service microsoft.graph {};

